{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\main.jsx\";\nimport React, { Component } from \"react\";\nimport Background from \"../images/pinkmoasic.jpg\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport ReactDOM from \"react-dom\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileContent: \"\",\n      fileContentClean: \"\",\n      tagbox: \"Enter text to mark\",\n      formattedparts: \"\",\n      tags: {\n        person: \"yellow\",\n        place: \"red\",\n        bla: \"lightpink\",\n        date: \"blue\",\n        event: \"purple\"\n      },\n      tagsList: [],\n      // Context menu\n      contextMenu: \"\",\n      // Used to keep the text the user marked\n      preHighlightedText: \"\",\n      highlightedText: \"\",\n      postHighlightedText: \"\"\n    };\n\n    this.hadleClickOnUpload = () => {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        var preview = document.getElementById(\"temporaryPlace\");\n        var file = document.querySelector(\"input[id=text_file]\").files[0];\n        var reader = new FileReader();\n        var textHolder = \"File Content hasnot set\";\n        var textFile = /text.*/;\n\n        if (file.type.match(textFile)) {\n          reader.onload = this.loadFile;\n        } else {\n          preview.innerHTML = \"<span class='error'>It doesn't seem to be a text file!</span>\";\n        }\n\n        reader.readAsText(file);\n      } else {\n        alert(\"Your browser is too old to support HTML5 File API\");\n      }\n    };\n\n    this.loadConfiguration = () => {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        var preview = document.getElementById(\"temporaryPlace\");\n        var file = document.querySelector(\"input[id=config_file]\").files[0];\n        var reader = new FileReader();\n        var textHolder = \"File Content hasnot set\";\n        var textFile = /text.*/;\n\n        if (file.type.match(textFile)) {\n          reader.onload = this.tagsConvert;\n        } else {\n          preview.innerHTML = \"<span class='error'>It doesn't seem to be a text file!</span>\";\n        }\n\n        reader.readAsText(file);\n      } else {\n        alert(\"Your browser is too old to support HTML5 File API\");\n      }\n    };\n\n    this.tagsConvert = eventTags => {\n      let conFileContent = eventTags.target.result;\n      let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\n      // Helps to create the context menu.\n\n      let tagsList = [];\n      let lines = conFileContent.split(\"\\n\");\n\n      for (let i = 0; i < lines.length; i++) {\n        let currentPair = lines[i].split(\":\");\n        tagsList.push(currentPair[0]);\n        let pairKey = currentPair[0];\n        let pairValue = currentPair[1];\n        newTags[pairKey] = pairValue;\n      }\n\n      this.state.tags = newTags;\n      this.setTags();\n      this.setState({\n        tagsList: tagsList\n      }); // Initiate setState so the view will update.\n\n      this.setState({\n        tags: newTags\n      });\n    };\n\n    this.captureHighlightedText = (event, data) => {\n      if (window.getSelection() == NaN) {\n        return;\n      }\n\n      let leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().anchorOffset; // each char is in the state\n\n      let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement.id; //calculate the offset from the beggining of the text\n\n      let indexOfCleanText = 0;\n\n      for (let i = 0; i < spanOfHighlightedChunk; i++) {\n        //checking chunk if its not start with % we summing the length\n        if (this.state.formattedtext[i][0] != \"%\") {\n          indexOfCleanText += this.state.formattedtext[i].length;\n        } else {\n          let currentChunk = this.state.formattedtext[i].split(\"%\");\n          let tagLength = currentChunk[1].length;\n          let textlength = currentChunk[2].length;\n          indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\n        }\n      }\n\n      indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\n      let cleanText = this.state.fileContentClean;\n      let preTag = cleanText.substring(0, indexOfCleanText);\n      let inTag = cleanText.substring(indexOfCleanText, indexOfCleanText + window.getSelection().toString().length);\n      let postTag = cleanText.substring(indexOfCleanText + window.getSelection().toString().length, cleanText.length);\n      this.setState({\n        preHighlightedText: preTag\n      });\n      this.setState({\n        highlightedText: inTag\n      });\n      this.setState({\n        postHighlightedText: postTag\n      });\n    };\n\n    this.addTag = (event, data) => {\n      //console.log(data.tagname);\n      //console.log(window.getSelection().toString());\n      //if (window.getSelection() == NaN) {\n      //  return;\n      //}\n      //let leftIndexOfHighlightedChunkAtHisSpan = window.getSelection()\n      //  .anchorOffset;\n      // each char is in the state\n      //let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\n      //  .id;\n      //calculate the offset from the beggining of the text\n      //let indexOfCleanText = 0;\n      //for (let i = 0; i < spanOfHighlightedChunk; i++) {\n      //checking chunk if its not start with % we summing the length\n      //  if (this.state.formattedtext[i][0] != \"%\") {\n      //    indexOfCleanText += this.state.formattedtext[i].length;\n      //  } else {\n      //    let currentChunk = this.state.formattedtext[i].split(\"%\");\n      //    let tagLength = currentChunk[1].length;\n      //    let textlength = currentChunk[2].length;\n      //    indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\n      //  }\n      //}\n      //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\n      //let cleanText = this.state.fileContentClean;\n      //let preTag = cleanText.substring(0, indexOfCleanText);\n      //let inTag = cleanText.substring(\n      //  indexOfCleanText,\n      //  indexOfCleanText + window.getSelection().toString().length\n      //);\n      //let postTag = cleanText.substring(\n      //  indexOfCleanText + window.getSelection().toString().length,\n      //  cleanText.length\n      //);\n      let text = this.state.preHighlightedText + \"<\" + data.tagname + \">\" + this.state.highlightedText + \"</\" + data.tagname + \">\" + this.state.postHighlightedText;\n      console.log(text);\n      this.state.fileContentClean = text;\n      this.setTags();\n      this.setState({\n        fileContentClean: text\n      });\n    };\n\n    this.setTags = () => {\n      let text = this.state.fileContentClean;\n      let higlight = \"<[^<]+>\";\n      let regexHiglight = RegExp(higlight);\n      let closertag = \"</[^<]+>\";\n      let regexclosetag = RegExp(closertag);\n      let par;\n      let spanIndex = 0; //Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let formattedparts = [];\n\n      for (let index = 0; index < parts.length; index++) {\n        //cheking that the current part is not a tag\n        if (!(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))) {\n          if (parts[index] != \"\") formattedparts.push(parts[index]);\n        } // handeling an open tag\n        else {\n            let currenttag = parts[index]; //building the inner tag - cuts inner text\n\n            currenttag = currenttag.substring(1, currenttag.length - 1);\n            let rightclosertag = \"</\" + currenttag + \">\";\n            let regExpRightcloser = RegExp(rightclosertag); //we want to keep running on string until we'll meet the right closer tag\n\n            let newindex = index + 1;\n\n            while (!regExpRightcloser.test(parts[newindex]) && newindex < parts.length) {\n              newindex++;\n            } //if the closing tag matches the opening tag found\n\n\n            if (newindex < parts.length) {\n              //builds the new string for injection\n              let newstring = \"%\" + currenttag + \"%\";\n\n              for (let innerindex = index + 1; innerindex < newindex; innerindex++) {\n                newstring = newstring + parts[innerindex];\n              }\n\n              formattedparts.push(newstring);\n              index = newindex;\n            } else {\n              //if theres no closing tag to a tag so we copy the opening tag as it is\n              formattedparts.push(parts[index]);\n            }\n          }\n      }\n\n      console.log(\"correct\");\n      let tagRegex = RegExp(\"%.+%.+\");\n      let taggedText = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, \" \", formattedparts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        id: i,\n        style: tagRegex.test(part) ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\n        //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: this.state.tags[part.split(\"%\")[1]]\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, part.split(\"%\").reverse()[0])));\n      this.setState({\n        formattedtext: formattedparts\n      });\n      this.setState({\n        fileContent: taggedText\n      });\n    };\n\n    this.loadFile = event => {\n      this.setState({\n        fileContent: event.target.result\n      });\n      this.setState({\n        fileContentClean: event.target.result\n      });\n      this.setTags();\n    };\n  }\n\n  // highlightText = () => {\n  //   let textHolder = this.fileContentClean;\n  //   this.setState({\n  //     fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\n  //   });\n  // };\n  //handleChange = event => {\n  //  this.setState({ tagbox: event.target.value });\n  //};\n  //getHighlightedText = (data, mark) => {\n  //  //console.log(this);\n  //  let text = data;\n  //  let higlight = mark; //this.state.tagbox;\n  //  // Split on higlight term and include term into parts, ignore case\n  //  let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\n  //  let taggedText = (\n  //    <div>\n  //      {\" \"}\n  //      {parts.map((part, i) => (\n  //        <span\n  //          key={i}\n  //          id={i}\n  //          style={\n  //            part.toLowerCase() === higlight.toLowerCase()\n  //              ? {\n  //                  fontWeight: \"bold\",\n  //                  backgroundColor: this.state.tagbox[part]\n  //                }\n  //              : {}\n  //          }\n  //        >\n  //          {part}\n  //        </span>\n  //      ))}{\" \"}\n  //    </div>\n  //  );\n  //  return taggedText;\n  //};\n  render() {\n    //<button onClick={this.highlightText}> Highlight</button>\n    //<input\n    //id=\"tags\"\n    //type=\"text\"\n    //height=\"200\"\n    //width=\"200\"\n    //value={this.state.tagbox}\n    //onChange={this.handleChange}\n    //>\n    //<button onClick={this.addTag}> Add tags</button>\n    let menu = this.state.tagsList.map((part, i) => React.createElement(MenuItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }, \"key = \", i, \"id=\", part, \"data=\", {\n      tagname: part\n    }, \" onClick=\", this.addTag, \"> //\", \" \", React.createElement(\"div\", {\n      style: {\n        backgroundColor: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"Set as \", part, \" \")));\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      align: \"center\",\n      style: {\n        backgroundImage: \"url(\".concat(Background, \")\"),\n        height: \"100vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, \" Manage Tags in Article\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, \" Choose a file along with configuration file\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, \"Choose an article\", React.createElement(\"input\", {\n      type: \"file\",\n      id: \"text_file\",\n      onChange: this.hadleClickOnUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361\n      },\n      __self: this\n    }, \"Choose Configuration file\", React.createElement(\"input\", {\n      type: \"file\",\n      id: \"config_file\",\n      onChange: this.loadConfiguration,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    })), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      length: \"25%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, \" \"), React.createElement(\"td\", {\n      length: \"50%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, \" \", React.createElement(ContextMenuTrigger, {\n      id: \"some_unique_identifier\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"text\",\n      onClickCapture: this.captureHighlightedText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, this.state.fileContent), \" \", menu), this.state.contextMenu, React.createElement(ContextMenu, {\n      id: \"some_unique_identifier\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381\n      },\n      __self: this\n    })), React.createElement(\"td\", {\n      length: \"25%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383\n      },\n      __self: this\n    }, \" \")))));\n  }\n\n}\n\nexport default Main; //et contextMenu = tagsList.map((part, i) => (\n//  <MenuItem>\n//    key = {i}\n//    id={part}\n//    data={{ tagname: part }} onClick={this.addTag}> //{\" \"}\n//    <div style={{ backgroundColor: \"white\" }}>Set as {part} </div>\n//  </MenuItem>\n//));\n//<MenuItem data={{ tagname: \"person\" }} onClick={this.addTag}>\n//                    <div style={{ backgroundColor: \"white\" }}>\n//                      {\" \"}\n//                      Set as person{\" \"}\n//                    </div>\n//                  </MenuItem>\n//                  <MenuItem data={{ tagname: \"place\" }} onClick={this.addTag}>\n//                    <div style={{ backgroundColor: \"white\" }}>\n//                      {\" \"}\n//                      Set as place{\" \"}\n//                    </div>\n//                  </MenuItem>\n//                  <MenuItem divider />\n//                  <MenuItem data={{ tagname: \"period\" }} onClick={this.addTag}>\n//                    <div style={{ backgroundColor: \"white\" }}>\n//                      {\" \"}\n//                      Set as period{\" \"}\n//                    </div>\n//                  </MenuItem>","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/main.jsx"],"names":["React","Component","Background","ContextMenu","MenuItem","ContextMenuTrigger","ReactDOM","throwStatement","Main","state","fileContent","fileContentClean","tagbox","formattedparts","tags","person","place","bla","date","event","tagsList","contextMenu","preHighlightedText","highlightedText","postHighlightedText","hadleClickOnUpload","window","File","FileReader","FileList","Blob","preview","document","getElementById","file","querySelector","files","reader","textHolder","textFile","type","match","onload","loadFile","innerHTML","readAsText","alert","loadConfiguration","tagsConvert","eventTags","conFileContent","target","result","newTags","lines","split","i","length","currentPair","push","pairKey","pairValue","setTags","setState","captureHighlightedText","data","getSelection","NaN","leftIndexOfHighlightedChunkAtHisSpan","anchorOffset","spanOfHighlightedChunk","anchorNode","parentElement","id","indexOfCleanText","formattedtext","currentChunk","tagLength","textlength","cleanText","preTag","substring","inTag","toString","postTag","addTag","text","tagname","console","log","higlight","regexHiglight","RegExp","closertag","regexclosetag","par","spanIndex","parts","index","test","currenttag","rightclosertag","regExpRightcloser","newindex","newstring","innerindex","tagRegex","taggedText","map","part","fontWeight","backgroundColor","reverse","render","menu","backgroundImage","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Background from \"../images/pinkmoasic.jpg\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { throwStatement } from \"@babel/types\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    fileContent: \"\",\r\n    fileContentClean: \"\",\r\n    tagbox: \"Enter text to mark\",\r\n    formattedparts: \"\",\r\n    tags: {\r\n      person: \"yellow\",\r\n      place: \"red\",\r\n      bla: \"lightpink\",\r\n      date: \"blue\",\r\n      event: \"purple\"\r\n    },\r\n    tagsList: [],\r\n    // Context menu\r\n    contextMenu: \"\",\r\n    // Used to keep the text the user marked\r\n    preHighlightedText: \"\",\r\n    highlightedText: \"\",\r\n    postHighlightedText: \"\"\r\n  };\r\n\r\n  hadleClickOnUpload = () => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      var preview = document.getElementById(\"temporaryPlace\");\r\n      var file = document.querySelector(\"input[id=text_file]\").files[0];\r\n      var reader = new FileReader();\r\n      var textHolder = \"File Content hasnot set\";\r\n\r\n      var textFile = /text.*/;\r\n      if (file.type.match(textFile)) {\r\n        reader.onload = this.loadFile;\r\n      } else {\r\n        preview.innerHTML =\r\n          \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n  };\r\n\r\n  loadConfiguration = () => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      var preview = document.getElementById(\"temporaryPlace\");\r\n      var file = document.querySelector(\"input[id=config_file]\").files[0];\r\n      var reader = new FileReader();\r\n      var textHolder = \"File Content hasnot set\";\r\n\r\n      var textFile = /text.*/;\r\n      if (file.type.match(textFile)) {\r\n        reader.onload = this.tagsConvert;\r\n      } else {\r\n        preview.innerHTML =\r\n          \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n  };\r\n  //if (file.type.match(textFile)) {\r\n  //  reader.onload = function(event) {\r\n  //    preview.innerHTML = event.target.result;\r\n  //    //this.setState({ fileContent: event.target.result });\r\n  //  };\r\n  //}\r\n  tagsConvert = eventTags => {\r\n    let conFileContent = eventTags.target.result;\r\n    let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\r\n    // Helps to create the context menu.\r\n    let tagsList = [];\r\n\r\n    let lines = conFileContent.split(\"\\n\");\r\n    for (let i = 0; i < lines.length; i++) {\r\n      let currentPair = lines[i].split(\":\");\r\n      tagsList.push(currentPair[0]);\r\n      let pairKey = currentPair[0];\r\n      let pairValue = currentPair[1];\r\n      newTags[pairKey] = pairValue;\r\n    }\r\n\r\n    this.state.tags = newTags;\r\n    this.setTags();\r\n    this.setState({ tagsList: tagsList });\r\n\r\n    // Initiate setState so the view will update.\r\n    this.setState({ tags: newTags });\r\n  };\r\n\r\n  captureHighlightedText = (event, data) => {\r\n    if (window.getSelection() == NaN) {\r\n      return;\r\n    }\r\n    let leftIndexOfHighlightedChunkAtHisSpan = window.getSelection()\r\n      .anchorOffset;\r\n    // each char is in the state\r\n    let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\r\n      .id;\r\n    //calculate the offset from the beggining of the text\r\n\r\n    let indexOfCleanText = 0;\r\n    for (let i = 0; i < spanOfHighlightedChunk; i++) {\r\n      //checking chunk if its not start with % we summing the length\r\n      if (this.state.formattedtext[i][0] != \"%\") {\r\n        indexOfCleanText += this.state.formattedtext[i].length;\r\n      } else {\r\n        let currentChunk = this.state.formattedtext[i].split(\"%\");\r\n        let tagLength = currentChunk[1].length;\r\n        let textlength = currentChunk[2].length;\r\n        indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\r\n      }\r\n    }\r\n    indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\r\n    let cleanText = this.state.fileContentClean;\r\n    let preTag = cleanText.substring(0, indexOfCleanText);\r\n    let inTag = cleanText.substring(\r\n      indexOfCleanText,\r\n      indexOfCleanText + window.getSelection().toString().length\r\n    );\r\n    let postTag = cleanText.substring(\r\n      indexOfCleanText + window.getSelection().toString().length,\r\n      cleanText.length\r\n    );\r\n\r\n    this.setState({ preHighlightedText: preTag });\r\n    this.setState({ highlightedText: inTag });\r\n    this.setState({ postHighlightedText: postTag });\r\n  };\r\n\r\n  addTag = (event, data) => {\r\n    //console.log(data.tagname);\r\n    //console.log(window.getSelection().toString());\r\n    //if (window.getSelection() == NaN) {\r\n    //  return;\r\n    //}\r\n    //let leftIndexOfHighlightedChunkAtHisSpan = window.getSelection()\r\n    //  .anchorOffset;\r\n    // each char is in the state\r\n    //let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\r\n    //  .id;\r\n    //calculate the offset from the beggining of the text\r\n\r\n    //let indexOfCleanText = 0;\r\n    //for (let i = 0; i < spanOfHighlightedChunk; i++) {\r\n    //checking chunk if its not start with % we summing the length\r\n    //  if (this.state.formattedtext[i][0] != \"%\") {\r\n    //    indexOfCleanText += this.state.formattedtext[i].length;\r\n    //  } else {\r\n    //    let currentChunk = this.state.formattedtext[i].split(\"%\");\r\n    //    let tagLength = currentChunk[1].length;\r\n    //    let textlength = currentChunk[2].length;\r\n    //    indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\r\n    //  }\r\n    //}\r\n    //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\r\n    //let cleanText = this.state.fileContentClean;\r\n    //let preTag = cleanText.substring(0, indexOfCleanText);\r\n    //let inTag = cleanText.substring(\r\n    //  indexOfCleanText,\r\n    //  indexOfCleanText + window.getSelection().toString().length\r\n    //);\r\n    //let postTag = cleanText.substring(\r\n    //  indexOfCleanText + window.getSelection().toString().length,\r\n    //  cleanText.length\r\n    //);\r\n\r\n    let text =\r\n      this.state.preHighlightedText +\r\n      \"<\" +\r\n      data.tagname +\r\n      \">\" +\r\n      this.state.highlightedText +\r\n      \"</\" +\r\n      data.tagname +\r\n      \">\" +\r\n      this.state.postHighlightedText;\r\n    console.log(text);\r\n    this.state.fileContentClean = text;\r\n    this.setTags();\r\n    this.setState({ fileContentClean: text });\r\n  };\r\n\r\n  setTags = () => {\r\n    let text = this.state.fileContentClean;\r\n    let higlight = \"<[^<]+>\";\r\n    let regexHiglight = RegExp(higlight);\r\n    let closertag = \"</[^<]+>\";\r\n    let regexclosetag = RegExp(closertag);\r\n    let par;\r\n    let spanIndex = 0;\r\n\r\n    //Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let formattedparts = [];\r\n\r\n    for (let index = 0; index < parts.length; index++) {\r\n      //cheking that the current part is not a tag\r\n      if (\r\n        !(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))\r\n      ) {\r\n        if (parts[index] != \"\") formattedparts.push(parts[index]);\r\n      }\r\n      // handeling an open tag\r\n      else {\r\n        let currenttag = parts[index];\r\n        //building the inner tag - cuts inner text\r\n        currenttag = currenttag.substring(1, currenttag.length - 1);\r\n        let rightclosertag = \"</\" + currenttag + \">\";\r\n        let regExpRightcloser = RegExp(rightclosertag);\r\n        //we want to keep running on string until we'll meet the right closer tag\r\n        let newindex = index + 1;\r\n        while (\r\n          !regExpRightcloser.test(parts[newindex]) &&\r\n          newindex < parts.length\r\n        ) {\r\n          newindex++;\r\n        }\r\n        //if the closing tag matches the opening tag found\r\n        if (newindex < parts.length) {\r\n          //builds the new string for injection\r\n          let newstring = \"%\" + currenttag + \"%\";\r\n\r\n          for (\r\n            let innerindex = index + 1;\r\n            innerindex < newindex;\r\n            innerindex++\r\n          ) {\r\n            newstring = newstring + parts[innerindex];\r\n          }\r\n\r\n          formattedparts.push(newstring);\r\n          index = newindex;\r\n        } else {\r\n          //if theres no closing tag to a tag so we copy the opening tag as it is\r\n          formattedparts.push(parts[index]);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"correct\");\r\n\r\n    let tagRegex = RegExp(\"%.+%.+\");\r\n    let taggedText = (\r\n      <div>\r\n        {\" \"}\r\n        {formattedparts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            id={i}\r\n            style={\r\n              tagRegex.test(part)\r\n                ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\r\n                  //part.toLowerCase() === higlight.toLowerCase()\r\n                  {\r\n                    fontWeight: \"bold\",\r\n                    backgroundColor: this.state.tags[part.split(\"%\")[1]]\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {part.split(\"%\").reverse()[0]}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n    this.setState({ formattedtext: formattedparts });\r\n    this.setState({ fileContent: taggedText });\r\n  };\r\n\r\n  loadFile = event => {\r\n    this.setState({ fileContent: event.target.result });\r\n    this.setState({ fileContentClean: event.target.result });\r\n    this.setTags();\r\n  };\r\n\r\n  // highlightText = () => {\r\n  //   let textHolder = this.fileContentClean;\r\n  //   this.setState({\r\n  //     fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\r\n  //   });\r\n  // };\r\n\r\n  //handleChange = event => {\r\n  //  this.setState({ tagbox: event.target.value });\r\n  //};\r\n\r\n  //getHighlightedText = (data, mark) => {\r\n  //  //console.log(this);\r\n  //  let text = data;\r\n  //  let higlight = mark; //this.state.tagbox;\r\n  //  // Split on higlight term and include term into parts, ignore case\r\n  //  let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n  //  let taggedText = (\r\n  //    <div>\r\n  //      {\" \"}\r\n  //      {parts.map((part, i) => (\r\n  //        <span\r\n  //          key={i}\r\n  //          id={i}\r\n  //          style={\r\n  //            part.toLowerCase() === higlight.toLowerCase()\r\n  //              ? {\r\n  //                  fontWeight: \"bold\",\r\n  //                  backgroundColor: this.state.tagbox[part]\r\n  //                }\r\n  //              : {}\r\n  //          }\r\n  //        >\r\n  //          {part}\r\n  //        </span>\r\n  //      ))}{\" \"}\r\n  //    </div>\r\n  //  );\r\n  //  return taggedText;\r\n  //};\r\n\r\n  render() {\r\n    //<button onClick={this.highlightText}> Highlight</button>\r\n    //<input\r\n    //id=\"tags\"\r\n    //type=\"text\"\r\n    //height=\"200\"\r\n    //width=\"200\"\r\n    //value={this.state.tagbox}\r\n    //onChange={this.handleChange}\r\n    //>\r\n    //<button onClick={this.addTag}> Add tags</button>\r\n    let menu = this.state.tagsList.map((part, i) => (\r\n      <MenuItem>\r\n        key = {i}\r\n        id={part}\r\n        data={{ tagname: part }} onClick={this.addTag}> //{\" \"}\r\n        <div style={{ backgroundColor: \"white\" }}>Set as {part} </div>\r\n      </MenuItem>\r\n    ));\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          align=\"center\"\r\n          style={{ backgroundImage: `url(${Background})`, height: \"100vh\" }}\r\n        >\r\n          <br></br>\r\n          <br></br>\r\n          <h1> Manage Tags in Article</h1>\r\n          <h2> Choose a file along with configuration file</h2>\r\n          <p>\r\n            Choose an article\r\n            <input\r\n              type=\"file\"\r\n              id=\"text_file\"\r\n              onChange={this.hadleClickOnUpload}\r\n            ></input>\r\n          </p>\r\n          <p>\r\n            Choose Configuration file\r\n            <input\r\n              type=\"file\"\r\n              id=\"config_file\"\r\n              onChange={this.loadConfiguration}\r\n            ></input>\r\n          </p>\r\n          <table>\r\n            <tr>\r\n              <td length=\"25%\"> </td>\r\n              <td length=\"50%\">\r\n                {\" \"}\r\n                <ContextMenuTrigger id=\"some_unique_identifier\">\r\n                  <div id=\"text\" onClickCapture={this.captureHighlightedText}>\r\n                    {this.state.fileContent}\r\n                  </div>{\" \"}\r\n                  {menu}\r\n                </ContextMenuTrigger>\r\n                {this.state.contextMenu}\r\n                <ContextMenu id=\"some_unique_identifier\"></ContextMenu>\r\n              </td>\r\n              <td length=\"25%\"> </td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Main;\r\n\r\n//et contextMenu = tagsList.map((part, i) => (\r\n//  <MenuItem>\r\n//    key = {i}\r\n//    id={part}\r\n//    data={{ tagname: part }} onClick={this.addTag}> //{\" \"}\r\n//    <div style={{ backgroundColor: \"white\" }}>Set as {part} </div>\r\n//  </MenuItem>\r\n//));\r\n//<MenuItem data={{ tagname: \"person\" }} onClick={this.addTag}>\r\n//                    <div style={{ backgroundColor: \"white\" }}>\r\n//                      {\" \"}\r\n//                      Set as person{\" \"}\r\n//                    </div>\r\n//                  </MenuItem>\r\n//                  <MenuItem data={{ tagname: \"place\" }} onClick={this.addTag}>\r\n//                    <div style={{ backgroundColor: \"white\" }}>\r\n//                      {\" \"}\r\n//                      Set as place{\" \"}\r\n//                    </div>\r\n//                  </MenuItem>\r\n//                  <MenuItem divider />\r\n//                  <MenuItem data={{ tagname: \"period\" }} onClick={this.addTag}>\r\n//                    <div style={{ backgroundColor: \"white\" }}>\r\n//                      {\" \"}\r\n//                      Set as period{\" \"}\r\n//                    </div>\r\n//                  </MenuItem>\r\n"]},"metadata":{},"sourceType":"module"}