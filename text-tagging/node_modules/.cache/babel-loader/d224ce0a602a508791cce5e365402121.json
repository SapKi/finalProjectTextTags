{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\main.jsx\";\nimport React, { Component } from \"react\";\nimport Background from \"../images/backgroundabout.jpg\";\nimport logo from \"../images/logo.png\";\nimport biulogo from \"../images/biulogo.png\";\nimport TaggedTextArea from \"./taggedTextArea\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport ReactDOM from \"react-dom\";\nimport { throwStatement } from \"@babel/types\";\nimport \"react-s-alert/dist/s-alert-default.css\";\nimport Alert from \"react-s-alert\";\nimport \"react-s-alert/dist/s-alert-default.css\";\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\nconst divStyle = {\n  color: \"#5B6676\",\n  fontSize: \"medium\",\n  fontFamily: \"Arial\",\n  backgroundSize: \"contain\",\n  overflowX: \"hidden\",\n  height: \"100vh\",\n  background: \"url(shutterstock_125995700.jpg)\",\n  backgroundImage: \"url(\".concat(Background, \")\")\n};\nconst buttonStyle = {\n  backgroundColor: \"#74CDD1\"\n}; // backgroundSize: \"100%\",\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Holds infornation on the files are cuurently being worked on.\n      filename: \"\",\n      conffilename: \"\",\n      fileContent: \"\",\n      configurationFileContent: \"\",\n      isUpTodate: true,\n      // Holds te lists of files, configuration files, and spesial character,\n      // the server have sent.\n      filesList: [],\n      confFileList: [],\n      specialCharsList: [],\n      // Holds the tags' names the user can tag the text with.\n      // Each tag has its color.\n      tagsList: [],\n      tagsAndColors: {},\n      // Used when a new file is uploaded to the server.\n      fileToUploadName: \"\",\n      fileToUploadContent: \"\",\n      newlyUploadedFileName: \"\",\n      // Saves the title of the current page presented/\n      pageLayout: \"choose\",\n      // Holds a list of file types the user can download from the server.\n      fileTypes: [\"clean file\", \"tagged file\", \"report\", \"html\"]\n    };\n\n    this.arrageConfigutationsFromServer = configurations => {\n      // Saperate the files to text files and configuration files.\n      let confs = configurations.split(\"\\n\"); // Seperate the text files names.\n\n      let textFiles = confs[0].split(\",\"); // Seperates the configuration file names.\n\n      let confFiles = confs[1].split(\",\"); // Seperate the spacial chars the marker will egnore.\n\n      let spacialChars = confs[2].split(\" \");\n      spacialChars.push(\" \");\n      spacialChars.push(\"\\n\");\n      spacialChars.push(\"\\r\");\n      this.state.filesList = textFiles;\n      this.state.confFileList = confFiles;\n      this.setState({\n        specialCharsList: spacialChars\n      });\n      this.UpdateChosenFile();\n    };\n\n    this.handleClickOnUpload = event => {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        // var preview = document.getElementById(\"temporaryPlace\");\n        var file = document.querySelector(\"input[id=text_file]\").files[0];\n        var reader = new FileReader();\n        var textFile = /text.*/;\n        var namefile = event.target.value;\n        namefile = namefile.split(\"\\\\\");\n        this.state.fileToUploadName = namefile[namefile.length - 1];\n\n        if (file.type.match(textFile)) {\n          reader.onload = this.uploadFileToServer;\n        }\n\n        reader.readAsText(file);\n      } else {\n        alert(\"Your browser is too old to support HTML5 File API\");\n      }\n    };\n\n    this.handleClickLoadFiles = eventArgs => {\n      var textFile = document.getElementById(\"fileChoser\");\n      textFile = textFile.value;\n      this.getFileFromServer(textFile);\n      var confFile = document.getElementById(\"conffileChoser\");\n      confFile = confFile.value;\n      this.getFileFromServer(confFile);\n      this.state.isUpTodate = true;\n      this.setState({\n        pageLayout: \"edit\"\n      });\n    };\n\n    this.makeStatisticsFile = () => {\n      let address = \"http://localhost:9000/makeReport\";\n      fetch(address, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          data: this.state.fileContent,\n          filename: this.state.filename,\n          confData: this.state.configurationFileContent,\n          confFileName: this.state.conffilename\n        })\n      }).then(function (response) {});\n    };\n\n    this.handleSaveFile = event => {\n      this.makeStatisticsFile();\n      this.makeHtml();\n      this.saveFileToServer(this.state.filename, this.state.fileContent);\n      this.state.isUpTodate = true;\n    };\n\n    this.saveFileToServer = (fileTosaveName, fileTosaveData) => {\n      let address = \"http://localhost:9000/saveFile\";\n      fetch(address, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          data: fileTosaveData,\n          filename: fileTosaveName\n        })\n      }).then(function (response) {\n        let answer = response.body.getReader();\n        console.log();\n      });\n    };\n\n    this.handleClickRetrunToMainMenu = event => {\n      if (!this.state.isUpTodate) {\n        this.raiseWarning(event);\n      } else {\n        this.setState({\n          pageLayout: \"choose\"\n        });\n      } // Set isUpTodate to  true, to allow the user\n      // to return to the main menu without saveing his work.\n      // (At the first attempt of a user to return to the main menu,\n      // a warning message appears, and at the secound attempt, \n      // the application returns to the main menu).\n\n\n      this.state.isUpTodate = true;\n    };\n\n    this.handleClickOnDownload = eventArgs => {\n      var action = document.getElementById(\"actionChooser\");\n      action = action.value;\n      var filename = document.getElementById(\"fileToDownloadChooser\");\n      filename = filename.value;\n      var conffilename = document.getElementById(\"conffileToDownloadChooser\");\n      conffilename = conffilename.value;\n      let downloadedFileName = action + \"_\" + filename;\n\n      if (action == \"html\") {\n        downloadedFileName = filename + \".html\";\n      }\n\n      let address = \"http://localhost:9000/downloadfile\";\n      fetch(address, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          action: action,\n          filename: filename,\n          confFileName: conffilename\n        })\n      }).then(response => {\n        response.blob().then(blob => {\n          let url = window.URL.createObjectURL(blob);\n          let a = document.createElement(\"a\");\n          a.href = url;\n          a.download = downloadedFileName;\n          a.click();\n        });\n      });\n    };\n\n    this.setCurrentTextFile = text => {\n      let filename = text.split(\"\\n\");\n      let fileData = text.slice(filename[0].length + 1, text.lenth); //first chunk of text is the name\n\n      this.setState({\n        filename: filename[0]\n      }); //the rest of the text\n\n      this.setState({\n        fileContent: fileData\n      });\n    };\n\n    this.setCurrentConfigurationFile = text => {\n      let filename = text.split(\"\\n\");\n      let conFileContent = filename.slice(1, filename.length);\n      let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\n      // Helps to create the context menu.\n\n      let tagslist = [];\n\n      for (let i = 0; i < conFileContent.length; i++) {\n        let currentPair = conFileContent[i].split(\":\");\n        tagslist.push(currentPair[0]);\n        let pairKey = currentPair[0];\n        let pairValue = currentPair[1];\n        newTags[pairKey] = pairValue;\n      }\n\n      this.state.conffilename = filename[0];\n      this.state.configurationFileContent = conFileContent;\n      this.state.tagsList = tagslist; // Initiate setState so the view will update.\n\n      this.setState({\n        tagsAndColors: newTags\n      });\n    };\n\n    this.uploadFileToServer = event => {\n      let fileToUploadContent = event.target.result;\n      this.saveFileToServer(this.state.fileToUploadName, fileToUploadContent); // Get the updated list of files on the server.\n\n      this.getConficurationFromServer();\n      this.UpdateChosenFile();\n    };\n\n    this.makeHtml = () => {\n      var textFile = document.getElementById(\"text\");\n      textFile = textFile.innerHTML;\n      var htmlFile = \"\";\n      htmlFile += \"<!DOCTYPE html>\";\n      htmlFile += \"<html>\";\n      htmlFile += \"<head>\";\n      htmlFile += \"<title>\";\n      htmlFile += this.state.filename;\n      htmlFile += \"</title>\";\n      htmlFile += \"</head>\";\n      htmlFile += \"<body>\";\n      htmlFile += \"<h3>\";\n      htmlFile += textFile;\n      htmlFile += \"</h3>\";\n      htmlFile += \"</body>\";\n      htmlFile += \"</html>\";\n      let address = \"http://localhost:9000/saveFile\";\n      fetch(address, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          data: htmlFile,\n          filename: this.state.filename + \".html\"\n        })\n      }).then(function (response) {\n        let answer = response.body.getReader();\n      });\n    };\n\n    this.UpdateChosenFile = () => {\n      // If the list of files sent from the server had the file was added to the server.\n      const exists = this.state.filesList.some(v => v == this.state.fileToUploadName);\n\n      if (exists) {\n        var textFile = document.getElementById(\"fileChoser\");\n        textFile.value = this.state.fileToUploadName;\n      }\n    };\n\n    this.getFileFromServer = fileName => {\n      //var fileName = filename; //eventArgs.currentTarget.innerHTML.trim();\n      if (!fileName.endsWith(\".txt\")) {\n        var request = \"http://localhost:9000/openConfigurationFile/\" + fileName;\n        fetch(request).then(res => res.text()).then(res => this.setCurrentConfigurationFile(res));\n      } else {\n        var request = \"http://localhost:9000/openFile/\" + fileName;\n        fetch(request).then(res => res.text()).then(res => this.setCurrentTextFile(res));\n      }\n    };\n\n    this.returnPageLayout = () => {\n      if (this.state.pageLayout == \"choose\") {\n        return this.returnMainMenuLayout();\n      } else if (this.state.pageLayout == \"edit\") {\n        return this.returnEditPageLayout();\n      }\n    };\n\n    this.returnMainMenuLayout = () => {\n      let page = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }), React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 397\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 398\n        },\n        __self: this\n      }, \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, \"1. Select an existing document\"), \" \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        name: \"fileChoser\",\n        id: \"fileChoser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, \" \", this.createList(this.state.filesList)), \" \")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 410\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 411\n        },\n        __self: this\n      }, \" -or- \"), \" \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        },\n        __self: this\n      }, \" \")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 415\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 416\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }, \"Upload New File to Server \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }), \" \")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 421\n        },\n        __self: this\n      }, \" \", React.createElement(\"input\", {\n        type: \"file\",\n        id: \"text_file\",\n        onChange: this.handleClickOnUpload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430\n        },\n        __self: this\n      }), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433\n        },\n        __self: this\n      }, \" 2. Choose a configuration file: \")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        name: \"conffileChoser\",\n        id: \"conffileChoser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436\n        },\n        __self: this\n      }, this.createList(this.state.confFileList), \" \"))), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 441\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442\n        },\n        __self: this\n      }, \" \"), React.createElement(\"td\", {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 444\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.handleClickLoadFiles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }, \" \", \"Load files\")))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 453\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 454\n        },\n        __self: this\n      }, \"Download file\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455\n        },\n        __self: this\n      }), React.createElement(\"select\", {\n        name: \"actionChooser\",\n        id: \"actionChooser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456\n        },\n        __self: this\n      }, \" \", this.createList(this.state.fileTypes)), \" \", React.createElement(\"select\", {\n        name: \"fileToDownloadChooser\",\n        id: \"fileToDownloadChooser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460\n        },\n        __self: this\n      }, \" \", this.createList(this.state.filesList)), \" \", React.createElement(\"select\", {\n        name: \"conffileToDownloadChooser\",\n        id: \"conffileToDownloadChooser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464\n        },\n        __self: this\n      }, this.createList(this.state.confFileList), \" \"), \"  \", React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.handleClickOnDownload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471\n        },\n        __self: this\n      }, \" \", \"Download file\", \" \")), React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 476\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477\n        },\n        __self: this\n      }, \" \", React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 479\n        },\n        __self: this\n      }, \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481\n        },\n        __self: this\n      }, \"\\xA9 Sapir Kikoz, Yifat Yankovich - \")), \" \"), React.createElement(\"td\", {\n        align: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484\n        },\n        __self: this\n      }, \" \", React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486\n        },\n        __self: this\n      }, \" September 2020 \"))));\n      return page;\n    };\n\n    this.returnEditPageLayout = () => {\n      let page = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        },\n        __self: this\n      }, \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500\n        },\n        __self: this\n      }, \"Choosen Article: \", this.state.filename, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        },\n        __self: this\n      }), \"Choosen Configuration File: \", this.state.conffilename)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 507\n        },\n        __self: this\n      }), React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 508\n        },\n        __self: this\n      }, \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      }, \"Add or edit tags by selecting and right clicking the text.\"), \" \"), React.createElement(TaggedTextArea, {\n        tagsAndColors: this.state.tagsAndColors,\n        tagsList: this.state.tagsList,\n        specialCharsList: this.state.specialCharsList,\n        fileContent: this.state.fileContent,\n        updateFileContent: this.updateFileContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.handleSaveFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520\n        },\n        __self: this\n      }, \" \", \"Save Work on System\"), \"     \", React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.handleClickRetrunToMainMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525\n        },\n        __self: this\n      }, \" \", \"Return to Main Menu\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: this.raiseWarning,\n        onClose: this.handleOnClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533\n        },\n        __self: this\n      }))));\n      return page;\n    };\n\n    this.updateFileContent = content => {\n      this.state.isUpTodate = false;\n      this.setState({\n        fileContent: content\n      });\n    };\n\n    this.createList = list => {\n      return list.map((part, i) => React.createElement(\"option\", {\n        value: part,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 556\n        },\n        __self: this\n      }, \" \", part));\n    };\n  }\n\n  //the function thats doing the first fetch with th server\n  getConficurationFromServer() {\n    fetch(\"http://localhost:9000/\").then(res => res.text()).then(res => this.arrageConfigutationsFromServer(res));\n  } //this function lunches automaticly with the built in when the websie is running\n  //componentWillMount() {\n\n\n  componentDidMount() {\n    this.getConficurationFromServer();\n  } //initialize the articles list, the configuration files, and special cases based\n  //on the data that received from server and held by filnames\n\n\n  // push notification to user when clicking on the \"return to main menu\" button\n  // without saving changes\n  raiseWarning(e) {\n    e.preventDefault();\n    Alert.info(\"Make sure to save your changes before returning to the Main Menu\", {\n      position: \"top\",\n      timeout: \"none\",\n      onClose: function () {\n        console.log(\"onClose Fired!\");\n      }\n    });\n  } // Render the frame of the site and get the cueent page from the method this.returnPageLayout()\n\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      align: \"center\",\n      style: divStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      align: \"right\",\n      src: biulogo,\n      alt: \"biulogo\",\n      style: {\n        width: \"auto\",\n        height: \"0.75cm\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      align: \"left\",\n      src: logo,\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"Jerusalem Knowledge Center\"), \" \"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"Tag Editor\")), this.returnPageLayout(), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, this.props.children), React.createElement(Alert, {\n      stack: {\n        limit: 3\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }))));\n  } // Returns the current page the web sites has to present.\n\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/main.jsx"],"names":["React","Component","Background","logo","biulogo","TaggedTextArea","ContextMenu","MenuItem","ContextMenuTrigger","ReactDOM","throwStatement","Alert","divStyle","color","fontSize","fontFamily","backgroundSize","overflowX","height","background","backgroundImage","buttonStyle","backgroundColor","Main","state","filename","conffilename","fileContent","configurationFileContent","isUpTodate","filesList","confFileList","specialCharsList","tagsList","tagsAndColors","fileToUploadName","fileToUploadContent","newlyUploadedFileName","pageLayout","fileTypes","arrageConfigutationsFromServer","configurations","confs","split","textFiles","confFiles","spacialChars","push","setState","UpdateChosenFile","handleClickOnUpload","event","window","File","FileReader","FileList","Blob","file","document","querySelector","files","reader","textFile","namefile","target","value","length","type","match","onload","uploadFileToServer","readAsText","alert","handleClickLoadFiles","eventArgs","getElementById","getFileFromServer","confFile","makeStatisticsFile","address","fetch","method","headers","body","JSON","stringify","data","confData","confFileName","then","response","handleSaveFile","makeHtml","saveFileToServer","fileTosaveName","fileTosaveData","answer","getReader","console","log","handleClickRetrunToMainMenu","raiseWarning","handleClickOnDownload","action","downloadedFileName","blob","url","URL","createObjectURL","a","createElement","href","download","click","setCurrentTextFile","text","fileData","slice","lenth","setCurrentConfigurationFile","conFileContent","newTags","tagslist","i","currentPair","pairKey","pairValue","result","getConficurationFromServer","innerHTML","htmlFile","exists","some","v","fileName","endsWith","request","res","returnPageLayout","returnMainMenuLayout","returnEditPageLayout","page","createList","updateFileContent","handleOnClose","content","list","map","part","componentDidMount","e","preventDefault","info","position","timeout","onClose","render","width","props","children","limit"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Background from \"../images/backgroundabout.jpg\";\r\nimport logo from \"../images/logo.png\";\r\nimport biulogo from \"../images/biulogo.png\";\r\nimport TaggedTextArea from \"./taggedTextArea\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { throwStatement } from \"@babel/types\";\r\nimport \"react-s-alert/dist/s-alert-default.css\";\r\nimport Alert from \"react-s-alert\";\r\nimport \"react-s-alert/dist/s-alert-default.css\";\r\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\r\n\r\nconst divStyle = {\r\n  color: \"#5B6676\",\r\n  fontSize: \"medium\",\r\n  fontFamily: \"Arial\",\r\n  backgroundSize: \"contain\",\r\n  overflowX: \"hidden\",\r\n  height: \"100vh\",\r\n  background: \"url(shutterstock_125995700.jpg)\",\r\n  backgroundImage: `url(${Background})`,\r\n};\r\n\r\nconst buttonStyle = {\r\n  backgroundColor: \"#74CDD1\",\r\n};\r\n// backgroundSize: \"100%\",\r\nclass Main extends Component {\r\n  state = {\r\n    // Holds infornation on the files are cuurently being worked on.\r\n    filename: \"\",\r\n    conffilename: \"\",\r\n    fileContent: \"\",\r\n    configurationFileContent: \"\",\r\n    isUpTodate: true,\r\n\r\n    // Holds te lists of files, configuration files, and spesial character,\r\n    // the server have sent.\r\n    filesList: [],\r\n    confFileList: [],\r\n    specialCharsList: [],\r\n\r\n    // Holds the tags' names the user can tag the text with.\r\n    // Each tag has its color.\r\n    tagsList: [],\r\n    tagsAndColors: {},\r\n\r\n    // Used when a new file is uploaded to the server.\r\n    fileToUploadName: \"\",\r\n    fileToUploadContent: \"\",\r\n    newlyUploadedFileName: \"\",\r\n    \r\n    // Saves the title of the current page presented/\r\n    pageLayout: \"choose\",\r\n\r\n    // Holds a list of file types the user can download from the server.\r\n    fileTypes: [\"clean file\", \"tagged file\", \"report\", \"html\"],\r\n  };\r\n\r\n  //the function thats doing the first fetch with th server\r\n  getConficurationFromServer() {\r\n    fetch(\"http://localhost:9000/\")\r\n      .then((res) => res.text())\r\n      .then((res) => this.arrageConfigutationsFromServer(res));\r\n  }\r\n\r\n  //this function lunches automaticly with the built in when the websie is running\r\n  //componentWillMount() {\r\n  componentDidMount(){\r\n      this.getConficurationFromServer();\r\n  }\r\n\r\n  //initialize the articles list, the configuration files, and special cases based\r\n  //on the data that received from server and held by filnames\r\n  arrageConfigutationsFromServer = (configurations) => {\r\n    // Saperate the files to text files and configuration files.\r\n    let confs = configurations.split(\"\\n\");\r\n\r\n    // Seperate the text files names.\r\n    let textFiles = confs[0].split(\",\");\r\n\r\n    // Seperates the configuration file names.\r\n    let confFiles = confs[1].split(\",\");\r\n\r\n    // Seperate the spacial chars the marker will egnore.\r\n    let spacialChars = confs[2].split(\" \");\r\n    spacialChars.push(\" \");\r\n    spacialChars.push(\"\\n\");\r\n    spacialChars.push(\"\\r\");\r\n\r\n    this.state.filesList = textFiles;\r\n    this.state.confFileList = confFiles;\r\n    this.setState({ specialCharsList: spacialChars });\r\n    this.UpdateChosenFile();\r\n  };\r\n\r\n  //lunches when the user clicks on the upload bottun -\r\n  //saves the chosen file name and reads the dat of the file\r\n  handleClickOnUpload = (event) => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      // var preview = document.getElementById(\"temporaryPlace\");\r\n      var file = document.querySelector(\"input[id=text_file]\").files[0];\r\n      var reader = new FileReader();\r\n      var textFile = /text.*/;\r\n\r\n      var namefile = event.target.value;\r\n      namefile = namefile.split(\"\\\\\");\r\n      this.state.fileToUploadName = namefile[namefile.length - 1];\r\n\r\n      if (file.type.match(textFile)) {\r\n        reader.onload = this.uploadFileToServer;\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n  };\r\n\r\n  // previously called loadDataAndConfFiles\r\n  //saves the chosen fils name - calls to function that reads the file and transfer the appliction to\r\n  //he edit screen\r\n  handleClickLoadFiles = (eventArgs) => {\r\n    var textFile = document.getElementById(\"fileChoser\");\r\n    textFile = textFile.value;\r\n    this.getFileFromServer(textFile);\r\n    var confFile = document.getElementById(\"conffileChoser\");\r\n    confFile = confFile.value;\r\n    this.getFileFromServer(confFile);\r\n    this.state.isUpTodate = true;\r\n    this.setState({ pageLayout: \"edit\" });\r\n  };\r\n\r\n  //asks the server to generate statistic file to the file that the function describes\r\n  makeStatisticsFile = () => {\r\n    let address = \"http://localhost:9000/makeReport\";\r\n\r\n    fetch(address, {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        data: this.state.fileContent,\r\n        filename: this.state.filename,\r\n        confData: this.state.configurationFileContent,\r\n        confFileName: this.state.conffilename,\r\n      }),\r\n    }).then(function (response) {\r\n    });\r\n  };\r\n\r\n  //the function sends a request to the server to save the changes the user did in the text\r\n  handleSaveFile = (event) => {\r\n    this.makeStatisticsFile();\r\n    this.makeHtml();\r\n    this.saveFileToServer(this.state.filename, this.state.fileContent);\r\n    this.state.isUpTodate = true;\r\n  };\r\n\r\n  saveFileToServer = (fileTosaveName, fileTosaveData) =>{\r\n    let address = \"http://localhost:9000/saveFile\";\r\n\r\n    fetch(address, {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        data: fileTosaveData,\r\n        filename: fileTosaveName,\r\n      }),\r\n    }).then(function (response) {\r\n      let answer = response.body.getReader();\r\n      console.log();\r\n    });\r\n  }\r\n\r\n  //returns to the main menu screen of the application\r\n  // retrunToChooseFile\r\n  handleClickRetrunToMainMenu = (event) => {\r\n    if (!this.state.isUpTodate) {\r\n      this.raiseWarning(event);\r\n    } else {\r\n      this.setState({ pageLayout: \"choose\" });\r\n    }\r\n\r\n    // Set isUpTodate to  true, to allow the user\r\n    // to return to the main menu without saveing his work.\r\n    // (At the first attempt of a user to return to the main menu,\r\n    // a warning message appears, and at the secound attempt, \r\n    // the application returns to the main menu).\r\n    this.state.isUpTodate = true;\r\n  };\r\n\r\n  //describes a post request to server in order to download the chosen file type\r\n  handleClickOnDownload = (eventArgs) => {\r\n    var action = document.getElementById(\"actionChooser\");\r\n    action = action.value;\r\n    var filename = document.getElementById(\"fileToDownloadChooser\");\r\n    filename = filename.value;\r\n    var conffilename = document.getElementById(\"conffileToDownloadChooser\");\r\n    conffilename = conffilename.value;\r\n\r\n    let downloadedFileName = action + \"_\" + filename;\r\n    if (action == \"html\") {\r\n      downloadedFileName = filename + \".html\";\r\n    }\r\n\r\n    let address = \"http://localhost:9000/downloadfile\";\r\n    fetch(address, {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        action: action,\r\n        filename: filename,\r\n        confFileName: conffilename,\r\n      }),\r\n    }).then((response) => {\r\n      response.blob().then((blob) => {\r\n        let url = window.URL.createObjectURL(blob);\r\n        let a = document.createElement(\"a\");\r\n        a.href = url;\r\n        a.download = downloadedFileName;\r\n        a.click();\r\n      });\r\n    });\r\n  };\r\n\r\n  //recieved the file name with the file content and saves on local variables\r\n  // previously called acceptFilesFromServer\r\n  setCurrentTextFile = (text) => {\r\n    let filename = text.split(\"\\n\");\r\n    let fileData = text.slice(filename[0].length + 1, text.lenth);\r\n    //first chunk of text is the name\r\n    this.setState({ filename: filename[0] });\r\n    //the rest of the text\r\n    this.setState({ fileContent: fileData });\r\n  };\r\n\r\n  //recives configurtion file name and this file content and saves to local variables\r\n  // previously called acceptConfigurationFilesFromServer\r\n  setCurrentConfigurationFile = (text) => {\r\n    let filename = text.split(\"\\n\");\r\n    let conFileContent = filename.slice(1, filename.length);\r\n    let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\r\n\r\n    // Helps to create the context menu.\r\n    let tagslist = [];\r\n\r\n    for (let i = 0; i < conFileContent.length; i++) {\r\n      let currentPair = conFileContent[i].split(\":\");\r\n      tagslist.push(currentPair[0]);\r\n      let pairKey = currentPair[0];\r\n      let pairValue = currentPair[1];\r\n      newTags[pairKey] = pairValue;\r\n    }\r\n\r\n    this.state.conffilename = filename[0];\r\n    this.state.configurationFileContent = conFileContent;\r\n    this.state.tagsList = tagslist;\r\n    // Initiate setState so the view will update.\r\n    this.setState({ tagsAndColors: newTags });\r\n  };\r\n\r\n  //uploads new file to server and uses fetch request\r\n  // previously called loadFile\r\n  uploadFileToServer = (event) => {\r\n    let fileToUploadContent = event.target.result;\r\n    this.saveFileToServer(this.state.fileToUploadName, fileToUploadContent);\r\n    \r\n    // Get the updated list of files on the server.\r\n    this.getConficurationFromServer();\r\n    this.UpdateChosenFile();\r\n  };\r\n\r\n  //describes the html form of the highlighted file\r\n  makeHtml = () => {\r\n    var textFile = document.getElementById(\"text\");\r\n    textFile = textFile.innerHTML;\r\n    var htmlFile = \"\";\r\n    htmlFile += \"<!DOCTYPE html>\";\r\n    htmlFile += \"<html>\";\r\n    htmlFile += \"<head>\";\r\n    htmlFile += \"<title>\";\r\n    htmlFile += this.state.filename;\r\n    htmlFile += \"</title>\";\r\n    htmlFile += \"</head>\";\r\n    htmlFile += \"<body>\";\r\n    htmlFile += \"<h3>\";\r\n    htmlFile += textFile;\r\n    htmlFile += \"</h3>\";\r\n    htmlFile += \"</body>\";\r\n    htmlFile += \"</html>\";\r\n\r\n    let address = \"http://localhost:9000/saveFile\";\r\n    fetch(address, {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        data: htmlFile,\r\n        filename: this.state.filename + \".html\",\r\n      }),\r\n    }).then(function (response) {\r\n      let answer = response.body.getReader();\r\n    });\r\n  };\r\n\r\n  // this functions being used after uploading new file to the server\r\n  // checks if the uploading sucseeded and the updates the name of the chosen file to be the file that was uploaded \r\n  UpdateChosenFile = () => {\r\n    // If the list of files sent from the server had the file was added to the server.\r\n    const exists = this.state.filesList.some(\r\n      (v) => v == this.state.fileToUploadName\r\n    );\r\n    if (exists) {\r\n      var textFile = document.getElementById(\"fileChoser\");\r\n      textFile.value = this.state.fileToUploadName;\r\n    }\r\n  };\r\n\r\n  // sends request to the server and asks for an article or configuration file\r\n  //previously called handleChoosefile.\r\n  getFileFromServer = (fileName) => {\r\n    //var fileName = filename; //eventArgs.currentTarget.innerHTML.trim();\r\n    if (!fileName.endsWith(\".txt\")) {\r\n      var request = \"http://localhost:9000/openConfigurationFile/\" + fileName;\r\n      fetch(request)\r\n        .then((res) => res.text())\r\n        .then((res) => this.setCurrentConfigurationFile(res));\r\n    } else {\r\n      var request = \"http://localhost:9000/openFile/\" + fileName;\r\n      fetch(request)\r\n        .then((res) => res.text())\r\n        .then((res) => this.setCurrentTextFile(res));\r\n    }\r\n  };\r\n\r\n  // push notification to user when clicking on the \"return to main menu\" button\r\n  // without saving changes\r\n  raiseWarning(e) {\r\n    e.preventDefault();\r\n    Alert.info(\r\n      \"Make sure to save your changes before returning to the Main Menu\",\r\n      {\r\n        position: \"top\",\r\n        timeout: \"none\",\r\n        onClose: function () {\r\n          console.log(\"onClose Fired!\");\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  // Render the frame of the site and get the cueent page from the method this.returnPageLayout()\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div align=\"center\" style={divStyle}>\r\n          <img\r\n            align=\"right\"\r\n            src={biulogo}\r\n            alt=\"biulogo\"\r\n            style={{ width: \"auto\", height: \"0.75cm\" }}\r\n          />\r\n          <img align=\"left\" src={logo} alt=\"logo\" />\r\n          <br></br>\r\n          <br></br>\r\n          <h2>\r\n            {\" \"}\r\n            <b>Jerusalem Knowledge Center</b>{\" \"}\r\n          </h2>\r\n          <h1>\r\n            <b>Tag Editor</b>\r\n          </h1>\r\n          {this.returnPageLayout()}\r\n          <div>\r\n            <span>{this.props.children}</span>\r\n            <Alert stack={{ limit: 3 }} />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  // Returns the current page the web sites has to present.\r\n  returnPageLayout = () => {\r\n    if (this.state.pageLayout == \"choose\") {\r\n      return this.returnMainMenuLayout();\r\n    } else if (this.state.pageLayout == \"edit\") {\r\n      return this.returnEditPageLayout();\r\n    }\r\n  };\r\n\r\n  // Returns the page\r\n  returnMainMenuLayout = () => {\r\n    let page = (\r\n      <div>\r\n        <br></br>\r\n        <table>\r\n          <tr>\r\n            <td align=\"center\">\r\n              {\" \"}\r\n              <b>1. Select an existing document</b>{\" \"}\r\n            </td>\r\n            <td>\r\n              <select name=\"fileChoser\" id=\"fileChoser\">\r\n                {\" \"}\r\n                {this.createList(this.state.filesList)}\r\n              </select>{\" \"}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td align=\"center\">\r\n              <b> -or- </b>{\" \"}\r\n            </td>\r\n            <td> </td>\r\n          </tr>\r\n          <tr>\r\n            <td align=\"center\">\r\n              <b>\r\n                Upload New File to Server <br></br>{\" \"}\r\n              </b>\r\n            </td>\r\n            <td>\r\n              {\" \"}\r\n              <input\r\n                type=\"file\"\r\n                id=\"text_file\"\r\n                onChange={this.handleClickOnUpload}\r\n              ></input>\r\n            </td>\r\n          </tr>\r\n          <br></br>\r\n          <tr>\r\n            <td>\r\n              <b> 2. Choose a configuration file: </b>\r\n            </td>\r\n            <td>\r\n              <select name=\"conffileChoser\" id=\"conffileChoser\">\r\n                {this.createList(this.state.confFileList)}{\" \"}\r\n              </select>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td> </td>\r\n            <td align=\"left\">\r\n              <br></br>\r\n              <button style={buttonStyle} onClick={this.handleClickLoadFiles}>\r\n                {\" \"}\r\n                Load files\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n        <br></br>\r\n        <p>\r\n          <b>Download file</b>\r\n          <br></br>\r\n          <select name=\"actionChooser\" id=\"actionChooser\">\r\n            {\" \"}\r\n            {this.createList(this.state.fileTypes)}\r\n          </select>{\" \"}\r\n          <select name=\"fileToDownloadChooser\" id=\"fileToDownloadChooser\">\r\n            {\" \"}\r\n            {this.createList(this.state.filesList)}\r\n          </select>{\" \"}\r\n          <select\r\n            name=\"conffileToDownloadChooser\"\r\n            id=\"conffileToDownloadChooser\"\r\n          >\r\n            {this.createList(this.state.confFileList)}{\" \"}\r\n          </select>\r\n          {\"  \"}\r\n          <button style={buttonStyle} onClick={this.handleClickOnDownload}>\r\n            {\" \"}\r\n            Download file{\" \"}\r\n          </button>\r\n        </p>\r\n        <table>\r\n          <td align=\"left\">\r\n            {\" \"}\r\n            <h6>\r\n              {\" \"}\r\n              <b>© Sapir Kikoz, Yifat Yankovich - </b>\r\n            </h6>{\" \"}\r\n          </td>\r\n          <td align=\"right\">\r\n            {\" \"}\r\n            <h6> September 2020 </h6>\r\n          </td>\r\n        </table>\r\n      </div>\r\n    );\r\n    return page;\r\n  };\r\n\r\n  // rendering the second screen of the application\r\n  returnEditPageLayout = () => {\r\n    let page = (\r\n      <div>\r\n        <h6>\r\n          {\" \"}\r\n          <b>\r\n            Choosen Article: {this.state.filename}\r\n            <br></br>\r\n            Choosen Configuration File: {this.state.conffilename}\r\n          </b>\r\n        </h6>\r\n\r\n        <br></br>\r\n        <h6>\r\n          {\" \"}\r\n          <b>Add or edit tags by selecting and right clicking the text.</b>{\" \"}\r\n        </h6>\r\n        <TaggedTextArea\r\n          tagsAndColors={this.state.tagsAndColors}\r\n          tagsList={this.state.tagsList}\r\n          specialCharsList={this.state.specialCharsList}\r\n          fileContent={this.state.fileContent}\r\n          updateFileContent={this.updateFileContent}\r\n        />\r\n        <p>\r\n          <button style={buttonStyle} onClick={this.handleSaveFile}>\r\n            {\" \"}\r\n            Save Work on System\r\n          </button>\r\n          {\"     \"}\r\n          <button\r\n            style={buttonStyle}\r\n            onClick={this.handleClickRetrunToMainMenu}\r\n          >\r\n            {\" \"}\r\n            Return to Main Menu\r\n          </button>\r\n          <div>\r\n            <a\r\n              href=\"#\"\r\n              onClick={this.raiseWarning}\r\n              onClose={this.handleOnClose}\r\n            ></a>\r\n          </div>\r\n        </p>\r\n      </div>\r\n    );\r\n    return page;\r\n  };\r\n\r\n  // after editing - adding/removing tag to the text - the content is the updated text\r\n  // and insert it to the local variable of the applications\r\n  updateFileContent = (content) => {\r\n    this.state.isUpTodate = false;\r\n    this.setState({ fileContent: content });\r\n  };\r\n\r\n  // Gets a list of string and make a drop down option list of them.\r\n  // Creates only the list of the drop down list <option>\r\n  // and not the <select> drop down list itself.\r\n  createList = (list) => {\r\n    return list.map((part, i) => <option value={part}> {part}</option>);\r\n  };\r\n}\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}