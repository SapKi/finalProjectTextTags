{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\main.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileContent: \"\",\n      fileContentClean: \"\",\n      tagbox: \"Enter text to mark\",\n      tags: {\n        person: \"yellow\",\n        place: \"red\",\n        bla: \"lightpink\"\n      },\n      formattedparts: \"\"\n    };\n\n    this.hadleClickOnUpload = () => {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        var preview = document.getElementById(\"temporaryPlace\");\n        var file = document.querySelector(\"input[type=file]\").files[0];\n        var reader = new FileReader();\n        var textHolder = \"File Content hasnot set\";\n        var textFile = /text.*/;\n\n        if (file.type.match(textFile)) {\n          reader.onload = this.loadFile;\n        } else {\n          preview.innerHTML = \"<span class='error'>It doesn't seem to be a text file!</span>\";\n        }\n\n        reader.readAsText(file);\n      } else {\n        alert(\"Your browser is too old to support HTML5 File API\");\n      }\n    };\n\n    this.addTag = () => {\n      console.log(window.getSelection().toString());\n      let leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().anchorOffset; //each char is in the state\n\n      let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement.id; //calculate the offset from the beggining of the text\n\n      let indexOfCleanText = 0;\n\n      for (let i = 0; i < spanOfHighlightedChunk; i++) {\n        //checking chunk if its not start with % we summing the length\n        if (this.state.formattedtext[i][0] != \"%\") {\n          indexOfCleanText += this.state.formattedtext[i].length;\n        } else {\n          let currentChunk = this.state.formattedtext[i].split(\"%\");\n          let tagLength = currentChunk[1].length;\n          let textlength = currentChunk[2].length;\n          indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\n        }\n      }\n\n      indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\n      let cleanText = this.state.fileContentClean;\n      let preTag = cleanText.substring(0, indexOfCleanText);\n      let inTag = cleanText.substring(indexOfCleanText, indexOfCleanText + window.getSelection().toString().length);\n      let postTag = cleanText.substring(indexOfCleanText + window.getSelection().toString().length, cleanText.length);\n      let text = preTag + \"<bla>\" + inTag + \"</bla>\" + postTag;\n      this.state.fileContentClean = text;\n      this.setState({\n        fileContentClean: text\n      });\n      this.setTags();\n    };\n\n    this.setTags = () => {\n      let text = this.state.fileContentClean;\n      let higlight = \"<[^<]+>\";\n      let regexHiglight = RegExp(higlight);\n      let closertag = \"</[^<]+>\";\n      let regexclosetag = RegExp(closertag);\n      let par;\n      let spanIndex = 0; //Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let formattedparts = [];\n\n      for (let index = 0; index < parts.length; index++) {\n        //cheking that the current part is not a tag\n        if (!(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))) {\n          if (parts[index] != \"\") formattedparts.push(parts[index]);\n        } // handeling an open tag\n        else {\n            let currenttag = parts[index]; //building the inner tag - cuts inner text\n\n            currenttag = currenttag.substring(1, currenttag.length - 1);\n            let rightclosertag = \"</\" + currenttag + \">\";\n            let regExpRightcloser = RegExp(rightclosertag); //we want to keep running on string until we'll meet the right closer tag\n\n            let newindex = index + 1;\n\n            while (!regExpRightcloser.test(parts[newindex]) && newindex < parts.length) {\n              newindex++;\n            } //if the closing tag matches the opening tag found\n\n\n            if (newindex < parts.length) {\n              //builds the new string for injection\n              let newstring = \"%\" + currenttag + \"%\";\n\n              for (let innerindex = index + 1; innerindex < newindex; innerindex++) {\n                newstring = newstring + parts[innerindex];\n              }\n\n              formattedparts.push(newstring);\n              index = newindex;\n            } else {\n              //if theres no closing tag to a tag so we copy the opening tag as it is\n              formattedparts.push(parts[index]);\n            }\n          }\n      }\n\n      this.setState({\n        formattedtext: formattedparts\n      });\n      console.log(\"correct\");\n      let tagRegex = RegExp(\"%.+%.+\"); //let divopentag = RegExp(\"^<div\");\n      //let divclosingtag = RegExp(\"^</div>\");\n\n      let taggedText = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \" \", formattedparts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        id: i,\n        style: tagRegex.test(part) ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\n        //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: this.state.tags[part.split(\"%\")[1]]\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, part.split(\"%\").reverse()[0])));\n      this.setState({\n        fileContent: taggedText\n      });\n    };\n\n    this.loadFile = event => {\n      this.setState({\n        fileContent: event.target.result\n      });\n      this.setState({\n        fileContentClean: event.target.result\n      });\n      this.setTags();\n    };\n\n    this.highlightText = () => {\n      let textHolder = this.fileContentClean;\n      this.setState({\n        fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        tagbox: event.target.value\n      });\n    };\n\n    this.getHighlightedText = (data, mark) => {\n      //console.log(this);\n      let text = data;\n      let higlight = mark; //this.state.tagbox;\n      // Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let taggedText = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \" \", parts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        style: part.toLowerCase() === higlight.toLowerCase() ? {\n          fontWeight: \"bold\",\n          backgroundColor: \"yellow\"\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, part)), \" \");\n      return taggedText;\n    };\n  }\n\n  render() {\n    //<input type=\"file\" onChange={this.hadleClickOnUpload} />\n    //<div> the file chosen </div>\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"Text editor\"), React.createElement(\"input\", {\n      type: \"file\",\n      id: \"bla\",\n      onChange: this.hadleClickOnUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"file\",\n      id: \"bli\",\n      onChange: this.hadleClickOnUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, this.state.fileContent), React.createElement(\"input\", {\n      id: \"tags\",\n      type: \"text\",\n      height: \"200\",\n      width: \"200\",\n      value: this.state.tagbox,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.highlightText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \" Highlight\"), React.createElement(\"button\", {\n      onClick: this.addTag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, \" Add tags\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      dialogtype: \"save\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }));\n  }\n\n} //<button onClick={this.refresh}> Refresh</button>\n//\n//<input\n//id=\"fileContent\"\n//height=\"1000\"\n//width=\"200\"\n//value={this.state.value}\n//onChange={this.handleChange}\n///>\n//<button onClick={this.hadleClickOnUpload}> Upload file</button>\n//       <button> Save file</button>\n//       <br></br>\n//<input\n//          id=\"tagsPlace\"\n//          height=\"200\"\n//          width=\"200\"\n//          type=\"text\"\n//          value={this.state.fileContent}\n//value={this.state.value}\n//onChange={this.handleChange}\n//        />\n\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/main.jsx"],"names":["React","Component","ReactDOM","throwStatement","Main","state","fileContent","fileContentClean","tagbox","tags","person","place","bla","formattedparts","hadleClickOnUpload","window","File","FileReader","FileList","Blob","preview","document","getElementById","file","querySelector","files","reader","textHolder","textFile","type","match","onload","loadFile","innerHTML","readAsText","alert","addTag","console","log","getSelection","toString","leftIndexOfHighlightedChunkAtHisSpan","anchorOffset","spanOfHighlightedChunk","anchorNode","parentElement","id","indexOfCleanText","i","formattedtext","length","currentChunk","split","tagLength","textlength","cleanText","preTag","substring","inTag","postTag","text","setState","setTags","higlight","regexHiglight","RegExp","closertag","regexclosetag","par","spanIndex","parts","index","test","push","currenttag","rightclosertag","regExpRightcloser","newindex","newstring","innerindex","tagRegex","taggedText","map","part","fontWeight","backgroundColor","reverse","event","target","result","highlightText","getHighlightedText","handleChange","value","data","mark","toLowerCase","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { throwStatement } from \"@babel/types\";\r\nclass Main extends Component {\r\n  state = {\r\n    fileContent: \"\",\r\n    fileContentClean: \"\",\r\n    tagbox: \"Enter text to mark\",\r\n    tags: { person: \"yellow\", place: \"red\", bla: \"lightpink\" },\r\n    formattedparts: \"\"\r\n  };\r\n\r\n  hadleClickOnUpload = () => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      var preview = document.getElementById(\"temporaryPlace\");\r\n      var file = document.querySelector(\"input[type=file]\").files[0];\r\n      var reader = new FileReader();\r\n      var textHolder = \"File Content hasnot set\";\r\n\r\n      var textFile = /text.*/;\r\n      if (file.type.match(textFile)) {\r\n        reader.onload = this.loadFile;\r\n      } else {\r\n        preview.innerHTML =\r\n          \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n  };\r\n  //if (file.type.match(textFile)) {\r\n  //  reader.onload = function(event) {\r\n  //    preview.innerHTML = event.target.result;\r\n  //    //this.setState({ fileContent: event.target.result });\r\n  //  };\r\n  //}\r\n\r\n  addTag = () => {\r\n    console.log(window.getSelection().toString());\r\n    let leftIndexOfHighlightedChunkAtHisSpan = window.getSelection()\r\n      .anchorOffset;\r\n    //each char is in the state\r\n    let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\r\n      .id;\r\n    //calculate the offset from the beggining of the text\r\n\r\n    let indexOfCleanText = 0;\r\n    for (let i = 0; i < spanOfHighlightedChunk; i++) {\r\n      //checking chunk if its not start with % we summing the length\r\n      if (this.state.formattedtext[i][0] != \"%\") {\r\n        indexOfCleanText += this.state.formattedtext[i].length;\r\n      } else {\r\n        let currentChunk = this.state.formattedtext[i].split(\"%\");\r\n        let tagLength = currentChunk[1].length;\r\n        let textlength = currentChunk[2].length;\r\n        indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\r\n      }\r\n    }\r\n    indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\r\n    let cleanText = this.state.fileContentClean;\r\n    let preTag = cleanText.substring(0, indexOfCleanText);\r\n    let inTag = cleanText.substring(\r\n      indexOfCleanText,\r\n      indexOfCleanText + window.getSelection().toString().length\r\n    );\r\n    let postTag = cleanText.substring(\r\n      indexOfCleanText + window.getSelection().toString().length,\r\n      cleanText.length\r\n    );\r\n    let text = preTag + \"<bla>\" + inTag + \"</bla>\" + postTag;\r\n    this.state.fileContentClean = text;\r\n    this.setState({ fileContentClean: text });\r\n    this.setTags();\r\n  };\r\n\r\n  setTags = () => {\r\n    let text = this.state.fileContentClean;\r\n    let higlight = \"<[^<]+>\";\r\n    let regexHiglight = RegExp(higlight);\r\n    let closertag = \"</[^<]+>\";\r\n    let regexclosetag = RegExp(closertag);\r\n    let par;\r\n    let spanIndex = 0;\r\n\r\n    //Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let formattedparts = [];\r\n\r\n    for (let index = 0; index < parts.length; index++) {\r\n      //cheking that the current part is not a tag\r\n      if (\r\n        !(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))\r\n      ) {\r\n        if (parts[index] != \"\") formattedparts.push(parts[index]);\r\n      }\r\n      // handeling an open tag\r\n      else {\r\n        let currenttag = parts[index];\r\n        //building the inner tag - cuts inner text\r\n        currenttag = currenttag.substring(1, currenttag.length - 1);\r\n        let rightclosertag = \"</\" + currenttag + \">\";\r\n        let regExpRightcloser = RegExp(rightclosertag);\r\n        //we want to keep running on string until we'll meet the right closer tag\r\n        let newindex = index + 1;\r\n        while (\r\n          !regExpRightcloser.test(parts[newindex]) &&\r\n          newindex < parts.length\r\n        ) {\r\n          newindex++;\r\n        }\r\n        //if the closing tag matches the opening tag found\r\n        if (newindex < parts.length) {\r\n          //builds the new string for injection\r\n          let newstring = \"%\" + currenttag + \"%\";\r\n\r\n          for (\r\n            let innerindex = index + 1;\r\n            innerindex < newindex;\r\n            innerindex++\r\n          ) {\r\n            newstring = newstring + parts[innerindex];\r\n          }\r\n\r\n          formattedparts.push(newstring);\r\n          index = newindex;\r\n        } else {\r\n          //if theres no closing tag to a tag so we copy the opening tag as it is\r\n          formattedparts.push(parts[index]);\r\n        }\r\n      }\r\n    }\r\n    this.setState({ formattedtext: formattedparts });\r\n    console.log(\"correct\");\r\n\r\n    let tagRegex = RegExp(\"%.+%.+\");\r\n    //let divopentag = RegExp(\"^<div\");\r\n    //let divclosingtag = RegExp(\"^</div>\");\r\n\r\n    let taggedText = (\r\n      <div>\r\n        {\" \"}\r\n        {formattedparts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            id={i}\r\n            style={\r\n              tagRegex.test(part)\r\n                ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\r\n                  //part.toLowerCase() === higlight.toLowerCase()\r\n                  {\r\n                    fontWeight: \"bold\",\r\n                    backgroundColor: this.state.tags[part.split(\"%\")[1]]\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {part.split(\"%\").reverse()[0]}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n    this.setState({ fileContent: taggedText });\r\n  };\r\n\r\n  loadFile = event => {\r\n    this.setState({ fileContent: event.target.result });\r\n    this.setState({ fileContentClean: event.target.result });\r\n    this.setTags();\r\n  };\r\n\r\n  highlightText = () => {\r\n    let textHolder = this.fileContentClean;\r\n    this.setState({\r\n      fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\r\n    });\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ tagbox: event.target.value });\r\n  };\r\n\r\n  getHighlightedText = (data, mark) => {\r\n    //console.log(this);\r\n    let text = data;\r\n    let higlight = mark; //this.state.tagbox;\r\n    // Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let taggedText = (\r\n      <div>\r\n        {\" \"}\r\n        {parts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            style={\r\n              part.toLowerCase() === higlight.toLowerCase()\r\n                ? { fontWeight: \"bold\", backgroundColor: \"yellow\" }\r\n                : {}\r\n            }\r\n          >\r\n            {part}\r\n          </span>\r\n        ))}{\" \"}\r\n      </div>\r\n    );\r\n    return taggedText;\r\n  };\r\n\r\n  render() {\r\n    //<input type=\"file\" onChange={this.hadleClickOnUpload} />\r\n    //<div> the file chosen </div>\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Text editor</h1>\r\n        <input type=\"file\" id=\"bla\" onChange={this.hadleClickOnUpload}></input>\r\n        <input type=\"file\" id=\"bli\" onChange={this.hadleClickOnUpload}></input>\r\n        <br></br>\r\n        <div id=\"text\">{this.state.fileContent}</div>\r\n        <input\r\n          id=\"tags\"\r\n          type=\"text\"\r\n          height=\"200\"\r\n          width=\"200\"\r\n          value={this.state.tagbox}\r\n          onChange={this.handleChange}\r\n        />\r\n        <br></br>\r\n        <button onClick={this.highlightText}> Highlight</button>\r\n        <button onClick={this.addTag}> Add tags</button>\r\n        <br></br>\r\n        <input dialogtype=\"save\" />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n//<button onClick={this.refresh}> Refresh</button>\r\n//\r\n//<input\r\n//id=\"fileContent\"\r\n//height=\"1000\"\r\n//width=\"200\"\r\n//value={this.state.value}\r\n//onChange={this.handleChange}\r\n///>\r\n\r\n//<button onClick={this.hadleClickOnUpload}> Upload file</button>\r\n//       <button> Save file</button>\r\n//       <br></br>\r\n//<input\r\n//          id=\"tagsPlace\"\r\n//          height=\"200\"\r\n//          width=\"200\"\r\n//          type=\"text\"\r\n//          value={this.state.fileContent}\r\n//value={this.state.value}\r\n//onChange={this.handleChange}\r\n//        />\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}