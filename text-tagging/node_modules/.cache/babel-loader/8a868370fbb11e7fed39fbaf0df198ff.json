{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\taggedTextArea.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\n\nclass taggedTextArea extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileContent: this.props.fileContent,\n      fileContentClean: this.props.fileContent,\n      tagsList: this.props.tags,\n      specialCharsList: this.props.specialCharsList,\n      // Context menu\n      contextMenu: \"\",\n      // Used to keep the text the user marked\n      preHighlightedText: \"\",\n      highlightedText: \"\",\n      postHighlightedText: \"\",\n      formattedparts: \"\",\n      isHighlightedTextTagged: false,\n      isUpTodate: true\n    };\n\n    this.isSpecialChar = character => {\n      if (character == \"\\n\") {\n        let i = 0;\n      }\n\n      for (let i = 0; i < this.state.specialCharsList.length; i++) {\n        if (this.state.specialCharsList[i] == character) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.setTags = () => {\n      let text = this.state.fileContentClean;\n      let higlight = \"<[^<]+>\";\n      let regexHiglight = RegExp(higlight);\n      let closertag = \"</[^<]+>\";\n      let regexclosetag = RegExp(closertag);\n      let par;\n      let spanIndex = 0; //Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let formattedparts = [];\n\n      for (let index = 0; index < parts.length; index++) {\n        //cheking that the current part is not a tag\n        if (!(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))) {\n          if (parts[index] != \"\") formattedparts.push(parts[index]);\n        } // handeling an open tag\n        else {\n            let currenttag = parts[index]; //building the inner tag - cuts inner text\n\n            currenttag = currenttag.substring(1, currenttag.length - 1);\n            let rightclosertag = \"</\" + currenttag + \">\";\n            let regExpRightcloser = RegExp(rightclosertag); //we want to keep running on string until we'll meet the right closer tag\n\n            let newindex = index + 1;\n\n            while (!regExpRightcloser.test(parts[newindex]) && newindex < parts.length) {\n              newindex++;\n            } //if the closing tag matches the opening tag found\n\n\n            if (newindex < parts.length) {\n              //builds the new string for injection\n              let newstring = \"%\" + currenttag + \"%\";\n\n              for (let innerindex = index + 1; innerindex < newindex; innerindex++) {\n                newstring = newstring + parts[innerindex];\n              }\n\n              formattedparts.push(newstring);\n              index = newindex;\n            } else {\n              //if theres no closing tag to a tag so we copy the opening tag as it is\n              formattedparts.push(parts[index]);\n            }\n          }\n      } //console.log(\"correct\");\n\n\n      let tagRegex = RegExp(\"%.+%.+\");\n      let taggedText = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \" \", formattedparts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        id: i,\n        style: tagRegex.test(part) ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\n        //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: this.state.tags[part.split(\"%\")[1]]\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, part.split(\"%\").reverse()[0])));\n      this.setState({\n        formattedtext: formattedparts\n      });\n      this.setState({\n        fileContent: taggedText\n      });\n    };\n\n    this.addTag = (event, data) => {\n      this.state.isUpTodate = false;\n      let tagName = window.getSelection().anchorNode.parentElement.id;\n      let text;\n\n      if (tagName != \"no_tag\") {\n        text = this.state.preHighlightedText + \"<\" + tagName + \">\" + this.state.highlightedText + \"</\" + tagName + \">\" + this.state.postHighlightedText;\n      } else {\n        text = this.state.preHighlightedText + this.state.highlightedText + this.state.postHighlightedText;\n      }\n\n      this.state.fileContentClean = text;\n      this.setTags();\n      this.setState({\n        fileContentClean: text\n      });\n    };\n\n    this.captureHighlightedText = (event, data) => {\n      if (window.getSelection() == NaN) {\n        return;\n      } // The text is seperated to parts.\n      // Get the index of the highlited text in his part.\n\n\n      let leftIndexOfHighlightedChunkAtHisSpan;\n      let rightIndexOfHighlightedChunkAtHisSpan;\n\n      if (window.getSelection().baseOffset <= window.getSelection().extentOffset) {\n        leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n        rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n      } else if (window.getSelection().baseOffset > window.getSelection().extentOffset) {\n        leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n        rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n      } // Get the part number the highlited text is in.\n\n\n      let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement.id; //calculate the offset from the beggining of the text\n\n      let indexOfCleanText = 0;\n\n      for (let i = 0; i < spanOfHighlightedChunk; i++) {\n        //checking chunk if its not start with % we summing the length\n        if (this.state.formattedtext[i][0] != \"%\") {\n          indexOfCleanText += this.state.formattedtext[i].length;\n        } else {\n          let currentChunk = this.state.formattedtext[i].split(\"%\");\n          let tagLength = currentChunk[1].length;\n          let textlength = currentChunk[2].length;\n          indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\n        }\n      } // indexOfCleanTextc contains the location of the first caracter chosen in the text as\n      // it in raw text.\n      // Sreaching for the begining of the highlighted word.\n\n\n      let cleanText = this.state.fileContentClean;\n      let begining; // If the first chracter is in a begining of a chunk.\n\n      if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\n        begining = indexOfCleanText;\n      } else {\n        let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\n\n        for (; indexToFindTheHighligtedWordStart >= 0; indexToFindTheHighligtedWordStart--) {\n          // we reached the befining of the current paragraph.\n          if (indexToFindTheHighligtedWordStart == 0) {\n            begining = indexOfCleanText; // If we reached a space character.\n          } else {\n            let previousChar = cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1]; //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\n\n            if (this.isSpecialChar(previousChar)) {\n              //  previousChar == \" \" ||\n              //  previousChar == \"\\n\" ||\n              //  previousChar == \"\\t\"\n              begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\n              break;\n            }\n          }\n        }\n      }\n\n      let textInChunk = window.getSelection().baseNode.data;\n      let end; //in case of automatic space added by clicking\n\n      if (rightIndexOfHighlightedChunkAtHisSpan != leftIndexOfHighlightedChunkAtHisSpan && this.isSpecialChar(cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1])) {\n        end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\n      } else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\n        // If the last chracter is in the end of a chunk.\n        end = indexOfCleanText + textInChunk.length;\n      } else {\n        let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\n\n        for (; indexToFindTheHighligtedWordEnd <= textInChunk.length; indexToFindTheHighligtedWordEnd++) {\n          // If we reached the end of the paragraph.\n          if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\n            end = indexOfCleanText + textInChunk.length; // If we reached a white space.\n          } else {\n            let nextChar = cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\n\n            if (this.isSpecialChar(nextChar)) {\n              //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\n              end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\n              break;\n            }\n          }\n        }\n      }\n\n      let preTag;\n      let inTag;\n      let postTag; // If the highlited text is not already tagged.\n\n      if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\n        preTag = cleanText.substring(0, begining);\n        inTag = cleanText.substring(begining, end);\n        postTag = cleanText.substring(end, cleanText.length);\n        this.state.isHighlightedTextTagged = false; //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\n        //preTag = cleanText.substring(0, indexOfCleanText);\n        //inTag = cleanText.substring(\n        //  indexOfCleanText,\n        //  indexOfCleanText + window.getSelection().toString().length\n        //);\n        //postTag = cleanText.substring(\n        //  indexOfCleanText + window.getSelection().toString().length,\n        //  cleanText.length\n        //);\n        //this.state.isHighlightedTextTagged = false;\n      } else {\n        let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\"%\");\n        let tagLength = currentChunk[1].length;\n        preTag = cleanText.substring(0, indexOfCleanText);\n        inTag = cleanText.substring(indexOfCleanText + tagLength + 2, indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length);\n        postTag = cleanText.substring(indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length + tagLength + 3, cleanText.length);\n        this.state.isHighlightedTextTagged = true;\n      }\n\n      this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\n      this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\n      this.state.begining = begining;\n      this.state.end = end;\n      this.setState({\n        preHighlightedText: preTag\n      });\n      this.setState({\n        highlightedText: inTag\n      });\n      this.setState({\n        postHighlightedText: postTag\n      });\n    };\n\n    this.rrender = () => {\n      let page = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        length: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        length: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        length: \"25%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, \" \"), React.createElement(\"td\", {\n        length: \"50%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, \" \", React.createElement(ContextMenuTrigger, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"text\",\n        onClickCapture: this.captureHighlightedText,\n        style: {\n          backgroundColor: \"white\",\n          borderStyle: \"solid\",\n          height: \"8cm\",\n          width: \"30cm\",\n          overflowY: \"scroll\",\n          overflowX: \"hidden\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330\n        },\n        __self: this\n      }, this.state.fileContent), \" \"), React.createElement(ContextMenu, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, this.createMenu())), React.createElement(\"td\", {\n        length: \"25%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349\n        },\n        __self: this\n      }, \" \"))));\n      return page;\n    };\n\n    this.createMenu = () => {\n      let menu;\n\n      if (this.state.isHighlightedTextTagged == false) {\n        menu = this.state.tagsList.map((part, i) => React.createElement(MenuItem, {\n          key: i,\n          id: part,\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 361\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: part,\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 363\n          },\n          __self: this\n        }, \"Set as \", part, \" \")));\n      } else {\n        menu = React.createElement(MenuItem, {\n          id: \"no_tag\",\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 370\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: \"no_tag\",\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 372\n          },\n          __self: this\n        }, \"Remove tag\", \" \"));\n      }\n\n      return menu;\n    };\n\n    this.createList = list => {\n      return list.map((part, i) => React.createElement(\"option\", {\n        value: part,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 385\n        },\n        __self: this\n      }, \" \", part));\n    };\n  }\n\n  render() {\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \" hiiiii \");\n  }\n\n}\n\nexport default taggedTextArea;","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/taggedTextArea.jsx"],"names":["React","Component","ReactDOM","ContextMenu","MenuItem","ContextMenuTrigger","taggedTextArea","state","fileContent","props","fileContentClean","tagsList","tags","specialCharsList","contextMenu","preHighlightedText","highlightedText","postHighlightedText","formattedparts","isHighlightedTextTagged","isUpTodate","isSpecialChar","character","i","length","setTags","text","higlight","regexHiglight","RegExp","closertag","regexclosetag","par","spanIndex","parts","split","index","test","push","currenttag","substring","rightclosertag","regExpRightcloser","newindex","newstring","innerindex","tagRegex","taggedText","map","part","fontWeight","backgroundColor","reverse","setState","formattedtext","addTag","event","data","tagName","window","getSelection","anchorNode","parentElement","id","captureHighlightedText","NaN","leftIndexOfHighlightedChunkAtHisSpan","rightIndexOfHighlightedChunkAtHisSpan","baseOffset","extentOffset","spanOfHighlightedChunk","indexOfCleanText","currentChunk","tagLength","textlength","cleanText","begining","indexToFindTheHighligtedWordStart","previousChar","textInChunk","baseNode","end","indexToFindTheHighligtedWordEnd","nextChar","preTag","inTag","postTag","leftIndex","rightIndex","rrender","page","borderStyle","height","width","overflowY","overflowX","createMenu","menu","createList","list","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\n\r\nclass taggedTextArea extends Component {\r\n  state = {\r\n    fileContent: this.props.fileContent,\r\n    fileContentClean: this.props.fileContent,\r\n    tagsList: this.props.tags,\r\n    specialCharsList: this.props.specialCharsList,\r\n\r\n    // Context menu\r\n    contextMenu: \"\",\r\n\r\n    // Used to keep the text the user marked\r\n    preHighlightedText: \"\",\r\n    highlightedText: \"\",\r\n    postHighlightedText: \"\",\r\n    formattedparts: \"\",\r\n\r\n    isHighlightedTextTagged: false,\r\n    isUpTodate: true,\r\n  };\r\n\r\n  isSpecialChar = (character) => {\r\n    if (character == \"\\n\") {\r\n      let i = 0;\r\n    }\r\n    for (let i = 0; i < this.state.specialCharsList.length; i++) {\r\n      if (this.state.specialCharsList[i] == character) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // This funtiuos reads the clean text (with the tags), and turns it to the\r\n  // form which the text is representd to the user.\r\n  setTags = () => {\r\n    let text = this.state.fileContentClean;\r\n    let higlight = \"<[^<]+>\";\r\n    let regexHiglight = RegExp(higlight);\r\n    let closertag = \"</[^<]+>\";\r\n    let regexclosetag = RegExp(closertag);\r\n    let par;\r\n    let spanIndex = 0;\r\n\r\n    //Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let formattedparts = [];\r\n\r\n    for (let index = 0; index < parts.length; index++) {\r\n      //cheking that the current part is not a tag\r\n      if (\r\n        !(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))\r\n      ) {\r\n        if (parts[index] != \"\") formattedparts.push(parts[index]);\r\n      }\r\n      // handeling an open tag\r\n      else {\r\n        let currenttag = parts[index];\r\n        //building the inner tag - cuts inner text\r\n        currenttag = currenttag.substring(1, currenttag.length - 1);\r\n        let rightclosertag = \"</\" + currenttag + \">\";\r\n        let regExpRightcloser = RegExp(rightclosertag);\r\n        //we want to keep running on string until we'll meet the right closer tag\r\n        let newindex = index + 1;\r\n        while (\r\n          !regExpRightcloser.test(parts[newindex]) &&\r\n          newindex < parts.length\r\n        ) {\r\n          newindex++;\r\n        }\r\n        //if the closing tag matches the opening tag found\r\n        if (newindex < parts.length) {\r\n          //builds the new string for injection\r\n          let newstring = \"%\" + currenttag + \"%\";\r\n\r\n          for (\r\n            let innerindex = index + 1;\r\n            innerindex < newindex;\r\n            innerindex++\r\n          ) {\r\n            newstring = newstring + parts[innerindex];\r\n          }\r\n\r\n          formattedparts.push(newstring);\r\n          index = newindex;\r\n        } else {\r\n          //if theres no closing tag to a tag so we copy the opening tag as it is\r\n          formattedparts.push(parts[index]);\r\n        }\r\n      }\r\n    }\r\n\r\n    //console.log(\"correct\");\r\n\r\n    let tagRegex = RegExp(\"%.+%.+\");\r\n    let taggedText = (\r\n      <div>\r\n        {\" \"}\r\n        {formattedparts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            id={i}\r\n            style={\r\n              tagRegex.test(part)\r\n                ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\r\n                  //part.toLowerCase() === higlight.toLowerCase()\r\n                  {\r\n                    fontWeight: \"bold\",\r\n                    backgroundColor: this.state.tags[part.split(\"%\")[1]],\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {part.split(\"%\").reverse()[0]}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n    this.setState({ formattedtext: formattedparts });\r\n    this.setState({ fileContent: taggedText });\r\n  };\r\n\r\n  // When a user Highlights text segment and choose to tag that segment,\r\n  // this function is called.\r\n  // Tthe funtion update the whole text so the highlight segment will be\r\n  // serroiunded by a tag.\r\n  addTag = (event, data) => {\r\n    this.state.isUpTodate = false;\r\n    let tagName = window.getSelection().anchorNode.parentElement.id;\r\n    let text;\r\n    if (tagName != \"no_tag\") {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        \"<\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.highlightedText +\r\n        \"</\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.postHighlightedText;\r\n    } else {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        this.state.highlightedText +\r\n        this.state.postHighlightedText;\r\n    }\r\n    this.state.fileContentClean = text;\r\n    this.setTags();\r\n    this.setState({ fileContentClean: text });\r\n  };\r\n\r\n  captureHighlightedText = (event, data) => {\r\n    if (window.getSelection() == NaN) {\r\n      return;\r\n    }\r\n\r\n    // The text is seperated to parts.\r\n    // Get the index of the highlited text in his part.\r\n    let leftIndexOfHighlightedChunkAtHisSpan;\r\n    let rightIndexOfHighlightedChunkAtHisSpan;\r\n    if (\r\n      window.getSelection().baseOffset <= window.getSelection().extentOffset\r\n    ) {\r\n      leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n      rightIndexOfHighlightedChunkAtHisSpan = window.getSelection()\r\n        .extentOffset;\r\n    } else if (\r\n      window.getSelection().baseOffset > window.getSelection().extentOffset\r\n    ) {\r\n      leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\r\n      rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n    }\r\n\r\n    // Get the part number the highlited text is in.\r\n    let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\r\n      .id;\r\n\r\n    //calculate the offset from the beggining of the text\r\n    let indexOfCleanText = 0;\r\n    for (let i = 0; i < spanOfHighlightedChunk; i++) {\r\n      //checking chunk if its not start with % we summing the length\r\n      if (this.state.formattedtext[i][0] != \"%\") {\r\n        indexOfCleanText += this.state.formattedtext[i].length;\r\n      } else {\r\n        let currentChunk = this.state.formattedtext[i].split(\"%\");\r\n        let tagLength = currentChunk[1].length;\r\n        let textlength = currentChunk[2].length;\r\n        indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\r\n      }\r\n    }\r\n\r\n    // indexOfCleanTextc contains the location of the first caracter chosen in the text as\r\n    // it in raw text.\r\n\r\n    // Sreaching for the begining of the highlighted word.\r\n    let cleanText = this.state.fileContentClean;\r\n    let begining;\r\n    // If the first chracter is in a begining of a chunk.\r\n    if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\r\n      begining = indexOfCleanText;\r\n    } else {\r\n      let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\r\n      for (\r\n        ;\r\n        indexToFindTheHighligtedWordStart >= 0;\r\n        indexToFindTheHighligtedWordStart--\r\n      ) {\r\n        // we reached the befining of the current paragraph.\r\n        if (indexToFindTheHighligtedWordStart == 0) {\r\n          begining = indexOfCleanText;\r\n          // If we reached a space character.\r\n        } else {\r\n          let previousChar =\r\n            cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1];\r\n          //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\r\n          if (this.isSpecialChar(previousChar)) {\r\n            //  previousChar == \" \" ||\r\n            //  previousChar == \"\\n\" ||\r\n            //  previousChar == \"\\t\"\r\n            begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let textInChunk = window.getSelection().baseNode.data;\r\n    let end;\r\n    //in case of automatic space added by clicking\r\n    if (\r\n      rightIndexOfHighlightedChunkAtHisSpan !=\r\n        leftIndexOfHighlightedChunkAtHisSpan &&\r\n      this.isSpecialChar(\r\n        cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1]\r\n      )\r\n    ) {\r\n      end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\r\n    } else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\r\n      // If the last chracter is in the end of a chunk.\r\n      end = indexOfCleanText + textInChunk.length;\r\n    } else {\r\n      let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\r\n      for (\r\n        ;\r\n        indexToFindTheHighligtedWordEnd <= textInChunk.length;\r\n        indexToFindTheHighligtedWordEnd++\r\n      ) {\r\n        // If we reached the end of the paragraph.\r\n        if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\r\n          end = indexOfCleanText + textInChunk.length;\r\n          // If we reached a white space.\r\n        } else {\r\n          let nextChar =\r\n            cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\r\n          if (this.isSpecialChar(nextChar)) {\r\n            //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\r\n            end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let preTag;\r\n    let inTag;\r\n    let postTag;\r\n\r\n    // If the highlited text is not already tagged.\r\n    if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\r\n      preTag = cleanText.substring(0, begining);\r\n      inTag = cleanText.substring(begining, end);\r\n      postTag = cleanText.substring(end, cleanText.length);\r\n      this.state.isHighlightedTextTagged = false;\r\n      //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\r\n      //preTag = cleanText.substring(0, indexOfCleanText);\r\n      //inTag = cleanText.substring(\r\n      //  indexOfCleanText,\r\n      //  indexOfCleanText + window.getSelection().toString().length\r\n      //);\r\n      //postTag = cleanText.substring(\r\n      //  indexOfCleanText + window.getSelection().toString().length,\r\n      //  cleanText.length\r\n      //);\r\n      //this.state.isHighlightedTextTagged = false;\r\n    } else {\r\n      let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\r\n        \"%\"\r\n      );\r\n      let tagLength = currentChunk[1].length;\r\n      preTag = cleanText.substring(0, indexOfCleanText);\r\n      inTag = cleanText.substring(\r\n        indexOfCleanText + tagLength + 2,\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length\r\n      );\r\n      postTag = cleanText.substring(\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length +\r\n          tagLength +\r\n          3,\r\n        cleanText.length\r\n      );\r\n      this.state.isHighlightedTextTagged = true;\r\n    }\r\n    this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.begining = begining;\r\n    this.state.end = end;\r\n    this.setState({ preHighlightedText: preTag });\r\n    this.setState({ highlightedText: inTag });\r\n    this.setState({ postHighlightedText: postTag });\r\n  };\r\n\r\n  render() {\r\n    return <h1> hiiiii </h1>;\r\n  }\r\n  rrender = () => {\r\n    let page = (\r\n      <div>\r\n        <table length=\"100%\">\r\n          <tr length=\"100%\">\r\n            <td length=\"25%\"> </td>\r\n            <td length=\"50%\">\r\n              {\" \"}\r\n              <ContextMenuTrigger id=\"some_unique_identifier\">\r\n                <div\r\n                  id=\"text\"\r\n                  onClickCapture={this.captureHighlightedText}\r\n                  style={{\r\n                    backgroundColor: \"white\",\r\n                    borderStyle: \"solid\",\r\n                    height: \"8cm\",\r\n                    width: \"30cm\",\r\n                    overflowY: \"scroll\",\r\n                    overflowX: \"hidden\",\r\n                  }}\r\n                >\r\n                  {this.state.fileContent}\r\n                </div>{\" \"}\r\n              </ContextMenuTrigger>\r\n              <ContextMenu id=\"some_unique_identifier\">\r\n                {this.createMenu()}\r\n              </ContextMenu>\r\n            </td>\r\n            <td length=\"25%\"> </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    );\r\n    return page;\r\n  };\r\n\r\n  createMenu = () => {\r\n    let menu;\r\n    if (this.state.isHighlightedTextTagged == false) {\r\n      menu = this.state.tagsList.map((part, i) => (\r\n        <MenuItem key={i} id={part} onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id={part} style={{ backgroundColor: \"white\" }}>\r\n            Set as {part}{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      ));\r\n    } else {\r\n      menu = (\r\n        <MenuItem id=\"no_tag\" onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id=\"no_tag\" style={{ backgroundColor: \"white\" }}>\r\n            Remove tag{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      );\r\n    }\r\n    return menu;\r\n  };\r\n\r\n  // Gets a list of string and make a drop down option list of them.\r\n  // Creates only the list of the drop down list <option>\r\n  // and not the <select> drop down list itself.\r\n  createList = (list) => {\r\n    return list.map((part, i) => <option value={part}> {part}</option>);\r\n  };\r\n}\r\n\r\nexport default taggedTextArea;\r\n"]},"metadata":{},"sourceType":"module"}