{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\main.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileContent: \"gigi\"\n    };\n\n    this.hadleClickOnUpload = () => {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        var preview = document.getElementById(\"fileContent\");\n        var file = document.querySelector(\"input[type=file]\").files[0];\n        var reader = new FileReader();\n        var textFile = /text.*/; //if (file.type.match(textFile)) {\n        //  reader.onload = function(event) {\n        //      this.setState({ fileContent: this.getHighlightedText() });\n        //  }\n\n        if (file.type.match(textFile)) {\n          reader.onload = function (event) {\n            preview.innerHTML = event.target.result;\n          };\n        } else {\n          preview.innerHTML = \"<span class='error'>It doesn't seem to be a text file!</span>\";\n        }\n\n        reader.readAsText(file);\n      } else {\n        alert(\"Your browser is too old to support HTML5 File API\");\n      }\n    };\n\n    this.highlightText = () => {\n      this.setState({\n        fileContent: this.getHighlightedText()\n      }); //var preview = document.getElementById(\"fileContent\");\n      //var Component = React.createClass({\n      //  _highlightQuery: function(name, query) {\n      //    var regex = new RegExp(\"(\" + query + \")\", \"gi\");\n      //    return name.replace(regex, \"<h1>$1</h1>\");\n      //  },\n      //  render: function() {\n      //    var name = \"Javascript\";\n      //    var query = \"java\";\n      //    return (\n      //      <div>\n      //        <input type=\"checkbox\" /> {this._highlightQuery(name, query)}\n      //      </div>\n      //    );\n      //  }\n      //});\n    };\n  }\n\n  getHighlightedText() {\n    let text = \"hihihihihilolohihihilo\";\n    let higlight = \"lo\"; // Split on higlight term and include term into parts, ignore case\n\n    let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n    let bla = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \" \", parts.map((part, i) => React.createElement(\"span\", {\n      key: i,\n      style: part.toLowerCase() === higlight.toLowerCase() ? {\n        fontWeight: \"bold\",\n        backgroundColor: \"yellow\"\n      } : {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, part)), \" \");\n    return bla;\n  }\n\n  render() {\n    //<input type=\"file\" onChange={this.hadleClickOnUpload} />\n    //<div> the file chosen </div>\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Text editor\"), React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.hadleClickOnUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"fileContent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.highlightText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \" Highlight\"), React.createElement(\"div\", {\n      id: \"light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \" \", this.state.fileContent, \" \")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }));\n  }\n\n} //<input\n//id=\"fileContent\"\n//height=\"1000\"\n//width=\"200\"\n//value={this.state.value}\n//onChange={this.handleChange}\n///>\n//<button onClick={this.hadleClickOnUpload}> Upload file</button>\n//       <button> Save file</button>\n//       <br></br>\n//<input\n//          id=\"tagsPlace\"\n//          height=\"200\"\n//          width=\"200\"\n//          type=\"text\"\n//          value={this.state.fileContent}\n//value={this.state.value}\n//onChange={this.handleChange}\n//        />\n\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/main.jsx"],"names":["React","Component","ReactDOM","throwStatement","Main","state","fileContent","hadleClickOnUpload","window","File","FileReader","FileList","Blob","preview","document","getElementById","file","querySelector","files","reader","textFile","type","match","onload","event","innerHTML","target","result","readAsText","alert","highlightText","setState","getHighlightedText","text","higlight","parts","split","RegExp","bla","map","part","i","toLowerCase","fontWeight","backgroundColor","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { throwStatement } from \"@babel/types\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    fileContent: \"gigi\"\r\n  };\r\n\r\n  hadleClickOnUpload = () => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      var preview = document.getElementById(\"fileContent\");\r\n      var file = document.querySelector(\"input[type=file]\").files[0];\r\n      var reader = new FileReader();\r\n\r\n      var textFile = /text.*/;\r\n\r\n      //if (file.type.match(textFile)) {\r\n      //  reader.onload = function(event) {\r\n      //      this.setState({ fileContent: this.getHighlightedText() });\r\n      //  }\r\n      if (file.type.match(textFile)) {\r\n        reader.onload = function(event) {\r\n          preview.innerHTML = event.target.result;\r\n        };\r\n      } else {\r\n        preview.innerHTML =\r\n          \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n  };\r\n\r\n  highlightText = () => {\r\n    this.setState({ fileContent: this.getHighlightedText() });\r\n    //var preview = document.getElementById(\"fileContent\");\r\n    //var Component = React.createClass({\r\n    //  _highlightQuery: function(name, query) {\r\n    //    var regex = new RegExp(\"(\" + query + \")\", \"gi\");\r\n    //    return name.replace(regex, \"<h1>$1</h1>\");\r\n    //  },\r\n    //  render: function() {\r\n    //    var name = \"Javascript\";\r\n    //    var query = \"java\";\r\n    //    return (\r\n    //      <div>\r\n    //        <input type=\"checkbox\" /> {this._highlightQuery(name, query)}\r\n    //      </div>\r\n    //    );\r\n    //  }\r\n    //});\r\n  };\r\n\r\n  getHighlightedText() {\r\n    let text = \"hihihihihilolohihihilo\";\r\n    let higlight = \"lo\";\r\n    // Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let bla = (\r\n      <div>\r\n        {\" \"}\r\n        {parts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            style={\r\n              part.toLowerCase() === higlight.toLowerCase()\r\n                ? { fontWeight: \"bold\", backgroundColor: \"yellow\" }\r\n                : {}\r\n            }\r\n          >\r\n            {part}\r\n          </span>\r\n        ))}{\" \"}\r\n      </div>\r\n    );\r\n    return bla;\r\n  }\r\n\r\n  render() {\r\n    //<input type=\"file\" onChange={this.hadleClickOnUpload} />\r\n    //<div> the file chosen </div>\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Text editor</h1>\r\n        <input type=\"file\" onChange={this.hadleClickOnUpload}></input>\r\n        <div id=\"fileContent\"></div>\r\n\r\n        <button onClick={this.highlightText}> Highlight</button>\r\n        <div id=\"light\">\r\n          <span> {this.state.fileContent} </span>\r\n        </div>\r\n        <br></br>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\n//<input\r\n//id=\"fileContent\"\r\n//height=\"1000\"\r\n//width=\"200\"\r\n//value={this.state.value}\r\n//onChange={this.handleChange}\r\n///>\r\n\r\n//<button onClick={this.hadleClickOnUpload}> Upload file</button>\r\n//       <button> Save file</button>\r\n//       <br></br>\r\n//<input\r\n//          id=\"tagsPlace\"\r\n//          height=\"200\"\r\n//          width=\"200\"\r\n//          type=\"text\"\r\n//          value={this.state.fileContent}\r\n//value={this.state.value}\r\n//onChange={this.handleChange}\r\n//        />\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}