{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\taggedTextArea.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\n\nclass taggedTextArea extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Used to keep the text the user marked\n      preHighlightedText: \"\",\n      highlightedText: \"\",\n      postHighlightedText: \"\",\n      formattedparts: \"\",\n      isHighlightedTextTagged: false,\n      isUpTodate: true\n    };\n\n    this.isSpecialChar = character => {\n      if (character == \"\\n\") {\n        let i = 0;\n      }\n\n      for (let i = 0; i < this.state.specialCharsList.length; i++) {\n        if (this.state.specialCharsList[i] == character) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.setTags = () => {\n      if (this.props.fileContent === \"\") {\n        return;\n      }\n\n      let text = this.props.fileContent;\n      let regexIsSpace = RegExp(\"(\\n|\\r)\"); // Separete the text into lines.\n\n      let lines = text.split(regexIsSpace); // Delete empty lines.\n\n      let tempLines = [];\n\n      for (let index = 0; index < lines.length; index++) {\n        if (lines[index] + !\"\" || !regexIsSpace.test(lines[index])) {\n          tempLines.push(lines[index]);\n        }\n      }\n\n      lines = tempLines; // Work on each line seperately.\n      // Convert every line to a format that later will be converted,\n      // to an html format.\n\n      let convertedLine = \"\";\n      let htmlForm = \"\";\n\n      for (let index = 0; index < lines.length; index++) {\n        convertedLine = this.separateTaggedFromUntaggedText(lines[index]);\n        htmlForm += this.makeHtmlForm(convertedLine);\n      }\n\n      return htmlForm;\n    };\n\n    this.separateTaggedFromUntaggedText = text => {\n      let regexIstag = RegExp(\"<[^<]+>\");\n      let regexIsCloseTag = RegExp(\"</[^<]+>\");\n      let formattedparts = []; //let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\n      // Seperates plain text from tags.\n\n      let parts = text.split(new RegExp(regexIstag), \"gi\"); // Handle each part.\n\n      for (let index = 0; index < parts.length; index++) {\n        // If the tag is a plain text.\n        if (!regexIstag.test(parts[index]) && parts[index] != \"\") {\n          // Add the text to the proccesd text.\n          formattedparts.push(parts[index]);\n        } // If the tag is an open tag.\n        else if (regexIstag.test(parts[index]) && !regexIsCloseTag.test(parts[index])) {\n            // Create a regex that checks for the closer tag matches the current tag.\n            let currenttag = parts[index].substring(1, currenttag.length - 1);\n            let regexIsSearchedTag = RegExp(\"</\" + currenttag + \">\"); // Search the closer tag matches the currnt tag.\n\n            let serchingIndex = index + 1;\n\n            while (!regexIsSearchedTag.test(parts[serchingIndex]) && serchingIndex < parts.length) {\n              serchingIndex++;\n            } // If a matching closer tag was not found.\n\n\n            if (serchingIndex >= parts.length) {\n              // Consider the tag as a plain text.\n              // Add the text to the proccesd text.\n              formattedparts.push(parts[index]);\n            } // If a matching closer tag was found.\n            else {\n                // Make a string contains all the plain text surrounded by the tag.\n                let currentTaggedText = \"\";\n\n                for (let copyingIndex = index + 1; copyingIndex < serchingIndex; copyingIndex++) {\n                  currentTaggedText += parts[copyingIndex];\n                } // Add the text to the proccesd text, with a prefix that tells the tag name.\n\n\n                formattedparts.push(\"%\" + currenttag + \"%\" + currentTaggedText);\n                index = serchingIndex + 1;\n              }\n          }\n      }\n\n      return formattedparts;\n    };\n\n    this.makeHtmlForm = (lineNumber, line) => {\n      let regexIsTagged = RegExp(\"%.+%.+\");\n      let htmlForm = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \" \", line.map((part, i) => React.createElement(\"span\", {\n        key: lineNumber + \",\" + i,\n        id: lineNumber + \",\" + i,\n        style: regexIsTagged.test(part) ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\n        //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: this.state.tags[part.split(\"%\")[1]]\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, part.split(\"%\").reverse()[0])));\n      return htmlForm;\n    };\n\n    this.addTag = (event, data) => {\n      this.state.isUpTodate = false;\n      let tagName = window.getSelection().anchorNode.parentElement.id;\n      let text;\n\n      if (tagName != \"no_tag\") {\n        text = this.state.preHighlightedText + \"<\" + tagName + \">\" + this.state.highlightedText + \"</\" + tagName + \">\" + this.state.postHighlightedText;\n      } else {\n        text = this.state.preHighlightedText + this.state.highlightedText + this.state.postHighlightedText;\n      }\n\n      this.state.fileContentClean = text;\n      this.setTags();\n      this.setState({\n        fileContentClean: text\n      });\n    };\n\n    this.captureHighlightedText = (event, data) => {\n      if (window.getSelection() == NaN) {\n        return;\n      } // The text is seperated to parts.\n      // Get the index of the highlited text in his part.\n\n\n      let leftIndexOfHighlightedChunkAtHisSpan;\n      let rightIndexOfHighlightedChunkAtHisSpan;\n\n      if (window.getSelection().baseOffset <= window.getSelection().extentOffset) {\n        leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n        rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n      } else if (window.getSelection().baseOffset > window.getSelection().extentOffset) {\n        leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n        rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n      } // Get the part number the highlited text is in.\n\n\n      let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement.id; //calculate the offset from the beggining of the text\n\n      let indexOfCleanText = 0;\n\n      for (let i = 0; i < spanOfHighlightedChunk; i++) {\n        //checking chunk if its not start with % we summing the length\n        if (this.state.formattedtext[i][0] != \"%\") {\n          indexOfCleanText += this.state.formattedtext[i].length;\n        } else {\n          let currentChunk = this.state.formattedtext[i].split(\"%\");\n          let tagLength = currentChunk[1].length;\n          let textlength = currentChunk[2].length;\n          indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\n        }\n      } // indexOfCleanTextc contains the location of the first caracter chosen in the text as\n      // it in raw text.\n      // Sreaching for the begining of the highlighted word.\n\n\n      let cleanText = this.state.fileContentClean;\n      let begining; // If the first chracter is in a begining of a chunk.\n\n      if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\n        begining = indexOfCleanText;\n      } else {\n        let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\n\n        for (; indexToFindTheHighligtedWordStart >= 0; indexToFindTheHighligtedWordStart--) {\n          // we reached the befining of the current paragraph.\n          if (indexToFindTheHighligtedWordStart == 0) {\n            begining = indexOfCleanText; // If we reached a space character.\n          } else {\n            let previousChar = cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1]; //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\n\n            if (this.isSpecialChar(previousChar)) {\n              //  previousChar == \" \" ||\n              //  previousChar == \"\\n\" ||\n              //  previousChar == \"\\t\"\n              begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\n              break;\n            }\n          }\n        }\n      }\n\n      let textInChunk = window.getSelection().baseNode.data;\n      let end; //in case of automatic space added by clicking\n\n      if (rightIndexOfHighlightedChunkAtHisSpan != leftIndexOfHighlightedChunkAtHisSpan && this.isSpecialChar(cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1])) {\n        end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\n      } else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\n        // If the last chracter is in the end of a chunk.\n        end = indexOfCleanText + textInChunk.length;\n      } else {\n        let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\n\n        for (; indexToFindTheHighligtedWordEnd <= textInChunk.length; indexToFindTheHighligtedWordEnd++) {\n          // If we reached the end of the paragraph.\n          if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\n            end = indexOfCleanText + textInChunk.length; // If we reached a white space.\n          } else {\n            let nextChar = cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\n\n            if (this.isSpecialChar(nextChar)) {\n              //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\n              end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\n              break;\n            }\n          }\n        }\n      }\n\n      let preTag;\n      let inTag;\n      let postTag; // If the highlited text is not already tagged.\n\n      if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\n        preTag = cleanText.substring(0, begining);\n        inTag = cleanText.substring(begining, end);\n        postTag = cleanText.substring(end, cleanText.length);\n        this.state.isHighlightedTextTagged = false; //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\n        //preTag = cleanText.substring(0, indexOfCleanText);\n        //inTag = cleanText.substring(\n        //  indexOfCleanText,\n        //  indexOfCleanText + window.getSelection().toString().length\n        //);\n        //postTag = cleanText.substring(\n        //  indexOfCleanText + window.getSelection().toString().length,\n        //  cleanText.length\n        //);\n        //this.state.isHighlightedTextTagged = false;\n      } else {\n        let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\"%\");\n        let tagLength = currentChunk[1].length;\n        preTag = cleanText.substring(0, indexOfCleanText);\n        inTag = cleanText.substring(indexOfCleanText + tagLength + 2, indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length);\n        postTag = cleanText.substring(indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length + tagLength + 3, cleanText.length);\n        this.state.isHighlightedTextTagged = true;\n      }\n\n      this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\n      this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\n      this.state.begining = begining;\n      this.state.end = end;\n      this.setState({\n        preHighlightedText: preTag\n      });\n      this.setState({\n        highlightedText: inTag\n      });\n      this.setState({\n        postHighlightedText: postTag\n      });\n    };\n\n    this.render = () => {\n      let page = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        length: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        length: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        length: \"25%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364\n        },\n        __self: this\n      }, \" \"), React.createElement(\"td\", {\n        length: \"50%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, \" \", React.createElement(ContextMenuTrigger, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"text\",\n        onClickCapture: this.captureHighlightedText,\n        style: {\n          backgroundColor: \"white\",\n          borderStyle: \"solid\",\n          height: \"8cm\",\n          width: \"30cm\",\n          overflowY: \"scroll\",\n          overflowX: \"hidden\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, this.setTags(this.props.fileContent)), \" \"), React.createElement(ContextMenu, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 383\n        },\n        __self: this\n      }, this.createMenu())), React.createElement(\"td\", {\n        length: \"25%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387\n        },\n        __self: this\n      }, \" \"))));\n      return page;\n    };\n\n    this.createMenu = () => {\n      let menu;\n\n      if (this.state.isHighlightedTextTagged == false) {\n        menu = this.props.tags.map((part, i) => React.createElement(MenuItem, {\n          key: i,\n          id: part,\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 399\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: part,\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 401\n          },\n          __self: this\n        }, \"Set as \", part, \" \")));\n      } else {\n        menu = React.createElement(MenuItem, {\n          id: \"no_tag\",\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 408\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: \"no_tag\",\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 410\n          },\n          __self: this\n        }, \"Remove tag\", \" \"));\n      }\n\n      return menu;\n    };\n\n    this.createList = list => {\n      return list.map((part, i) => React.createElement(\"option\", {\n        value: part,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 423\n        },\n        __self: this\n      }, \" \", part));\n    };\n  }\n\n  rrender() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }, \" \", React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353\n      },\n      __self: this\n    }, \"hiiiii \"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, \" \", this.props.fileContent, \" \"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, this.props.tags));\n  }\n\n}\n\nexport default taggedTextArea;","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/taggedTextArea.jsx"],"names":["React","Component","ReactDOM","ContextMenu","MenuItem","ContextMenuTrigger","taggedTextArea","state","preHighlightedText","highlightedText","postHighlightedText","formattedparts","isHighlightedTextTagged","isUpTodate","isSpecialChar","character","i","specialCharsList","length","setTags","props","fileContent","text","regexIsSpace","RegExp","lines","split","tempLines","index","test","push","convertedLine","htmlForm","separateTaggedFromUntaggedText","makeHtmlForm","regexIstag","regexIsCloseTag","parts","currenttag","substring","regexIsSearchedTag","serchingIndex","currentTaggedText","copyingIndex","lineNumber","line","regexIsTagged","map","part","fontWeight","backgroundColor","tags","reverse","addTag","event","data","tagName","window","getSelection","anchorNode","parentElement","id","fileContentClean","setState","captureHighlightedText","NaN","leftIndexOfHighlightedChunkAtHisSpan","rightIndexOfHighlightedChunkAtHisSpan","baseOffset","extentOffset","spanOfHighlightedChunk","indexOfCleanText","formattedtext","currentChunk","tagLength","textlength","cleanText","begining","indexToFindTheHighligtedWordStart","previousChar","textInChunk","baseNode","end","indexToFindTheHighligtedWordEnd","nextChar","preTag","inTag","postTag","leftIndex","rightIndex","render","page","borderStyle","height","width","overflowY","overflowX","createMenu","menu","createList","list","rrender"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\n\r\nclass taggedTextArea extends Component {\r\n  state = {\r\n    // Used to keep the text the user marked\r\n    preHighlightedText: \"\",\r\n    highlightedText: \"\",\r\n    postHighlightedText: \"\",\r\n\r\n    formattedparts: \"\",\r\n\r\n    isHighlightedTextTagged: false,\r\n    isUpTodate: true,\r\n  };\r\n\r\n  isSpecialChar = (character) => {\r\n    if (character == \"\\n\") {\r\n      let i = 0;\r\n    }\r\n    for (let i = 0; i < this.state.specialCharsList.length; i++) {\r\n      if (this.state.specialCharsList[i] == character) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // This funtiuos reads the clean text (with the tags), and turns it to the\r\n  // form which the text is representd to the user.\r\n  // separateTaggedFromUntaggedText\r\n  setTags = () => {\r\n    if (this.props.fileContent === \"\") {\r\n      return;\r\n    }\r\n\r\n    let text = this.props.fileContent;\r\n    let regexIsSpace = RegExp(\"(\\n|\\r)\");\r\n\r\n    // Separete the text into lines.\r\n    let lines = text.split(regexIsSpace);\r\n\r\n    // Delete empty lines.\r\n    let tempLines = [];\r\n    for (let index = 0; index < lines.length; index++) {\r\n      if (lines[index] + !\"\" || !regexIsSpace.test(lines[index])) {\r\n        tempLines.push(lines[index]);\r\n      }\r\n    }\r\n    lines = tempLines;\r\n\r\n    // Work on each line seperately.\r\n    // Convert every line to a format that later will be converted,\r\n    // to an html format.\r\n    let convertedLine = \"\";\r\n    let htmlForm = \"\";\r\n    for (let index = 0; index < lines.length; index++) {\r\n      convertedLine = this.separateTaggedFromUntaggedText(lines[index]);\r\n      htmlForm += this.makeHtmlForm(convertedLine);\r\n    }\r\n\r\n    return htmlForm;\r\n  };\r\n\r\n  separateTaggedFromUntaggedText = (text) => {\r\n    let regexIstag = RegExp(\"<[^<]+>\");\r\n    let regexIsCloseTag = RegExp(\"</[^<]+>\");\r\n    let formattedparts = [];\r\n\r\n    //let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    // Seperates plain text from tags.\r\n    let parts = text.split(new RegExp(regexIstag), \"gi\");\r\n\r\n    // Handle each part.\r\n    for (let index = 0; index < parts.length; index++) {\r\n      // If the tag is a plain text.\r\n      if (!regexIstag.test(parts[index]) && parts[index] != \"\") {\r\n        // Add the text to the proccesd text.\r\n        formattedparts.push(parts[index]);\r\n      }\r\n      // If the tag is an open tag.\r\n      else if (\r\n        regexIstag.test(parts[index]) &&\r\n        !regexIsCloseTag.test(parts[index])\r\n      ) {\r\n        // Create a regex that checks for the closer tag matches the current tag.\r\n        let currenttag = parts[index].substring(1, currenttag.length - 1);\r\n        let regexIsSearchedTag = RegExp(\"</\" + currenttag + \">\");\r\n\r\n        // Search the closer tag matches the currnt tag.\r\n        let serchingIndex = index + 1;\r\n        while (\r\n          !regexIsSearchedTag.test(parts[serchingIndex]) &&\r\n          serchingIndex < parts.length\r\n        ) {\r\n          serchingIndex++;\r\n        }\r\n\r\n        // If a matching closer tag was not found.\r\n        if (serchingIndex >= parts.length) {\r\n          // Consider the tag as a plain text.\r\n          // Add the text to the proccesd text.\r\n          formattedparts.push(parts[index]);\r\n        }\r\n        // If a matching closer tag was found.\r\n        else {\r\n          // Make a string contains all the plain text surrounded by the tag.\r\n          let currentTaggedText = \"\";\r\n          for (\r\n            let copyingIndex = index + 1;\r\n            copyingIndex < serchingIndex;\r\n            copyingIndex++\r\n          ) {\r\n            currentTaggedText += parts[copyingIndex];\r\n          }\r\n\r\n          // Add the text to the proccesd text, with a prefix that tells the tag name.\r\n          formattedparts.push(\"%\" + currenttag + \"%\" + currentTaggedText);\r\n          index = serchingIndex + 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    return formattedparts;\r\n  };\r\n\r\n  makeHtmlForm = (lineNumber, line) => {\r\n    let regexIsTagged = RegExp(\"%.+%.+\");\r\n    let htmlForm = (\r\n      <React.Fragment>\r\n        {\" \"}\r\n        {line.map((part, i) => (\r\n          <span\r\n            key={lineNumber + \",\" + i}\r\n            id={lineNumber + \",\" + i}\r\n            style={\r\n              regexIsTagged.test(part)\r\n                ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\r\n                  //part.toLowerCase() === higlight.toLowerCase()\r\n                  {\r\n                    fontWeight: \"bold\",\r\n                    backgroundColor: this.state.tags[part.split(\"%\")[1]],\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {part.split(\"%\").reverse()[0]}\r\n          </span>\r\n        ))}\r\n      </React.Fragment>\r\n    );\r\n\r\n    return htmlForm;\r\n  };\r\n\r\n  // When a user Highlights text segment and choose to tag that segment,\r\n  // this function is called.\r\n  // Tthe funtion update the whole text so the highlight segment will be\r\n  // serroiunded by a tag.\r\n  addTag = (event, data) => {\r\n    this.state.isUpTodate = false;\r\n    let tagName = window.getSelection().anchorNode.parentElement.id;\r\n    let text;\r\n    if (tagName != \"no_tag\") {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        \"<\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.highlightedText +\r\n        \"</\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.postHighlightedText;\r\n    } else {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        this.state.highlightedText +\r\n        this.state.postHighlightedText;\r\n    }\r\n    this.state.fileContentClean = text;\r\n    this.setTags();\r\n    this.setState({ fileContentClean: text });\r\n  };\r\n\r\n  captureHighlightedText = (event, data) => {\r\n    if (window.getSelection() == NaN) {\r\n      return;\r\n    }\r\n\r\n    // The text is seperated to parts.\r\n    // Get the index of the highlited text in his part.\r\n    let leftIndexOfHighlightedChunkAtHisSpan;\r\n    let rightIndexOfHighlightedChunkAtHisSpan;\r\n    if (\r\n      window.getSelection().baseOffset <= window.getSelection().extentOffset\r\n    ) {\r\n      leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n      rightIndexOfHighlightedChunkAtHisSpan = window.getSelection()\r\n        .extentOffset;\r\n    } else if (\r\n      window.getSelection().baseOffset > window.getSelection().extentOffset\r\n    ) {\r\n      leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\r\n      rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n    }\r\n\r\n    // Get the part number the highlited text is in.\r\n    let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\r\n      .id;\r\n\r\n    //calculate the offset from the beggining of the text\r\n    let indexOfCleanText = 0;\r\n    for (let i = 0; i < spanOfHighlightedChunk; i++) {\r\n      //checking chunk if its not start with % we summing the length\r\n      if (this.state.formattedtext[i][0] != \"%\") {\r\n        indexOfCleanText += this.state.formattedtext[i].length;\r\n      } else {\r\n        let currentChunk = this.state.formattedtext[i].split(\"%\");\r\n        let tagLength = currentChunk[1].length;\r\n        let textlength = currentChunk[2].length;\r\n        indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\r\n      }\r\n    }\r\n\r\n    // indexOfCleanTextc contains the location of the first caracter chosen in the text as\r\n    // it in raw text.\r\n\r\n    // Sreaching for the begining of the highlighted word.\r\n    let cleanText = this.state.fileContentClean;\r\n    let begining;\r\n    // If the first chracter is in a begining of a chunk.\r\n    if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\r\n      begining = indexOfCleanText;\r\n    } else {\r\n      let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\r\n      for (\r\n        ;\r\n        indexToFindTheHighligtedWordStart >= 0;\r\n        indexToFindTheHighligtedWordStart--\r\n      ) {\r\n        // we reached the befining of the current paragraph.\r\n        if (indexToFindTheHighligtedWordStart == 0) {\r\n          begining = indexOfCleanText;\r\n          // If we reached a space character.\r\n        } else {\r\n          let previousChar =\r\n            cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1];\r\n          //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\r\n          if (this.isSpecialChar(previousChar)) {\r\n            //  previousChar == \" \" ||\r\n            //  previousChar == \"\\n\" ||\r\n            //  previousChar == \"\\t\"\r\n            begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let textInChunk = window.getSelection().baseNode.data;\r\n    let end;\r\n    //in case of automatic space added by clicking\r\n    if (\r\n      rightIndexOfHighlightedChunkAtHisSpan !=\r\n        leftIndexOfHighlightedChunkAtHisSpan &&\r\n      this.isSpecialChar(\r\n        cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1]\r\n      )\r\n    ) {\r\n      end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\r\n    } else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\r\n      // If the last chracter is in the end of a chunk.\r\n      end = indexOfCleanText + textInChunk.length;\r\n    } else {\r\n      let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\r\n      for (\r\n        ;\r\n        indexToFindTheHighligtedWordEnd <= textInChunk.length;\r\n        indexToFindTheHighligtedWordEnd++\r\n      ) {\r\n        // If we reached the end of the paragraph.\r\n        if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\r\n          end = indexOfCleanText + textInChunk.length;\r\n          // If we reached a white space.\r\n        } else {\r\n          let nextChar =\r\n            cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\r\n          if (this.isSpecialChar(nextChar)) {\r\n            //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\r\n            end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let preTag;\r\n    let inTag;\r\n    let postTag;\r\n\r\n    // If the highlited text is not already tagged.\r\n    if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\r\n      preTag = cleanText.substring(0, begining);\r\n      inTag = cleanText.substring(begining, end);\r\n      postTag = cleanText.substring(end, cleanText.length);\r\n      this.state.isHighlightedTextTagged = false;\r\n      //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\r\n      //preTag = cleanText.substring(0, indexOfCleanText);\r\n      //inTag = cleanText.substring(\r\n      //  indexOfCleanText,\r\n      //  indexOfCleanText + window.getSelection().toString().length\r\n      //);\r\n      //postTag = cleanText.substring(\r\n      //  indexOfCleanText + window.getSelection().toString().length,\r\n      //  cleanText.length\r\n      //);\r\n      //this.state.isHighlightedTextTagged = false;\r\n    } else {\r\n      let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\r\n        \"%\"\r\n      );\r\n      let tagLength = currentChunk[1].length;\r\n      preTag = cleanText.substring(0, indexOfCleanText);\r\n      inTag = cleanText.substring(\r\n        indexOfCleanText + tagLength + 2,\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length\r\n      );\r\n      postTag = cleanText.substring(\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length +\r\n          tagLength +\r\n          3,\r\n        cleanText.length\r\n      );\r\n      this.state.isHighlightedTextTagged = true;\r\n    }\r\n    this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.begining = begining;\r\n    this.state.end = end;\r\n    this.setState({ preHighlightedText: preTag });\r\n    this.setState({ highlightedText: inTag });\r\n    this.setState({ postHighlightedText: postTag });\r\n  };\r\n\r\n  rrender() {\r\n    return (\r\n      <React.Fragment>\r\n        {\" \"}\r\n        <h1>hiiiii </h1>\r\n        <h1> {this.props.fileContent} </h1>\r\n        <h1>{this.props.tags}</h1>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  render = () => {\r\n    let page = (\r\n      <div>\r\n        <table length=\"100%\">\r\n          <tr length=\"100%\">\r\n            <td length=\"25%\"> </td>\r\n            <td length=\"50%\">\r\n              {\" \"}\r\n              <ContextMenuTrigger id=\"some_unique_identifier\">\r\n                <div\r\n                  id=\"text\"\r\n                  onClickCapture={this.captureHighlightedText}\r\n                  style={{\r\n                    backgroundColor: \"white\",\r\n                    borderStyle: \"solid\",\r\n                    height: \"8cm\",\r\n                    width: \"30cm\",\r\n                    overflowY: \"scroll\",\r\n                    overflowX: \"hidden\",\r\n                  }}\r\n                >\r\n                  {this.setTags(this.props.fileContent)}\r\n                </div>{\" \"}\r\n              </ContextMenuTrigger>\r\n              <ContextMenu id=\"some_unique_identifier\">\r\n                {this.createMenu()}\r\n              </ContextMenu>\r\n            </td>\r\n            <td length=\"25%\"> </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    );\r\n    return page;\r\n  };\r\n\r\n  createMenu = () => {\r\n    let menu;\r\n    if (this.state.isHighlightedTextTagged == false) {\r\n      menu = this.props.tags.map((part, i) => (\r\n        <MenuItem key={i} id={part} onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id={part} style={{ backgroundColor: \"white\" }}>\r\n            Set as {part}{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      ));\r\n    } else {\r\n      menu = (\r\n        <MenuItem id=\"no_tag\" onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id=\"no_tag\" style={{ backgroundColor: \"white\" }}>\r\n            Remove tag{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      );\r\n    }\r\n    return menu;\r\n  };\r\n\r\n  // Gets a list of string and make a drop down option list of them.\r\n  // Creates only the list of the drop down list <option>\r\n  // and not the <select> drop down list itself.\r\n  createList = (list) => {\r\n    return list.map((part, i) => <option value={part}> {part}</option>);\r\n  };\r\n}\r\n\r\nexport default taggedTextArea;\r\n"]},"metadata":{},"sourceType":"module"}