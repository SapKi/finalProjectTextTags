{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\main.jsx\";\nimport React, { Component } from \"react\";\nimport Background from \"../images/sandbackground1.png\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport ReactDOM from \"react-dom\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filename: \"\",\n      conffilename: \"\",\n      fileContent: \"\",\n      fileContentClean: \"\",\n      tagbox: \"Enter text to mark\",\n      formattedparts: \"\",\n      tags: {//person: \"yellow\",\n        //place: \"red\",\n        //bla: \"lightpink\",\n        //date: \"blue\",\n        //event: \"purple\"\n      },\n      configurationFileContentClean: \"\",\n      tagsList: [],\n      filesList: [],\n      confFileList: [],\n      // Context menu\n      contextMenu: \"\",\n      // Used to keep the text the user marked\n      preHighlightedText: \"\",\n      highlightedText: \"\",\n      postHighlightedText: \"\",\n      //    leftIndex: -1,\n      //    rightIndex: -1,\n      //    begining: -1,\n      //    end: -1,\n      isHighlightedTextTagged: false,\n      apiResponse: \"\",\n      pageLayout: \"choose\"\n    };\n\n    this.arrageFileNamesRecivedFromServer = fileNames => {\n      // Saperate the files to text files and configuration files.\n      let files = fileNames.split(\"\\n\"); // Seperate the text files names.\n\n      let textFiles = files[0].split(\",\"); // Seperates the configuration file names.\n\n      let confFiles = files[1].split(\",\");\n      this.setState({\n        filesList: textFiles\n      });\n      this.setState({\n        confFileList: confFiles\n      });\n    };\n\n    this.handleClickOnUpload = event => {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        var preview = document.getElementById(\"temporaryPlace\");\n        var file = document.querySelector(\"input[id=text_file]\").files[0];\n        var reader = new FileReader();\n        var textFile = /text.*/;\n        var namefile = event.target.value;\n        namefile = namefile.split(\"\\\\\");\n        this.state.filename = namefile[namefile.length - 1];\n\n        if (file.type.match(textFile)) {\n          reader.onload = this.uploadFileToServer;\n        } else {\n          preview.innerHTML = \"<span class='error'>It doesn't seem to be a text file!</span>\";\n        }\n\n        reader.readAsText(file);\n      } else {\n        alert(\"Your browser is too old to support HTML5 File API\");\n      }\n    };\n\n    this.handleClickLoadFiles = eventArgs => {\n      var textFile = document.getElementById(\"fileChoser\");\n      textFile = textFile.value;\n      this.getFileFromServer(textFile);\n      var confFile = document.getElementById(\"conffileChoser\");\n      confFile = confFile.value;\n      this.getFileFromServer(confFile);\n      this.setState({\n        pageLayout: \"edit\"\n      });\n    };\n\n    this.handleStatisticsFile = eventArgs => {\n      let address = \"http://localhost:9000/makeReport\";\n      fetch(address, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          data: this.state.fileContentClean,\n          filename: this.state.filename,\n          confData: this.state.configurationFileContentClean,\n          confFileName: this.state.conffilename\n        })\n      }).then(function (response) {\n        let answer = response.body.getReader();\n        console.log();\n      });\n    };\n\n    this.handleSaveFile = eventArgs => {\n      let request = this.state.filename + \"\\n\" + this.state.fileContentClean;\n      let address = \"http://localhost:9000/saveFile\";\n      fetch(address, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          data: this.state.fileContentClean,\n          filename: this.state.filename\n        })\n      }).then(function (response) {\n        let answer = response.body.getReader();\n        console.log();\n      }); //.then(function (response) {\n      //console.log(response);\n      //});\n    };\n\n    this.setCurrentTextFile = text => {\n      let filename = text.split(\"\\n\", 2); //first chunk of text is the name\n\n      this.setState({\n        filename: filename[0]\n      }); //the rest of the text\n\n      this.setState({\n        fileContent: filename[1]\n      });\n      this.setState({\n        fileContentClean: filename[1]\n      });\n      this.setTags(); //note\n    };\n\n    this.setCurrentConfigurationFile = text => {\n      let filename = text.split(\"\\n\");\n      this.setState({\n        conffilename: filename[0]\n      });\n      let conFileContent = filename.slice(1, filename.length);\n      this.state.configurationFileContentClean = conFileContent;\n      let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\n      // Helps to create the context menu.\n\n      let tagslist = [];\n\n      for (let i = 0; i < conFileContent.length; i++) {\n        let currentPair = conFileContent[i].split(\":\");\n        tagslist.push(currentPair[0]);\n        let pairKey = currentPair[0];\n        let pairValue = currentPair[1];\n        newTags[pairKey] = pairValue;\n      }\n\n      this.state.tags = newTags;\n      this.state.tagsList = tagslist;\n      this.setTags(); // Initiate setState so the view will update.\n\n      this.setState({\n        tags: newTags\n      });\n    };\n\n    this.uploadFileToServer = event => {\n      //this.state.fileContent = event.target.result;\n      //this.state.fileContentClean = event.target.result;\n      this.handleSaveFile(event); // Get the updated list of files on the server.\n\n      fetch(\"http://localhost:9000/\").then(res => res.text()).then(res => this.arrageFileNamesRecivedFromServer(res));\n    };\n\n    this.getFileFromServer = filename => {\n      var fileName = filename; //eventArgs.currentTarget.innerHTML.trim();\n\n      if (!fileName.endsWith(\".txt\")) {\n        var request = \"http://localhost:9000/openConfigurationFile/\" + fileName;\n        fetch(request).then(res => res.text()).then(res => this.setCurrentConfigurationFile(res));\n      } else {\n        var request = \"http://localhost:9000/openFile/\" + fileName;\n        fetch(request).then(res => res.text()).then(res => this.setCurrentTextFile(res));\n      }\n    };\n\n    this.retrunToChooseFile = eventArgs => {\n      this.setState({\n        pageLayout: \"choose\"\n      });\n    };\n\n    this.captureHighlightedText = (event, data) => {\n      if (window.getSelection() == NaN) {\n        return;\n      } // The text is seperated to parts.\n      // Get the index of the highlited text in his part.\n\n\n      let leftIndexOfHighlightedChunkAtHisSpan;\n      let rightIndexOfHighlightedChunkAtHisSpan;\n\n      if (window.getSelection().baseOffset <= window.getSelection().extentOffset) {\n        leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n        rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n      } else if (window.getSelection().baseOffset > window.getSelection().extentOffset) {\n        leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n        rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n      } // Get the part number the highlited text is in.\n\n\n      let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement.id; //calculate the offset from the beggining of the text\n\n      let indexOfCleanText = 0;\n\n      for (let i = 0; i < spanOfHighlightedChunk; i++) {\n        //checking chunk if its not start with % we summing the length\n        if (this.state.formattedtext[i][0] != \"%\") {\n          indexOfCleanText += this.state.formattedtext[i].length;\n        } else {\n          let currentChunk = this.state.formattedtext[i].split(\"%\");\n          let tagLength = currentChunk[1].length;\n          let textlength = currentChunk[2].length;\n          indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\n        }\n      } // indexOfCleanTextc contains the location of the first caracter chosen in the text as\n      // it in raw text.\n      // Sreaching for the begining of the highlighted word.\n\n\n      let cleanText = this.state.fileContentClean;\n      let begining; // If the first chracter is in a begining of a chunk.\n\n      if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\n        begining = indexOfCleanText;\n      } else {\n        let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\n\n        for (; indexToFindTheHighligtedWordStart >= 0; indexToFindTheHighligtedWordStart--) {\n          // we reached the befining of the current paragraph.\n          if (indexToFindTheHighligtedWordStart == 0) {\n            begining = indexOfCleanText; // If we reached a space character.\n          } else {\n            let previousChar = cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1]; //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\n\n            if (this.isSpecialChar(previousChar)) {\n              //  previousChar == \" \" ||\n              //  previousChar == \"\\n\" ||\n              //  previousChar == \"\\t\"\n              begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\n              break;\n            }\n          }\n        }\n      }\n\n      let textInChunk = window.getSelection().baseNode.data;\n      let end; //in case of automatic space added by clicking\n\n      if (rightIndexOfHighlightedChunkAtHisSpan != leftIndexOfHighlightedChunkAtHisSpan && this.isSpecialChar(cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1]) //(cleanText[\n      //  indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\n      //] == \" \" ||\n      //  cleanText[\n      //    indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\n      //  ] == \"\\t\" ||\n      //  cleanText[\n      //    indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\n      //  ] == \"\\n\")\n      ) {\n          end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\n        } else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\n        // If the last chracter is in the end of a chunk.\n        end = indexOfCleanText + textInChunk.length;\n      } else {\n        let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\n\n        for (; indexToFindTheHighligtedWordEnd <= textInChunk.length; indexToFindTheHighligtedWordEnd++) {\n          // If we reached the end of the paragraph.\n          if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\n            end = indexOfCleanText + textInChunk.length; // If we reached a white space.\n          } else {\n            let nextChar = cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\n\n            if (this.isSpecialChar(nextChar)) {\n              //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\n              end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\n              break;\n            }\n          }\n        }\n      }\n\n      let preTag;\n      let inTag;\n      let postTag; // If the highlited text is not already tagged.\n\n      if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\n        preTag = cleanText.substring(0, begining);\n        inTag = cleanText.substring(begining, end);\n        postTag = cleanText.substring(end, cleanText.length);\n        this.state.isHighlightedTextTagged = false; //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\n        //preTag = cleanText.substring(0, indexOfCleanText);\n        //inTag = cleanText.substring(\n        //  indexOfCleanText,\n        //  indexOfCleanText + window.getSelection().toString().length\n        //);\n        //postTag = cleanText.substring(\n        //  indexOfCleanText + window.getSelection().toString().length,\n        //  cleanText.length\n        //);\n        //this.state.isHighlightedTextTagged = false;\n      } else {\n        let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\"%\");\n        let tagLength = currentChunk[1].length;\n        preTag = cleanText.substring(0, indexOfCleanText);\n        inTag = cleanText.substring(indexOfCleanText + tagLength + 2, indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length);\n        postTag = cleanText.substring(indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length + tagLength + 3, cleanText.length);\n        this.state.isHighlightedTextTagged = true;\n      }\n\n      this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\n      this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\n      this.state.begining = begining;\n      this.state.end = end;\n      this.setState({\n        preHighlightedText: preTag\n      });\n      this.setState({\n        highlightedText: inTag\n      });\n      this.setState({\n        postHighlightedText: postTag\n      });\n    };\n\n    this.addTag = (event, data) => {\n      let tagName = window.getSelection().anchorNode.parentElement.id;\n      let text;\n\n      if (tagName != \"no_tag\") {\n        text = this.state.preHighlightedText + \"<\" + tagName + \">\" + this.state.highlightedText + \"</\" + tagName + \">\" + this.state.postHighlightedText;\n      } else {\n        text = this.state.preHighlightedText + this.state.highlightedText + this.state.postHighlightedText;\n      }\n\n      this.state.fileContentClean = text;\n      this.setTags();\n      this.setState({\n        fileContentClean: text\n      });\n    };\n\n    this.setTags = () => {\n      let text = this.state.fileContentClean;\n      let higlight = \"<[^<]+>\";\n      let regexHiglight = RegExp(higlight);\n      let closertag = \"</[^<]+>\";\n      let regexclosetag = RegExp(closertag);\n      let par;\n      let spanIndex = 0; //Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let formattedparts = [];\n\n      for (let index = 0; index < parts.length; index++) {\n        //cheking that the current part is not a tag\n        if (!(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))) {\n          if (parts[index] != \"\") formattedparts.push(parts[index]);\n        } // handeling an open tag\n        else {\n            let currenttag = parts[index]; //building the inner tag - cuts inner text\n\n            currenttag = currenttag.substring(1, currenttag.length - 1);\n            let rightclosertag = \"</\" + currenttag + \">\";\n            let regExpRightcloser = RegExp(rightclosertag); //we want to keep running on string until we'll meet the right closer tag\n\n            let newindex = index + 1;\n\n            while (!regExpRightcloser.test(parts[newindex]) && newindex < parts.length) {\n              newindex++;\n            } //if the closing tag matches the opening tag found\n\n\n            if (newindex < parts.length) {\n              //builds the new string for injection\n              let newstring = \"%\" + currenttag + \"%\";\n\n              for (let innerindex = index + 1; innerindex < newindex; innerindex++) {\n                newstring = newstring + parts[innerindex];\n              }\n\n              formattedparts.push(newstring);\n              index = newindex;\n            } else {\n              //if theres no closing tag to a tag so we copy the opening tag as it is\n              formattedparts.push(parts[index]);\n            }\n          }\n      } //console.log(\"correct\");\n\n\n      let tagRegex = RegExp(\"%.+%.+\");\n      let taggedText = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471\n        },\n        __self: this\n      }, \" \", formattedparts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        id: i,\n        style: tagRegex.test(part) ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\n        //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: this.state.tags[part.split(\"%\")[1]]\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 474\n        },\n        __self: this\n      }, part.split(\"%\").reverse()[0])));\n      this.setState({\n        formattedtext: formattedparts\n      });\n      this.setState({\n        fileContent: taggedText\n      });\n    };\n\n    this.isSpecialChar = character => {\n      let charArray = [\" \", \"\\n\", \"\\t\", \".\", \",\"];\n\n      for (let i = 0; i < charArray.length; i++) {\n        if (charArray[i] == character) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.returnPageLayout = () => {\n      if (this.state.pageLayout == \"choose\") {\n        return this.returnMainMenuLayout();\n      } else if (this.state.pageLayout == \"edit\") {\n        return this.returnEditFileLayout();\n      }\n    };\n\n    this.returnMainMenuLayout = () => {\n      let page = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 539\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 540\n        },\n        __self: this\n      }, \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542\n        },\n        __self: this\n      }, \"Welcome to Tags Manager\"), \" \"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 545\n        },\n        __self: this\n      }, \"Choose article and choose configutation file or upload new article from local computer:\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549\n        },\n        __self: this\n      }), React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552\n        },\n        __self: this\n      }, \" Choose an article: \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        name: \"fileChoser\",\n        id: \"fileChoser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554\n        },\n        __self: this\n      }, \" \", this.createList(this.state.filesList)), \" \")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 560\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 561\n        },\n        __self: this\n      }, \"Choose a configuration file: \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        name: \"conffileChoser\",\n        id: \"conffileChoser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 563\n        },\n        __self: this\n      }, this.createList(this.state.confFileList), \" \"))), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 568\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        align: \"center\",\n        colspan: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: this.handleClickLoadFiles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 571\n        },\n        __self: this\n      }, \" Load files\")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 573\n        },\n        __self: this\n      }, \" \"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 576\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577\n        },\n        __self: this\n      }, \"Upload New File to Server\", React.createElement(\"input\", {\n        type: \"file\",\n        id: \"text_file\",\n        onChange: this.handleClickOnUpload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 579\n        },\n        __self: this\n      })));\n      return page;\n    };\n\n    this.returnEditFileLayout = () => {\n      let page = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 592\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 593\n        },\n        __self: this\n      }, \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 595\n        },\n        __self: this\n      }, \"Add or Remove Tags by Highlighting or Right Clicking the Text\"), \" \"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600\n        },\n        __self: this\n      }, \" Choosen Article: \", this.state.filename), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601\n        },\n        __self: this\n      }, \" Choosen Configuration File: \", this.state.conffilename), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 602\n        },\n        __self: this\n      }), React.createElement(\"table\", {\n        length: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 603\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        length: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 604\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        length: \"25%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 605\n        },\n        __self: this\n      }, \" \"), React.createElement(\"td\", {\n        length: \"50%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606\n        },\n        __self: this\n      }, \" \", React.createElement(ContextMenuTrigger, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 608\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"text\",\n        onClickCapture: this.captureHighlightedText,\n        style: {\n          backgroundColor: \"white\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 609\n        },\n        __self: this\n      }, this.state.fileContent), \" \"), React.createElement(ContextMenu, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617\n        },\n        __self: this\n      }, this.createMenu())), React.createElement(\"td\", {\n        length: \"25%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 621\n        },\n        __self: this\n      }, \" \"))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.handleSaveFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626\n        },\n        __self: this\n      }, \" Save Work on System\"), \"     \", React.createElement(\"button\", {\n        onClick: this.handleStatisticsFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628\n        },\n        __self: this\n      }, \"Create Statistics File\"), \"    \", React.createElement(\"button\", {\n        onClick: this.retrunToChooseFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632\n        },\n        __self: this\n      }, \" \", \"Return to Main Menu\")));\n      return page;\n    };\n\n    this.createMenu = () => {\n      let menu;\n\n      if (this.state.isHighlightedTextTagged == false) {\n        menu = this.state.tagsList.map((part, i) => React.createElement(MenuItem, {\n          key: i,\n          id: part,\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 653\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: part,\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 655\n          },\n          __self: this\n        }, \"Set as \", part, \" \")));\n      } else {\n        menu = React.createElement(MenuItem, {\n          id: \"no_tag\",\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 662\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: \"no_tag\",\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 664\n          },\n          __self: this\n        }, \"Remove tag\", \" \"));\n      }\n\n      return menu;\n    };\n\n    this.createList = list => {\n      return list.map((part, i) => React.createElement(\"option\", {\n        value: part,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 677\n        },\n        __self: this\n      }, \" \", part));\n    };\n  }\n\n  callAPI() {\n    console.log(\"in callApi\");\n    fetch(\"http://localhost:9000/\").then(res => res.text()).then(res => this.arrageFileNamesRecivedFromServer(res));\n  }\n\n  componentWillMount() {\n    this.callAPI();\n  }\n\n  // Render the frame of the site and get the cueent page from the method this.returnPageLayout()\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      align: \"center\",\n      style: {\n        backgroundImage: \"url(\".concat(Background, \")\"),\n        height: \"100vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519\n      },\n      __self: this\n    }), this.returnPageLayout()));\n  } // Returns the current page the web sites has to present.\n\n\n}\n\nexport default Main; // UI before sepsration to pages.\n//<div\n//align=\"center\"\n//style={{ backgroundImage: `url(${Background})`, height: \"100vh\" }}\n//>\n//<br></br>\n//<br></br>\n//<h1>\n//  {\" \"}\n//  <b>Welcome to Tags Manager</b>{\" \"}\n//</h1>\n//<br></br>\n//<div>\n//  <h5>\n//    Choose article and configutation file or upload new atricle to the\n//    from local computer\n//  </h5>\n//  <table>\n//    <tr>\n//      <td> Choose an article: </td>\n//      <td>\n//        <select name=\"fileChoser\" id=\"fileChoser\">\n//          {\" \"}\n//          {this.createList(this.state.filesList)}\n//        </select>{\" \"}\n//      </td>\n//    </tr>\n//    <tr>\n//      <td>Choose a configuration file</td>\n//      <td>\n//        <select name=\"conffileChoser\" id=\"conffileChoser\">\n//          {this.createList(this.state.confFileList)}{\" \"}\n//        </select>\n//      </td>\n//    </tr>\n//    <tr>\n//      <td align=\"center\" colspan=\"2\">\n//        <button onClick={this.handleClickLoadFiles}>\n//          {\" \"}\n//          Load files\n//        </button>\n//      </td>\n//      <td> </td>\n//    </tr>\n//  </table>\n//  <br></br>\n//</div></div>  <p>\n//    Upload New File to Server\n//</p>    <input\n//      type=\"file\"\n//      id=\"text_file\"\n//      onChange={this.handleClickOnUpload}\n//    ></input>\n//  </p>\n//</div>\n//</div><table length=\"100%\">\n//</table>  <tr length=\"100%\">\n//    <td length=\"25%\"> </td>\n//</tr>    <td length=\"50%\">\n//      {\" \"}\n//</td>      <ContextMenuTrigger id=\"some_unique_identifier\">\n//</ContextMenuTrigger>       <div\n//          id=\"text\"\n//          onClickCapture={this.captureHighlightedText}\n//          style={{ backgroundColor: \"white\" }}\n//        >\n//          {this.state.fileContent}\n//        </div>{\" \"}\n//      </ContextMenuTrigger>\n//      <ContextMenu id=\"some_unique_identifier\">\n//        {this.createMenu()}\n//      </ContextMenu>\n//    </td>\n//    <td length=\"25%\"> </td>\n//  </tr>\n//</table>\n//<p>\n//  <button onClick={this.handleSaveFile}> Save Work on System</button>\n//</p>\n//</div>\n// for debug\n//          <dir> startIndex: {this.state.leftIndex} </dir>\n//          <dir> endIndex: {this.state.rightIndex} </dir>\n//          <dir> begining: {this.state.begining} </dir>\n//          <dir> end: {this.state.end} </dir>\n//          <dir> pre: {this.state.preHighlightedText} </dir>\n//          <dir> in: {this.state.highlightedText} </dir>\n//          <dir> post: {this.state.postHighlightedText}</dir>\n//onClick={this.captureHighlightedText}\n\n/**\r\n<p>\r\n            Choose an article\r\n            <input\r\n              type=\"file\"\r\n              id=\"text_file\"\r\n              onChange={this.handleClickOnUpload}\r\n            ></input>\r\n          </p>\r\n          <p>\r\n            Choose Configuration file\r\n            <input\r\n              type=\"file\"\r\n              id=\"config_file\"\r\n              onChange={this.loadConfiguration}\r\n            ></input>\r\n          </p>\r\n           */\n//onDoubleClickCapture={this.captureHighlightedText}\n// loadConfiguration = () => {\n//   if (window.File && window.FileReader && window.FileList && window.Blob) {\n//    var preview = document.getElementById(\"temporaryPlace\");\n//   var file = document.querySelector(\"input[id=config_file]\").files[0];\n//   var reader = new FileReader();\n//   var textHolder = \"File Content hasnot set\";\n//  var textFile = /text.*/;\n//  if (file.type.match(textFile)) {\n//   reader.onload = this.tagsConvert;\n// } else {\n//  preview.innerHTML =\n//   \"<span class='error'>It doesn't seem to be a text file!</span>\";\n// }\n// reader.readAsText(file);\n//} else {\n//  alert(\"Your browser is too old to support HTML5 File API\");\n// }\n// };\n//if (file.type.match(textFile)) {\n//  reader.onload = function(event) {\n//    preview.innerHTML = event.target.result;\n//    //this.setState({ fileContent: event.target.result });\n//  };\n//}\n// tagsConvert = (eventTags) => {\n// let conFileContent = eventTags.target.result;\n// let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\n// Helps to create the context menu.\n// let tagslist = [];\n//let lines = conFileContent.split(\"\\n\");\n//for (let i = 0; i < lines.length; i++) {\n//  let currentPair = lines[i].split(\":\");\n//  tagslist.push(currentPair[0]);\n//  let pairKey = currentPair[0];\n//  let pairValue = currentPair[1];\n//  newTags[pairKey] = pairValue;\n//}\n//this.state.tags = newTags;\n//this.state.tagsList = tagslist;\n//this.setTags();\n// Initiate setState so the view will update.\n//this.setState({ tags: newTags });\n//};\n// highlightText = () => {\n//   let textHolder = this.fileContentClean;\n//   this.setState({\n//     fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\n//   });\n// };\n//handleChange = event => {\n//  this.setState({ tagbox: event.target.value });\n//};\n//getHighlightedText = (data, mark) => {\n//  //console.log(this);\n//  let text = data;\n//  let higlight = mark; //this.state.tagbox;\n//  // Split on higlight term and include term into parts, ignore case\n//  let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\n//  let taggedText = (\n//    <div>\n//      {\" \"}\n//      {parts.map((part, i) => (\n//        <span\n//          key={i}\n//          id={i}\n//          style={\n//            part.toLowerCase() === higlight.toLowerCase()\n//              ? {\n//                  fontWeight: \"bold\",\n//                  backgroundColor: this.state.tagbox[part]\n//                }\n//              : {}\n//          }\n//        >\n//          {part}\n//        </span>\n//      ))}{\" \"}\n//    </div>\n//  );\n//  return taggedText;\n//};","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/main.jsx"],"names":["React","Component","Background","ContextMenu","MenuItem","ContextMenuTrigger","ReactDOM","throwStatement","Main","state","filename","conffilename","fileContent","fileContentClean","tagbox","formattedparts","tags","configurationFileContentClean","tagsList","filesList","confFileList","contextMenu","preHighlightedText","highlightedText","postHighlightedText","isHighlightedTextTagged","apiResponse","pageLayout","arrageFileNamesRecivedFromServer","fileNames","files","split","textFiles","confFiles","setState","handleClickOnUpload","event","window","File","FileReader","FileList","Blob","preview","document","getElementById","file","querySelector","reader","textFile","namefile","target","value","length","type","match","onload","uploadFileToServer","innerHTML","readAsText","alert","handleClickLoadFiles","eventArgs","getFileFromServer","confFile","handleStatisticsFile","address","fetch","method","headers","body","JSON","stringify","data","confData","confFileName","then","response","answer","getReader","console","log","handleSaveFile","request","setCurrentTextFile","text","setTags","setCurrentConfigurationFile","conFileContent","slice","newTags","tagslist","i","currentPair","push","pairKey","pairValue","res","fileName","endsWith","retrunToChooseFile","captureHighlightedText","getSelection","NaN","leftIndexOfHighlightedChunkAtHisSpan","rightIndexOfHighlightedChunkAtHisSpan","baseOffset","extentOffset","spanOfHighlightedChunk","anchorNode","parentElement","id","indexOfCleanText","formattedtext","currentChunk","tagLength","textlength","cleanText","begining","indexToFindTheHighligtedWordStart","previousChar","isSpecialChar","textInChunk","baseNode","end","indexToFindTheHighligtedWordEnd","nextChar","preTag","inTag","postTag","substring","leftIndex","rightIndex","addTag","tagName","higlight","regexHiglight","RegExp","closertag","regexclosetag","par","spanIndex","parts","index","test","currenttag","rightclosertag","regExpRightcloser","newindex","newstring","innerindex","tagRegex","taggedText","map","part","fontWeight","backgroundColor","reverse","character","charArray","returnPageLayout","returnMainMenuLayout","returnEditFileLayout","page","createList","createMenu","menu","list","callAPI","componentWillMount","render","backgroundImage","height"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;;;;;;;;;;;;;;;;;;AAkBA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\r\nimport Background from \"../images/sandbackground1.png\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { throwStatement } from \"@babel/types\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    filename: \"\",\r\n    conffilename: \"\",\r\n    fileContent: \"\",\r\n    fileContentClean: \"\",\r\n    tagbox: \"Enter text to mark\",\r\n    formattedparts: \"\",\r\n    tags: {\r\n      //person: \"yellow\",\r\n      //place: \"red\",\r\n      //bla: \"lightpink\",\r\n      //date: \"blue\",\r\n      //event: \"purple\"\r\n    },\r\n    configurationFileContentClean: \"\",\r\n    tagsList: [],\r\n    filesList: [],\r\n    confFileList: [],\r\n    // Context menu\r\n    contextMenu: \"\",\r\n    // Used to keep the text the user marked\r\n    preHighlightedText: \"\",\r\n    highlightedText: \"\",\r\n    postHighlightedText: \"\",\r\n    //    leftIndex: -1,\r\n    //    rightIndex: -1,\r\n    //    begining: -1,\r\n    //    end: -1,\r\n    isHighlightedTextTagged: false,\r\n    apiResponse: \"\",\r\n    pageLayout: \"choose\",\r\n  };\r\n\r\n  callAPI() {\r\n    console.log(\"in callApi\");\r\n    fetch(\"http://localhost:9000/\")\r\n      .then((res) => res.text())\r\n      .then((res) => this.arrageFileNamesRecivedFromServer(res));\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.callAPI();\r\n  }\r\n\r\n  arrageFileNamesRecivedFromServer = (fileNames) => {\r\n    // Saperate the files to text files and configuration files.\r\n    let files = fileNames.split(\"\\n\");\r\n\r\n    // Seperate the text files names.\r\n    let textFiles = files[0].split(\",\");\r\n\r\n    // Seperates the configuration file names.\r\n    let confFiles = files[1].split(\",\");\r\n    this.setState({ filesList: textFiles });\r\n    this.setState({ confFileList: confFiles });\r\n  };\r\n\r\n  handleClickOnUpload = (event) => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      var preview = document.getElementById(\"temporaryPlace\");\r\n      var file = document.querySelector(\"input[id=text_file]\").files[0];\r\n      var reader = new FileReader();\r\n      var textFile = /text.*/;\r\n\r\n      var namefile = event.target.value;\r\n      namefile = namefile.split(\"\\\\\");\r\n      this.state.filename = namefile[namefile.length - 1];\r\n\r\n      if (file.type.match(textFile)) {\r\n        reader.onload = this.uploadFileToServer;\r\n      } else {\r\n        preview.innerHTML =\r\n          \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n  };\r\n\r\n  // previously called loadDataAndConfFiles\r\n  handleClickLoadFiles = (eventArgs) => {\r\n    var textFile = document.getElementById(\"fileChoser\");\r\n    textFile = textFile.value;\r\n    this.getFileFromServer(textFile);\r\n    var confFile = document.getElementById(\"conffileChoser\");\r\n    confFile = confFile.value;\r\n    this.getFileFromServer(confFile);\r\n    this.setState({ pageLayout: \"edit\" });\r\n  };\r\n\r\n  handleStatisticsFile = (eventArgs) => {\r\n    let address = \"http://localhost:9000/makeReport\";\r\n\r\n    fetch(address, {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        data: this.state.fileContentClean,\r\n        filename: this.state.filename,\r\n        confData: this.state.configurationFileContentClean,\r\n        confFileName: this.state.conffilename,\r\n      }),\r\n    }).then(function (response) {\r\n      let answer = response.body.getReader();\r\n      console.log();\r\n    });\r\n  };\r\n\r\n  handleSaveFile = (eventArgs) => {\r\n    let request = this.state.filename + \"\\n\" + this.state.fileContentClean;\r\n    let address = \"http://localhost:9000/saveFile\";\r\n\r\n    fetch(address, {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        data: this.state.fileContentClean,\r\n        filename: this.state.filename,\r\n      }),\r\n    }).then(function (response) {\r\n      let answer = response.body.getReader();\r\n      console.log();\r\n    });\r\n    //.then(function (response) {\r\n    //console.log(response);\r\n    //});\r\n  };\r\n  // previously called acceptFilesFromServer\r\n  setCurrentTextFile = (text) => {\r\n    let filename = text.split(\"\\n\", 2);\r\n    //first chunk of text is the name\r\n    this.setState({ filename: filename[0] });\r\n    //the rest of the text\r\n    this.setState({ fileContent: filename[1] });\r\n    this.setState({ fileContentClean: filename[1] });\r\n    this.setTags();\r\n    //note\r\n  };\r\n\r\n  // previously called acceptConfigurationFilesFromServer\r\n  setCurrentConfigurationFile = (text) => {\r\n    let filename = text.split(\"\\n\");\r\n    this.setState({ conffilename: filename[0] });\r\n    let conFileContent = filename.slice(1, filename.length);\r\n    this.state.configurationFileContentClean = conFileContent;\r\n    let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\r\n\r\n    // Helps to create the context menu.\r\n    let tagslist = [];\r\n\r\n    for (let i = 0; i < conFileContent.length; i++) {\r\n      let currentPair = conFileContent[i].split(\":\");\r\n      tagslist.push(currentPair[0]);\r\n      let pairKey = currentPair[0];\r\n      let pairValue = currentPair[1];\r\n      newTags[pairKey] = pairValue;\r\n    }\r\n\r\n    this.state.tags = newTags;\r\n    this.state.tagsList = tagslist;\r\n    this.setTags();\r\n    // Initiate setState so the view will update.\r\n    this.setState({ tags: newTags });\r\n  };\r\n\r\n  // previously called loadFile\r\n  uploadFileToServer = (event) => {\r\n    //this.state.fileContent = event.target.result;\r\n    //this.state.fileContentClean = event.target.result;\r\n\r\n    this.handleSaveFile(event);\r\n\r\n    // Get the updated list of files on the server.\r\n    fetch(\"http://localhost:9000/\")\r\n      .then((res) => res.text())\r\n      .then((res) => this.arrageFileNamesRecivedFromServer(res));\r\n  };\r\n\r\n  //previously called handleChoosefile.\r\n  getFileFromServer = (filename) => {\r\n    var fileName = filename; //eventArgs.currentTarget.innerHTML.trim();\r\n    if (!fileName.endsWith(\".txt\")) {\r\n      var request = \"http://localhost:9000/openConfigurationFile/\" + fileName;\r\n      fetch(request)\r\n        .then((res) => res.text())\r\n        .then((res) => this.setCurrentConfigurationFile(res));\r\n    } else {\r\n      var request = \"http://localhost:9000/openFile/\" + fileName;\r\n      fetch(request)\r\n        .then((res) => res.text())\r\n        .then((res) => this.setCurrentTextFile(res));\r\n    }\r\n  };\r\n\r\n  retrunToChooseFile = (eventArgs) => {\r\n    this.setState({ pageLayout: \"choose\" });\r\n  };\r\n\r\n  // Recognise the text the user Highlights, and the text segments that\r\n  // comes before and after the Highlighted text.\r\n  captureHighlightedText = (event, data) => {\r\n    if (window.getSelection() == NaN) {\r\n      return;\r\n    }\r\n    // The text is seperated to parts.\r\n    // Get the index of the highlited text in his part.\r\n    let leftIndexOfHighlightedChunkAtHisSpan;\r\n    let rightIndexOfHighlightedChunkAtHisSpan;\r\n    if (\r\n      window.getSelection().baseOffset <= window.getSelection().extentOffset\r\n    ) {\r\n      leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n      rightIndexOfHighlightedChunkAtHisSpan = window.getSelection()\r\n        .extentOffset;\r\n    } else if (\r\n      window.getSelection().baseOffset > window.getSelection().extentOffset\r\n    ) {\r\n      leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\r\n      rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n    }\r\n\r\n    // Get the part number the highlited text is in.\r\n    let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\r\n      .id;\r\n\r\n    //calculate the offset from the beggining of the text\r\n    let indexOfCleanText = 0;\r\n    for (let i = 0; i < spanOfHighlightedChunk; i++) {\r\n      //checking chunk if its not start with % we summing the length\r\n      if (this.state.formattedtext[i][0] != \"%\") {\r\n        indexOfCleanText += this.state.formattedtext[i].length;\r\n      } else {\r\n        let currentChunk = this.state.formattedtext[i].split(\"%\");\r\n        let tagLength = currentChunk[1].length;\r\n        let textlength = currentChunk[2].length;\r\n        indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\r\n      }\r\n    }\r\n\r\n    // indexOfCleanTextc contains the location of the first caracter chosen in the text as\r\n    // it in raw text.\r\n\r\n    // Sreaching for the begining of the highlighted word.\r\n    let cleanText = this.state.fileContentClean;\r\n    let begining;\r\n    // If the first chracter is in a begining of a chunk.\r\n    if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\r\n      begining = indexOfCleanText;\r\n    } else {\r\n      let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\r\n      for (\r\n        ;\r\n        indexToFindTheHighligtedWordStart >= 0;\r\n        indexToFindTheHighligtedWordStart--\r\n      ) {\r\n        // we reached the befining of the current paragraph.\r\n        if (indexToFindTheHighligtedWordStart == 0) {\r\n          begining = indexOfCleanText;\r\n          // If we reached a space character.\r\n        } else {\r\n          let previousChar =\r\n            cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1];\r\n          //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\r\n          if (this.isSpecialChar(previousChar)) {\r\n            //  previousChar == \" \" ||\r\n            //  previousChar == \"\\n\" ||\r\n            //  previousChar == \"\\t\"\r\n            begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let textInChunk = window.getSelection().baseNode.data;\r\n    let end;\r\n    //in case of automatic space added by clicking\r\n    if (\r\n      rightIndexOfHighlightedChunkAtHisSpan !=\r\n        leftIndexOfHighlightedChunkAtHisSpan &&\r\n      this.isSpecialChar(\r\n        cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1]\r\n      )\r\n      //(cleanText[\r\n      //  indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\r\n      //] == \" \" ||\r\n      //  cleanText[\r\n      //    indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\r\n      //  ] == \"\\t\" ||\r\n      //  cleanText[\r\n      //    indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\r\n      //  ] == \"\\n\")\r\n    ) {\r\n      end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\r\n    } else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\r\n      // If the last chracter is in the end of a chunk.\r\n      end = indexOfCleanText + textInChunk.length;\r\n    } else {\r\n      let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\r\n      for (\r\n        ;\r\n        indexToFindTheHighligtedWordEnd <= textInChunk.length;\r\n        indexToFindTheHighligtedWordEnd++\r\n      ) {\r\n        // If we reached the end of the paragraph.\r\n        if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\r\n          end = indexOfCleanText + textInChunk.length;\r\n          // If we reached a white space.\r\n        } else {\r\n          let nextChar =\r\n            cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\r\n          if (this.isSpecialChar(nextChar)) {\r\n            //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\r\n            end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let preTag;\r\n    let inTag;\r\n    let postTag;\r\n\r\n    // If the highlited text is not already tagged.\r\n    if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\r\n      preTag = cleanText.substring(0, begining);\r\n      inTag = cleanText.substring(begining, end);\r\n      postTag = cleanText.substring(end, cleanText.length);\r\n      this.state.isHighlightedTextTagged = false;\r\n      //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\r\n      //preTag = cleanText.substring(0, indexOfCleanText);\r\n      //inTag = cleanText.substring(\r\n      //  indexOfCleanText,\r\n      //  indexOfCleanText + window.getSelection().toString().length\r\n      //);\r\n      //postTag = cleanText.substring(\r\n      //  indexOfCleanText + window.getSelection().toString().length,\r\n      //  cleanText.length\r\n      //);\r\n      //this.state.isHighlightedTextTagged = false;\r\n    } else {\r\n      let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\r\n        \"%\"\r\n      );\r\n      let tagLength = currentChunk[1].length;\r\n      preTag = cleanText.substring(0, indexOfCleanText);\r\n      inTag = cleanText.substring(\r\n        indexOfCleanText + tagLength + 2,\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length\r\n      );\r\n      postTag = cleanText.substring(\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length +\r\n          tagLength +\r\n          3,\r\n        cleanText.length\r\n      );\r\n      this.state.isHighlightedTextTagged = true;\r\n    }\r\n    this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.begining = begining;\r\n    this.state.end = end;\r\n    this.setState({ preHighlightedText: preTag });\r\n    this.setState({ highlightedText: inTag });\r\n    this.setState({ postHighlightedText: postTag });\r\n  };\r\n\r\n  // When a user Highlights text segment and choose to tag that segment,\r\n  // this function is called.\r\n  // Tthe funtion update the whole text so the highlight segment will be\r\n  // serroiunded by a tag.\r\n  addTag = (event, data) => {\r\n    let tagName = window.getSelection().anchorNode.parentElement.id;\r\n    let text;\r\n    if (tagName != \"no_tag\") {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        \"<\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.highlightedText +\r\n        \"</\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.postHighlightedText;\r\n    } else {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        this.state.highlightedText +\r\n        this.state.postHighlightedText;\r\n    }\r\n    this.state.fileContentClean = text;\r\n    this.setTags();\r\n    this.setState({ fileContentClean: text });\r\n  };\r\n\r\n  // This funtiuos reads the clean text (with the tags), and turns it to the\r\n  // form which the text is representd to the user.\r\n  setTags = () => {\r\n    let text = this.state.fileContentClean;\r\n    let higlight = \"<[^<]+>\";\r\n    let regexHiglight = RegExp(higlight);\r\n    let closertag = \"</[^<]+>\";\r\n    let regexclosetag = RegExp(closertag);\r\n    let par;\r\n    let spanIndex = 0;\r\n\r\n    //Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let formattedparts = [];\r\n\r\n    for (let index = 0; index < parts.length; index++) {\r\n      //cheking that the current part is not a tag\r\n      if (\r\n        !(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))\r\n      ) {\r\n        if (parts[index] != \"\") formattedparts.push(parts[index]);\r\n      }\r\n      // handeling an open tag\r\n      else {\r\n        let currenttag = parts[index];\r\n        //building the inner tag - cuts inner text\r\n        currenttag = currenttag.substring(1, currenttag.length - 1);\r\n        let rightclosertag = \"</\" + currenttag + \">\";\r\n        let regExpRightcloser = RegExp(rightclosertag);\r\n        //we want to keep running on string until we'll meet the right closer tag\r\n        let newindex = index + 1;\r\n        while (\r\n          !regExpRightcloser.test(parts[newindex]) &&\r\n          newindex < parts.length\r\n        ) {\r\n          newindex++;\r\n        }\r\n        //if the closing tag matches the opening tag found\r\n        if (newindex < parts.length) {\r\n          //builds the new string for injection\r\n          let newstring = \"%\" + currenttag + \"%\";\r\n\r\n          for (\r\n            let innerindex = index + 1;\r\n            innerindex < newindex;\r\n            innerindex++\r\n          ) {\r\n            newstring = newstring + parts[innerindex];\r\n          }\r\n\r\n          formattedparts.push(newstring);\r\n          index = newindex;\r\n        } else {\r\n          //if theres no closing tag to a tag so we copy the opening tag as it is\r\n          formattedparts.push(parts[index]);\r\n        }\r\n      }\r\n    }\r\n\r\n    //console.log(\"correct\");\r\n\r\n    let tagRegex = RegExp(\"%.+%.+\");\r\n    let taggedText = (\r\n      <div>\r\n        {\" \"}\r\n        {formattedparts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            id={i}\r\n            style={\r\n              tagRegex.test(part)\r\n                ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\r\n                  //part.toLowerCase() === higlight.toLowerCase()\r\n                  {\r\n                    fontWeight: \"bold\",\r\n                    backgroundColor: this.state.tags[part.split(\"%\")[1]],\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {part.split(\"%\").reverse()[0]}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n    this.setState({ formattedtext: formattedparts });\r\n    this.setState({ fileContent: taggedText });\r\n  };\r\n\r\n  isSpecialChar = (character) => {\r\n    let charArray = [\" \", \"\\n\", \"\\t\", \".\", \",\"];\r\n    for (let i = 0; i < charArray.length; i++) {\r\n      if (charArray[i] == character) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Render the frame of the site and get the cueent page from the method this.returnPageLayout()\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          align=\"center\"\r\n          style={{\r\n            backgroundImage: `url(${Background})`,\r\n            height: \"100vh\",\r\n          }}\r\n        >\r\n          <br></br>\r\n          <br></br>\r\n\r\n          {this.returnPageLayout()}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  // Returns the current page the web sites has to present.\r\n  returnPageLayout = () => {\r\n    if (this.state.pageLayout == \"choose\") {\r\n      return this.returnMainMenuLayout();\r\n    } else if (this.state.pageLayout == \"edit\") {\r\n      return this.returnEditFileLayout();\r\n    }\r\n  };\r\n\r\n  // Returns the page\r\n  returnMainMenuLayout = () => {\r\n    let page = (\r\n      <div>\r\n        <h1>\r\n          {\" \"}\r\n          <b>Welcome to Tags Manager</b>{\" \"}\r\n        </h1>\r\n        <br></br>\r\n        <h5>\r\n          Choose article and choose configutation file or upload new article\r\n          from local computer:\r\n        </h5>\r\n        <br></br>\r\n        <table>\r\n          <tr>\r\n            <td> Choose an article: </td>\r\n            <td>\r\n              <select name=\"fileChoser\" id=\"fileChoser\">\r\n                {\" \"}\r\n                {this.createList(this.state.filesList)}\r\n              </select>{\" \"}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td>Choose a configuration file: </td>\r\n            <td>\r\n              <select name=\"conffileChoser\" id=\"conffileChoser\">\r\n                {this.createList(this.state.confFileList)}{\" \"}\r\n              </select>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td align=\"center\" colspan=\"2\">\r\n              <br></br>\r\n              <button onClick={this.handleClickLoadFiles}> Load files</button>\r\n            </td>\r\n            <td> </td>\r\n          </tr>\r\n        </table>\r\n        <br></br>\r\n        <p>\r\n          Upload New File to Server\r\n          <input\r\n            type=\"file\"\r\n            id=\"text_file\"\r\n            onChange={this.handleClickOnUpload}\r\n          ></input>\r\n        </p>\r\n      </div>\r\n    );\r\n    return page;\r\n  };\r\n\r\n  returnEditFileLayout = () => {\r\n    let page = (\r\n      <div>\r\n        <h2>\r\n          {\" \"}\r\n          <b>\r\n            Add or Remove Tags by Highlighting or Right Clicking the Text\r\n          </b>{\" \"}\r\n        </h2>\r\n        <br></br>\r\n        <h5> Choosen Article: {this.state.filename}</h5>\r\n        <h5> Choosen Configuration File: {this.state.conffilename}</h5>\r\n        <br></br>\r\n        <table length=\"100%\">\r\n          <tr length=\"100%\">\r\n            <td length=\"25%\"> </td>\r\n            <td length=\"50%\">\r\n              {\" \"}\r\n              <ContextMenuTrigger id=\"some_unique_identifier\">\r\n                <div\r\n                  id=\"text\"\r\n                  onClickCapture={this.captureHighlightedText}\r\n                  style={{ backgroundColor: \"white\" }}\r\n                >\r\n                  {this.state.fileContent}\r\n                </div>{\" \"}\r\n              </ContextMenuTrigger>\r\n              <ContextMenu id=\"some_unique_identifier\">\r\n                {this.createMenu()}\r\n              </ContextMenu>\r\n            </td>\r\n            <td length=\"25%\"> </td>\r\n          </tr>\r\n        </table>\r\n        <br></br>\r\n        <p>\r\n          <button onClick={this.handleSaveFile}> Save Work on System</button>\r\n          {\"     \"}\r\n          <button onClick={this.handleStatisticsFile}>\r\n            Create Statistics File\r\n          </button>\r\n          {\"    \"}\r\n          <button onClick={this.retrunToChooseFile}>\r\n            {\" \"}\r\n            Return to Main Menu\r\n          </button>\r\n        </p>\r\n      </div>\r\n    );\r\n    return page;\r\n  };\r\n\r\n  // Creates a menu that appears when the user press the right click.\r\n  // Creates only the menu items and not the menu itself.\r\n  // The menu created depends on the value of this.state.isHighlightedTextTagged\r\n  // that dends on the valye of this.state.highlightedText\r\n  // If the highlighted text is not serrounded by a tag, the menu contains\r\n  // all the tags avaliable, and if not, the menu contains only the option\r\n  // \"remove tag:.\r\n  createMenu = () => {\r\n    let menu;\r\n    if (this.state.isHighlightedTextTagged == false) {\r\n      menu = this.state.tagsList.map((part, i) => (\r\n        <MenuItem key={i} id={part} onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id={part} style={{ backgroundColor: \"white\" }}>\r\n            Set as {part}{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      ));\r\n    } else {\r\n      menu = (\r\n        <MenuItem id=\"no_tag\" onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id=\"no_tag\" style={{ backgroundColor: \"white\" }}>\r\n            Remove tag{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      );\r\n    }\r\n    return menu;\r\n  };\r\n\r\n  // Gets a list of string and make a drop down option list of them.\r\n  // Creates only the list of the drop down list <option>\r\n  // and not the <select> drop down list itself.\r\n  createList = (list) => {\r\n    return list.map((part, i) => <option value={part}> {part}</option>);\r\n  };\r\n}\r\nexport default Main;\r\n\r\n// UI before sepsration to pages.\r\n//<div\r\n//align=\"center\"\r\n//style={{ backgroundImage: `url(${Background})`, height: \"100vh\" }}\r\n//>\r\n//<br></br>\r\n//<br></br>\r\n//<h1>\r\n//  {\" \"}\r\n//  <b>Welcome to Tags Manager</b>{\" \"}\r\n//</h1>\r\n//<br></br>\r\n//<div>\r\n//  <h5>\r\n//    Choose article and configutation file or upload new atricle to the\r\n//    from local computer\r\n//  </h5>\r\n//  <table>\r\n//    <tr>\r\n//      <td> Choose an article: </td>\r\n//      <td>\r\n//        <select name=\"fileChoser\" id=\"fileChoser\">\r\n//          {\" \"}\r\n//          {this.createList(this.state.filesList)}\r\n//        </select>{\" \"}\r\n//      </td>\r\n//    </tr>\r\n//    <tr>\r\n//      <td>Choose a configuration file</td>\r\n//      <td>\r\n//        <select name=\"conffileChoser\" id=\"conffileChoser\">\r\n//          {this.createList(this.state.confFileList)}{\" \"}\r\n//        </select>\r\n//      </td>\r\n//    </tr>\r\n//    <tr>\r\n//      <td align=\"center\" colspan=\"2\">\r\n//        <button onClick={this.handleClickLoadFiles}>\r\n//          {\" \"}\r\n//          Load files\r\n//        </button>\r\n//      </td>\r\n//      <td> </td>\r\n//    </tr>\r\n//  </table>\r\n//  <br></br>\r\n//</div></div>  <p>\r\n//    Upload New File to Server\r\n//</p>    <input\r\n//      type=\"file\"\r\n//      id=\"text_file\"\r\n//      onChange={this.handleClickOnUpload}\r\n//    ></input>\r\n//  </p>\r\n//</div>\r\n//</div><table length=\"100%\">\r\n//</table>  <tr length=\"100%\">\r\n//    <td length=\"25%\"> </td>\r\n//</tr>    <td length=\"50%\">\r\n//      {\" \"}\r\n//</td>      <ContextMenuTrigger id=\"some_unique_identifier\">\r\n//</ContextMenuTrigger>       <div\r\n//          id=\"text\"\r\n//          onClickCapture={this.captureHighlightedText}\r\n//          style={{ backgroundColor: \"white\" }}\r\n//        >\r\n//          {this.state.fileContent}\r\n//        </div>{\" \"}\r\n//      </ContextMenuTrigger>\r\n//      <ContextMenu id=\"some_unique_identifier\">\r\n//        {this.createMenu()}\r\n//      </ContextMenu>\r\n//    </td>\r\n//    <td length=\"25%\"> </td>\r\n//  </tr>\r\n//</table>\r\n//<p>\r\n//  <button onClick={this.handleSaveFile}> Save Work on System</button>\r\n//</p>\r\n//</div>\r\n\r\n// for debug\r\n//          <dir> startIndex: {this.state.leftIndex} </dir>\r\n//          <dir> endIndex: {this.state.rightIndex} </dir>\r\n//          <dir> begining: {this.state.begining} </dir>\r\n//          <dir> end: {this.state.end} </dir>\r\n//          <dir> pre: {this.state.preHighlightedText} </dir>\r\n//          <dir> in: {this.state.highlightedText} </dir>\r\n//          <dir> post: {this.state.postHighlightedText}</dir>\r\n\r\n//onClick={this.captureHighlightedText}\r\n\r\n/**\r\n<p>\r\n            Choose an article\r\n            <input\r\n              type=\"file\"\r\n              id=\"text_file\"\r\n              onChange={this.handleClickOnUpload}\r\n            ></input>\r\n          </p>\r\n          <p>\r\n            Choose Configuration file\r\n            <input\r\n              type=\"file\"\r\n              id=\"config_file\"\r\n              onChange={this.loadConfiguration}\r\n            ></input>\r\n          </p>\r\n           */\r\n//onDoubleClickCapture={this.captureHighlightedText}\r\n\r\n// loadConfiguration = () => {\r\n//   if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n//    var preview = document.getElementById(\"temporaryPlace\");\r\n//   var file = document.querySelector(\"input[id=config_file]\").files[0];\r\n//   var reader = new FileReader();\r\n//   var textHolder = \"File Content hasnot set\";\r\n\r\n//  var textFile = /text.*/;\r\n//  if (file.type.match(textFile)) {\r\n//   reader.onload = this.tagsConvert;\r\n// } else {\r\n//  preview.innerHTML =\r\n//   \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n// }\r\n// reader.readAsText(file);\r\n//} else {\r\n//  alert(\"Your browser is too old to support HTML5 File API\");\r\n// }\r\n// };\r\n//if (file.type.match(textFile)) {\r\n//  reader.onload = function(event) {\r\n//    preview.innerHTML = event.target.result;\r\n//    //this.setState({ fileContent: event.target.result });\r\n//  };\r\n//}\r\n// tagsConvert = (eventTags) => {\r\n// let conFileContent = eventTags.target.result;\r\n// let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\r\n// Helps to create the context menu.\r\n// let tagslist = [];\r\n\r\n//let lines = conFileContent.split(\"\\n\");\r\n//for (let i = 0; i < lines.length; i++) {\r\n//  let currentPair = lines[i].split(\":\");\r\n//  tagslist.push(currentPair[0]);\r\n//  let pairKey = currentPair[0];\r\n//  let pairValue = currentPair[1];\r\n//  newTags[pairKey] = pairValue;\r\n//}\r\n\r\n//this.state.tags = newTags;\r\n//this.state.tagsList = tagslist;\r\n//this.setTags();\r\n// Initiate setState so the view will update.\r\n//this.setState({ tags: newTags });\r\n//};\r\n\r\n// highlightText = () => {\r\n//   let textHolder = this.fileContentClean;\r\n//   this.setState({\r\n//     fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\r\n//   });\r\n// };\r\n\r\n//handleChange = event => {\r\n//  this.setState({ tagbox: event.target.value });\r\n//};\r\n\r\n//getHighlightedText = (data, mark) => {\r\n//  //console.log(this);\r\n//  let text = data;\r\n//  let higlight = mark; //this.state.tagbox;\r\n//  // Split on higlight term and include term into parts, ignore case\r\n//  let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n//  let taggedText = (\r\n//    <div>\r\n//      {\" \"}\r\n//      {parts.map((part, i) => (\r\n//        <span\r\n//          key={i}\r\n//          id={i}\r\n//          style={\r\n//            part.toLowerCase() === higlight.toLowerCase()\r\n//              ? {\r\n//                  fontWeight: \"bold\",\r\n//                  backgroundColor: this.state.tagbox[part]\r\n//                }\r\n//              : {}\r\n//          }\r\n//        >\r\n//          {part}\r\n//        </span>\r\n//      ))}{\" \"}\r\n//    </div>\r\n//  );\r\n//  return taggedText;\r\n//};\r\n"]},"metadata":{},"sourceType":"module"}