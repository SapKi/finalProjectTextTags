{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sapir\\\\Documents\\\\GitHub\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\main.jsx\";\nimport React, { Component } from \"react\";\nimport Background from \"../images/sandbackground1.png\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport ReactDOM from \"react-dom\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filename: \"\",\n      fileContent: \"\",\n      fileContentClean: \"\",\n      tagbox: \"Enter text to mark\",\n      formattedparts: \"\",\n      tags: {//person: \"yellow\",\n        //place: \"red\",\n        //bla: \"lightpink\",\n        //date: \"blue\",\n        //event: \"purple\"\n      },\n      tagsList: [],\n      filesList: [],\n      confFileList: [],\n      // Context menu\n      contextMenu: \"\",\n      // Used to keep the text the user marked\n      preHighlightedText: \"\",\n      highlightedText: \"\",\n      postHighlightedText: \"\",\n      //    leftIndex: -1,\n      //    rightIndex: -1,\n      //    begining: -1,\n      //    end: -1,\n      isHighlightedTextTagged: false,\n      apiResponse: \"\"\n    };\n\n    this.arrageFileNamesRecivedFromServer = fileNames => {\n      // Saperate the files to text files and configuration files.\n      let files = fileNames.split(\"\\n\");\n      let textFiles = files[0].split(\",\");\n      let confFiles = files[1].split(\",\");\n      this.setState({\n        filesList: textFiles\n      });\n      this.setState({\n        confFileList: confFiles\n      });\n      console.log(\"in arrageFileNamesRecivedFromServer\");\n    };\n\n    this.isSpesialChar = character => {\n      let charArray = [\" \", \"\\n\", \"\\t\", \".\", \",\"];\n\n      for (let i = 0; i < charArray.length; i++) {\n        if (charArray[i] == character) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.captureHighlightedText = (event, data) => {\n      if (window.getSelection() == NaN) {\n        return;\n      } // The text is seperated to parts.\n      // Get the index of the highlited text in his part.\n\n\n      let leftIndexOfHighlightedChunkAtHisSpan;\n      let rightIndexOfHighlightedChunkAtHisSpan;\n\n      if (window.getSelection().baseOffset <= window.getSelection().extentOffset) {\n        leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n        rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n      } else if (window.getSelection().baseOffset > window.getSelection().extentOffset) {\n        leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n        rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n      } // Get the part number the highlited text is in.\n\n\n      let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement.id; //calculate the offset from the beggining of the text\n\n      let indexOfCleanText = 0;\n\n      for (let i = 0; i < spanOfHighlightedChunk; i++) {\n        //checking chunk if its not start with % we summing the length\n        if (this.state.formattedtext[i][0] != \"%\") {\n          indexOfCleanText += this.state.formattedtext[i].length;\n        } else {\n          let currentChunk = this.state.formattedtext[i].split(\"%\");\n          let tagLength = currentChunk[1].length;\n          let textlength = currentChunk[2].length;\n          indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\n        }\n      } // indexOfCleanTextc contains the location of the first caracter chosen in the text as\n      // it in raw text.\n      // Sreaching for the begining of the highlighted word.\n\n\n      let cleanText = this.state.fileContentClean;\n      let begining; // If the first chracter is in a begining of a chunk.\n\n      if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\n        begining = indexOfCleanText;\n      } else {\n        let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\n\n        for (; indexToFindTheHighligtedWordStart >= 0; indexToFindTheHighligtedWordStart--) {\n          // we reached the befining of the current paragraph.\n          if (indexToFindTheHighligtedWordStart == 0) {\n            begining = indexOfCleanText; // If we reached a space character.\n          } else {\n            let previousChar = cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1]; //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\n\n            if (this.isSpesialChar(previousChar)) {\n              //  previousChar == \" \" ||\n              //  previousChar == \"\\n\" ||\n              //  previousChar == \"\\t\"\n              begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\n              break;\n            }\n          }\n        }\n      }\n\n      let textInChunk = window.getSelection().baseNode.data;\n      let end; //in case of automatic space added by clicking\n\n      if (rightIndexOfHighlightedChunkAtHisSpan != leftIndexOfHighlightedChunkAtHisSpan && this.isSpesialChar(cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1]) //(cleanText[\n      //  indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\n      //] == \" \" ||\n      //  cleanText[\n      //    indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\n      //  ] == \"\\t\" ||\n      //  cleanText[\n      //    indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\n      //  ] == \"\\n\")\n      ) {\n          end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\n        } else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\n        // If the last chracter is in the end of a chunk.\n        end = indexOfCleanText + textInChunk.length;\n      } else {\n        let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\n\n        for (; indexToFindTheHighligtedWordEnd <= textInChunk.length; indexToFindTheHighligtedWordEnd++) {\n          // If we reached the end of the paragraph.\n          if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\n            end = indexOfCleanText + textInChunk.length; // If we reached a white space.\n          } else {\n            let nextChar = cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\n\n            if (this.isSpesialChar(nextChar)) {\n              //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\n              end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\n              break;\n            }\n          }\n        }\n      }\n\n      let preTag;\n      let inTag;\n      let postTag; // If the highlited text is not already tagged.\n\n      if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\n        preTag = cleanText.substring(0, begining);\n        inTag = cleanText.substring(begining, end);\n        postTag = cleanText.substring(end, cleanText.length);\n        this.state.isHighlightedTextTagged = false; //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\n        //preTag = cleanText.substring(0, indexOfCleanText);\n        //inTag = cleanText.substring(\n        //  indexOfCleanText,\n        //  indexOfCleanText + window.getSelection().toString().length\n        //);\n        //postTag = cleanText.substring(\n        //  indexOfCleanText + window.getSelection().toString().length,\n        //  cleanText.length\n        //);\n        //this.state.isHighlightedTextTagged = false;\n      } else {\n        let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\"%\");\n        let tagLength = currentChunk[1].length;\n        preTag = cleanText.substring(0, indexOfCleanText);\n        inTag = cleanText.substring(indexOfCleanText + tagLength + 2, indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length);\n        postTag = cleanText.substring(indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length + tagLength + 3, cleanText.length);\n        this.state.isHighlightedTextTagged = true;\n      }\n\n      this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\n      this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\n      this.state.begining = begining;\n      this.state.end = end;\n      this.setState({\n        preHighlightedText: preTag\n      });\n      this.setState({\n        highlightedText: inTag\n      });\n      this.setState({\n        postHighlightedText: postTag\n      });\n    };\n\n    this.addTag = (event, data) => {\n      let tagName = window.getSelection().anchorNode.parentElement.id;\n      let text;\n\n      if (tagName != \"no_tag\") {\n        text = this.state.preHighlightedText + \"<\" + tagName + \">\" + this.state.highlightedText + \"</\" + tagName + \">\" + this.state.postHighlightedText;\n      } else {\n        text = this.state.preHighlightedText + this.state.highlightedText + this.state.postHighlightedText;\n      }\n\n      this.state.fileContentClean = text;\n      this.setTags();\n      this.setState({\n        fileContentClean: text\n      });\n    };\n\n    this.setTags = () => {\n      let text = this.state.fileContentClean;\n      let higlight = \"<[^<]+>\";\n      let regexHiglight = RegExp(higlight);\n      let closertag = \"</[^<]+>\";\n      let regexclosetag = RegExp(closertag);\n      let par;\n      let spanIndex = 0; //Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let formattedparts = [];\n\n      for (let index = 0; index < parts.length; index++) {\n        //cheking that the current part is not a tag\n        if (!(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))) {\n          if (parts[index] != \"\") formattedparts.push(parts[index]);\n        } // handeling an open tag\n        else {\n            let currenttag = parts[index]; //building the inner tag - cuts inner text\n\n            currenttag = currenttag.substring(1, currenttag.length - 1);\n            let rightclosertag = \"</\" + currenttag + \">\";\n            let regExpRightcloser = RegExp(rightclosertag); //we want to keep running on string until we'll meet the right closer tag\n\n            let newindex = index + 1;\n\n            while (!regExpRightcloser.test(parts[newindex]) && newindex < parts.length) {\n              newindex++;\n            } //if the closing tag matches the opening tag found\n\n\n            if (newindex < parts.length) {\n              //builds the new string for injection\n              let newstring = \"%\" + currenttag + \"%\";\n\n              for (let innerindex = index + 1; innerindex < newindex; innerindex++) {\n                newstring = newstring + parts[innerindex];\n              }\n\n              formattedparts.push(newstring);\n              index = newindex;\n            } else {\n              //if theres no closing tag to a tag so we copy the opening tag as it is\n              formattedparts.push(parts[index]);\n            }\n          }\n      }\n\n      console.log(\"correct\");\n      let tagRegex = RegExp(\"%.+%.+\");\n      let taggedText = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 392\n        },\n        __self: this\n      }, \" \", formattedparts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        id: i,\n        style: tagRegex.test(part) ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\n        //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: this.state.tags[part.split(\"%\")[1]]\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      }, part.split(\"%\").reverse()[0])));\n      this.setState({\n        formattedtext: formattedparts\n      });\n      this.setState({\n        fileContent: taggedText\n      });\n    };\n\n    this.createMenu = () => {\n      let menu;\n\n      if (this.state.isHighlightedTextTagged == false) {\n        menu = this.state.tagsList.map((part, i) => React.createElement(MenuItem, {\n          key: i,\n          id: part,\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 468\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: part,\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 470\n          },\n          __self: this\n        }, \"Set as \", part, \" \")));\n      } else {\n        menu = React.createElement(MenuItem, {\n          id: \"no_tag\",\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 477\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: \"no_tag\",\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 479\n          },\n          __self: this\n        }, \"Remove tag\", \" \"));\n      }\n\n      return menu;\n    };\n\n    this.createList = list => {\n      return list.map((part, i) => React.createElement(\"li\", {\n        onClick: this.handleChoosefile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 490\n        },\n        __self: this\n      }, \" \", part, \" \"));\n    };\n\n    this.handleChoosefile = eventArgs => {\n      var fileName = eventArgs.currentTarget.innerHTML.trim();\n\n      if (!fileName.endsWith(\".txt\")) {\n        var request = \"http://localhost:9000/openConfigurationFile/\" + fileName;\n        fetch(request).then(res => res.text()).then(res => this.acceptConfigurationFilesFromServer(res));\n      } else {\n        var request = \"http://localhost:9000/openFile/\" + fileName;\n        fetch(request).then(res => res.text()).then(res => this.acceptFilesFromServer(res));\n      }\n    };\n\n    this.handleSaveFile = eventArgs => {};\n\n    this.acceptFilesFromServer = text => {\n      this.stfilename({\n        filename: text\n      });\n      this.setState({\n        fileContent: text\n      });\n      this.setState({\n        fileContentClean: text\n      });\n      this.setTags();\n    };\n\n    this.acceptConfigurationFilesFromServer = text => {\n      let conFileContent = text;\n      let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\n      // Helps to create the context menu.\n\n      let tagslist = [];\n      let lines = conFileContent.split(\"\\n\");\n\n      for (let i = 0; i < lines.length; i++) {\n        let currentPair = lines[i].split(\":\");\n        tagslist.push(currentPair[0]);\n        let pairKey = currentPair[0];\n        let pairValue = currentPair[1];\n        newTags[pairKey] = pairValue;\n      }\n\n      this.state.tags = newTags;\n      this.state.tagsList = tagslist;\n      this.setTags(); // Initiate setState so the view will update.\n\n      this.setState({\n        tags: newTags\n      });\n    };\n  }\n\n  callAPI() {\n    console.log(\"in callApi\");\n    fetch(\"http://localhost:9000/\").then(res => res.text()).then(res => this.arrageFileNamesRecivedFromServer(res));\n  }\n\n  componentWillMount() {\n    this.callAPI();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 544\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      align: \"center\",\n      style: {\n        backgroundImage: \"url(\".concat(Background, \")\"),\n        height: \"100vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552\n      },\n      __self: this\n    }, \"Welcome to Tags Manager\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558\n      },\n      __self: this\n    }, \" \", React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560\n      },\n      __self: this\n    }, \" Please choose a file from the following files \"), \"          \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563\n      },\n      __self: this\n    }, \" \", React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 565\n      },\n      __self: this\n    }, \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567\n      },\n      __self: this\n    }, \"AND CHOOSE\"), \" a configutation file from the following files\"), \" \")), React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573\n      },\n      __self: this\n    }, \" \", React.createElement(\"lu\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575\n      },\n      __self: this\n    }, \" \", this.createList(this.state.filesList), \" \"), \" \"), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577\n      },\n      __self: this\n    }, \" \", React.createElement(\"lu\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579\n      },\n      __self: this\n    }, \" \", this.createList(this.state.confFileList), \" \"), \" \")))), React.createElement(\"table\", {\n      length: \"100%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      length: \"100%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      length: \"25%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586\n      },\n      __self: this\n    }, \" \"), React.createElement(\"td\", {\n      length: \"50%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, \" \", React.createElement(ContextMenuTrigger, {\n      id: \"some_unique_identifier\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 589\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"text\",\n      onClickCapture: this.captureHighlightedText,\n      style: {\n        backgroundColor: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590\n      },\n      __self: this\n    }, this.state.fileContent), \" \"), React.createElement(ContextMenu, {\n      id: \"some_unique_identifier\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }, this.createMenu())), React.createElement(\"td\", {\n      length: \"25%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602\n      },\n      __self: this\n    }, \" \")))));\n  }\n\n}\n\nexport default Main; // for debug\n//          <dir> startIndex: {this.state.leftIndex} </dir>\n//          <dir> endIndex: {this.state.rightIndex} </dir>\n//          <dir> begining: {this.state.begining} </dir>\n//          <dir> end: {this.state.end} </dir>\n//          <dir> pre: {this.state.preHighlightedText} </dir>\n//          <dir> in: {this.state.highlightedText} </dir>\n//          <dir> post: {this.state.postHighlightedText}</dir>\n//onClick={this.captureHighlightedText}\n\n/**\r\n<p>\r\n            Choose an article\r\n            <input\r\n              type=\"file\"\r\n              id=\"text_file\"\r\n              onChange={this.hadleClickOnUpload}\r\n            ></input>\r\n          </p>\r\n          <p>\r\n            Choose Configuration file\r\n            <input\r\n              type=\"file\"\r\n              id=\"config_file\"\r\n              onChange={this.loadConfiguration}\r\n            ></input>\r\n          </p>\r\n           */\n//onDoubleClickCapture={this.captureHighlightedText}","map":{"version":3,"sources":["C:/Users/Sapir/Documents/GitHub/finalProject/text-tagging/src/components/main.jsx"],"names":["React","Component","Background","ContextMenu","MenuItem","ContextMenuTrigger","ReactDOM","throwStatement","Main","state","filename","fileContent","fileContentClean","tagbox","formattedparts","tags","tagsList","filesList","confFileList","contextMenu","preHighlightedText","highlightedText","postHighlightedText","isHighlightedTextTagged","apiResponse","arrageFileNamesRecivedFromServer","fileNames","files","split","textFiles","confFiles","setState","console","log","isSpesialChar","character","charArray","i","length","captureHighlightedText","event","data","window","getSelection","NaN","leftIndexOfHighlightedChunkAtHisSpan","rightIndexOfHighlightedChunkAtHisSpan","baseOffset","extentOffset","spanOfHighlightedChunk","anchorNode","parentElement","id","indexOfCleanText","formattedtext","currentChunk","tagLength","textlength","cleanText","begining","indexToFindTheHighligtedWordStart","previousChar","textInChunk","baseNode","end","indexToFindTheHighligtedWordEnd","nextChar","preTag","inTag","postTag","substring","leftIndex","rightIndex","addTag","tagName","text","setTags","higlight","regexHiglight","RegExp","closertag","regexclosetag","par","spanIndex","parts","index","test","push","currenttag","rightclosertag","regExpRightcloser","newindex","newstring","innerindex","tagRegex","taggedText","map","part","fontWeight","backgroundColor","reverse","createMenu","menu","createList","list","handleChoosefile","eventArgs","fileName","currentTarget","innerHTML","trim","endsWith","request","fetch","then","res","acceptConfigurationFilesFromServer","acceptFilesFromServer","handleSaveFile","stfilename","conFileContent","newTags","tagslist","lines","currentPair","pairKey","pairValue","callAPI","componentWillMount","render","backgroundImage","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Background from \"../images/sandbackground1.png\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { throwStatement } from \"@babel/types\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    filename: \"\",\r\n    fileContent: \"\",\r\n    fileContentClean: \"\",\r\n    tagbox: \"Enter text to mark\",\r\n    formattedparts: \"\",\r\n    tags: {\r\n      //person: \"yellow\",\r\n      //place: \"red\",\r\n      //bla: \"lightpink\",\r\n      //date: \"blue\",\r\n      //event: \"purple\"\r\n    },\r\n    tagsList: [],\r\n    filesList: [],\r\n    confFileList: [],\r\n    // Context menu\r\n    contextMenu: \"\",\r\n    // Used to keep the text the user marked\r\n    preHighlightedText: \"\",\r\n    highlightedText: \"\",\r\n    postHighlightedText: \"\",\r\n    //    leftIndex: -1,\r\n    //    rightIndex: -1,\r\n    //    begining: -1,\r\n    //    end: -1,\r\n    isHighlightedTextTagged: false,\r\n    apiResponse: \"\",\r\n  };\r\n\r\n  callAPI() {\r\n    console.log(\"in callApi\");\r\n    fetch(\"http://localhost:9000/\")\r\n      .then((res) => res.text())\r\n      .then((res) => this.arrageFileNamesRecivedFromServer(res));\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.callAPI();\r\n  }\r\n\r\n  arrageFileNamesRecivedFromServer = (fileNames) => {\r\n    // Saperate the files to text files and configuration files.\r\n    let files = fileNames.split(\"\\n\");\r\n    let textFiles = files[0].split(\",\");\r\n    let confFiles = files[1].split(\",\");\r\n    this.setState({ filesList: textFiles });\r\n    this.setState({ confFileList: confFiles });\r\n    console.log(\"in arrageFileNamesRecivedFromServer\");\r\n  };\r\n\r\n  // hadleClickOnUpload = () => {\r\n  // if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n  // var preview = document.getElementById(\"temporaryPlace\");\r\n  // var file = document.querySelector(\"input[id=text_file]\").files[0];\r\n  // var reader = new FileReader();\r\n  // var textHolder = \"File Content hasnot set\";\r\n\r\n  // var textFile = /text.*/;\r\n  // if (file.type.match(textFile)) {\r\n  //   reader.onload = this.loadFile;\r\n  // } else {\r\n  //   preview.innerHTML =\r\n  //     \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n  // }\r\n  // reader.readAsText(file);\r\n  //} else {\r\n  // alert(\"Your browser is too old to support HTML5 File API\");\r\n  //}\r\n  //};\r\n\r\n  // loadConfiguration = () => {\r\n  //   if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n  //    var preview = document.getElementById(\"temporaryPlace\");\r\n  //   var file = document.querySelector(\"input[id=config_file]\").files[0];\r\n  //   var reader = new FileReader();\r\n  //   var textHolder = \"File Content hasnot set\";\r\n\r\n  //  var textFile = /text.*/;\r\n  //  if (file.type.match(textFile)) {\r\n  //   reader.onload = this.tagsConvert;\r\n  // } else {\r\n  //  preview.innerHTML =\r\n  //   \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n  // }\r\n  // reader.readAsText(file);\r\n  //} else {\r\n  //  alert(\"Your browser is too old to support HTML5 File API\");\r\n  // }\r\n  // };\r\n  //if (file.type.match(textFile)) {\r\n  //  reader.onload = function(event) {\r\n  //    preview.innerHTML = event.target.result;\r\n  //    //this.setState({ fileContent: event.target.result });\r\n  //  };\r\n  //}\r\n  // tagsConvert = (eventTags) => {\r\n  // let conFileContent = eventTags.target.result;\r\n  // let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\r\n  // Helps to create the context menu.\r\n  // let tagslist = [];\r\n\r\n  //let lines = conFileContent.split(\"\\n\");\r\n  //for (let i = 0; i < lines.length; i++) {\r\n  //  let currentPair = lines[i].split(\":\");\r\n  //  tagslist.push(currentPair[0]);\r\n  //  let pairKey = currentPair[0];\r\n  //  let pairValue = currentPair[1];\r\n  //  newTags[pairKey] = pairValue;\r\n  //}\r\n\r\n  //this.state.tags = newTags;\r\n  //this.state.tagsList = tagslist;\r\n  //this.setTags();\r\n  // Initiate setState so the view will update.\r\n  //this.setState({ tags: newTags });\r\n  //};\r\n\r\n  isSpesialChar = (character) => {\r\n    let charArray = [\" \", \"\\n\", \"\\t\", \".\", \",\"];\r\n    for (let i = 0; i < charArray.length; i++) {\r\n      if (charArray[i] == character) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  captureHighlightedText = (event, data) => {\r\n    if (window.getSelection() == NaN) {\r\n      return;\r\n    }\r\n    // The text is seperated to parts.\r\n    // Get the index of the highlited text in his part.\r\n    let leftIndexOfHighlightedChunkAtHisSpan;\r\n    let rightIndexOfHighlightedChunkAtHisSpan;\r\n    if (\r\n      window.getSelection().baseOffset <= window.getSelection().extentOffset\r\n    ) {\r\n      leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n      rightIndexOfHighlightedChunkAtHisSpan = window.getSelection()\r\n        .extentOffset;\r\n    } else if (\r\n      window.getSelection().baseOffset > window.getSelection().extentOffset\r\n    ) {\r\n      leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\r\n      rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n    }\r\n\r\n    // Get the part number the highlited text is in.\r\n    let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\r\n      .id;\r\n\r\n    //calculate the offset from the beggining of the text\r\n    let indexOfCleanText = 0;\r\n    for (let i = 0; i < spanOfHighlightedChunk; i++) {\r\n      //checking chunk if its not start with % we summing the length\r\n      if (this.state.formattedtext[i][0] != \"%\") {\r\n        indexOfCleanText += this.state.formattedtext[i].length;\r\n      } else {\r\n        let currentChunk = this.state.formattedtext[i].split(\"%\");\r\n        let tagLength = currentChunk[1].length;\r\n        let textlength = currentChunk[2].length;\r\n        indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\r\n      }\r\n    }\r\n\r\n    // indexOfCleanTextc contains the location of the first caracter chosen in the text as\r\n    // it in raw text.\r\n\r\n    // Sreaching for the begining of the highlighted word.\r\n    let cleanText = this.state.fileContentClean;\r\n    let begining;\r\n    // If the first chracter is in a begining of a chunk.\r\n    if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\r\n      begining = indexOfCleanText;\r\n    } else {\r\n      let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\r\n      for (\r\n        ;\r\n        indexToFindTheHighligtedWordStart >= 0;\r\n        indexToFindTheHighligtedWordStart--\r\n      ) {\r\n        // we reached the befining of the current paragraph.\r\n        if (indexToFindTheHighligtedWordStart == 0) {\r\n          begining = indexOfCleanText;\r\n          // If we reached a space character.\r\n        } else {\r\n          let previousChar =\r\n            cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1];\r\n          //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\r\n          if (this.isSpesialChar(previousChar)) {\r\n            //  previousChar == \" \" ||\r\n            //  previousChar == \"\\n\" ||\r\n            //  previousChar == \"\\t\"\r\n            begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let textInChunk = window.getSelection().baseNode.data;\r\n    let end;\r\n    //in case of automatic space added by clicking\r\n    if (\r\n      rightIndexOfHighlightedChunkAtHisSpan !=\r\n        leftIndexOfHighlightedChunkAtHisSpan &&\r\n      this.isSpesialChar(\r\n        cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1]\r\n      )\r\n      //(cleanText[\r\n      //  indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\r\n      //] == \" \" ||\r\n      //  cleanText[\r\n      //    indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\r\n      //  ] == \"\\t\" ||\r\n      //  cleanText[\r\n      //    indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\r\n      //  ] == \"\\n\")\r\n    ) {\r\n      end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\r\n    } else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\r\n      // If the last chracter is in the end of a chunk.\r\n      end = indexOfCleanText + textInChunk.length;\r\n    } else {\r\n      let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\r\n      for (\r\n        ;\r\n        indexToFindTheHighligtedWordEnd <= textInChunk.length;\r\n        indexToFindTheHighligtedWordEnd++\r\n      ) {\r\n        // If we reached the end of the paragraph.\r\n        if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\r\n          end = indexOfCleanText + textInChunk.length;\r\n          // If we reached a white space.\r\n        } else {\r\n          let nextChar =\r\n            cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\r\n          if (this.isSpesialChar(nextChar)) {\r\n            //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\r\n            end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let preTag;\r\n    let inTag;\r\n    let postTag;\r\n\r\n    // If the highlited text is not already tagged.\r\n    if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\r\n      preTag = cleanText.substring(0, begining);\r\n      inTag = cleanText.substring(begining, end);\r\n      postTag = cleanText.substring(end, cleanText.length);\r\n      this.state.isHighlightedTextTagged = false;\r\n      //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\r\n      //preTag = cleanText.substring(0, indexOfCleanText);\r\n      //inTag = cleanText.substring(\r\n      //  indexOfCleanText,\r\n      //  indexOfCleanText + window.getSelection().toString().length\r\n      //);\r\n      //postTag = cleanText.substring(\r\n      //  indexOfCleanText + window.getSelection().toString().length,\r\n      //  cleanText.length\r\n      //);\r\n      //this.state.isHighlightedTextTagged = false;\r\n    } else {\r\n      let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\r\n        \"%\"\r\n      );\r\n      let tagLength = currentChunk[1].length;\r\n      preTag = cleanText.substring(0, indexOfCleanText);\r\n      inTag = cleanText.substring(\r\n        indexOfCleanText + tagLength + 2,\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length\r\n      );\r\n      postTag = cleanText.substring(\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length +\r\n          tagLength +\r\n          3,\r\n        cleanText.length\r\n      );\r\n      this.state.isHighlightedTextTagged = true;\r\n    }\r\n    this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.begining = begining;\r\n    this.state.end = end;\r\n    this.setState({ preHighlightedText: preTag });\r\n    this.setState({ highlightedText: inTag });\r\n    this.setState({ postHighlightedText: postTag });\r\n  };\r\n\r\n  addTag = (event, data) => {\r\n    let tagName = window.getSelection().anchorNode.parentElement.id;\r\n    let text;\r\n    if (tagName != \"no_tag\") {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        \"<\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.highlightedText +\r\n        \"</\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.postHighlightedText;\r\n    } else {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        this.state.highlightedText +\r\n        this.state.postHighlightedText;\r\n    }\r\n    this.state.fileContentClean = text;\r\n    this.setTags();\r\n    this.setState({ fileContentClean: text });\r\n  };\r\n\r\n  setTags = () => {\r\n    let text = this.state.fileContentClean;\r\n    let higlight = \"<[^<]+>\";\r\n    let regexHiglight = RegExp(higlight);\r\n    let closertag = \"</[^<]+>\";\r\n    let regexclosetag = RegExp(closertag);\r\n    let par;\r\n    let spanIndex = 0;\r\n\r\n    //Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let formattedparts = [];\r\n\r\n    for (let index = 0; index < parts.length; index++) {\r\n      //cheking that the current part is not a tag\r\n      if (\r\n        !(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))\r\n      ) {\r\n        if (parts[index] != \"\") formattedparts.push(parts[index]);\r\n      }\r\n      // handeling an open tag\r\n      else {\r\n        let currenttag = parts[index];\r\n        //building the inner tag - cuts inner text\r\n        currenttag = currenttag.substring(1, currenttag.length - 1);\r\n        let rightclosertag = \"</\" + currenttag + \">\";\r\n        let regExpRightcloser = RegExp(rightclosertag);\r\n        //we want to keep running on string until we'll meet the right closer tag\r\n        let newindex = index + 1;\r\n        while (\r\n          !regExpRightcloser.test(parts[newindex]) &&\r\n          newindex < parts.length\r\n        ) {\r\n          newindex++;\r\n        }\r\n        //if the closing tag matches the opening tag found\r\n        if (newindex < parts.length) {\r\n          //builds the new string for injection\r\n          let newstring = \"%\" + currenttag + \"%\";\r\n\r\n          for (\r\n            let innerindex = index + 1;\r\n            innerindex < newindex;\r\n            innerindex++\r\n          ) {\r\n            newstring = newstring + parts[innerindex];\r\n          }\r\n\r\n          formattedparts.push(newstring);\r\n          index = newindex;\r\n        } else {\r\n          //if theres no closing tag to a tag so we copy the opening tag as it is\r\n          formattedparts.push(parts[index]);\r\n        }\r\n      }\r\n    }\r\n\r\n    console.log(\"correct\");\r\n\r\n    let tagRegex = RegExp(\"%.+%.+\");\r\n    let taggedText = (\r\n      <div>\r\n        {\" \"}\r\n        {formattedparts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            id={i}\r\n            style={\r\n              tagRegex.test(part)\r\n                ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\r\n                  //part.toLowerCase() === higlight.toLowerCase()\r\n                  {\r\n                    fontWeight: \"bold\",\r\n                    backgroundColor: this.state.tags[part.split(\"%\")[1]],\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {part.split(\"%\").reverse()[0]}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n    this.setState({ formattedtext: formattedparts });\r\n    this.setState({ fileContent: taggedText });\r\n  };\r\n\r\n  // loadFile = (event) => {\r\n  //   this.setState({ fileContent: event.target.result });\r\n  //   this.setState({ fileContentClean: event.target.result });\r\n  //   this.setTags();\r\n  // };\r\n\r\n  // highlightText = () => {\r\n  //   let textHolder = this.fileContentClean;\r\n  //   this.setState({\r\n  //     fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\r\n  //   });\r\n  // };\r\n\r\n  //handleChange = event => {\r\n  //  this.setState({ tagbox: event.target.value });\r\n  //};\r\n\r\n  //getHighlightedText = (data, mark) => {\r\n  //  //console.log(this);\r\n  //  let text = data;\r\n  //  let higlight = mark; //this.state.tagbox;\r\n  //  // Split on higlight term and include term into parts, ignore case\r\n  //  let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n  //  let taggedText = (\r\n  //    <div>\r\n  //      {\" \"}\r\n  //      {parts.map((part, i) => (\r\n  //        <span\r\n  //          key={i}\r\n  //          id={i}\r\n  //          style={\r\n  //            part.toLowerCase() === higlight.toLowerCase()\r\n  //              ? {\r\n  //                  fontWeight: \"bold\",\r\n  //                  backgroundColor: this.state.tagbox[part]\r\n  //                }\r\n  //              : {}\r\n  //          }\r\n  //        >\r\n  //          {part}\r\n  //        </span>\r\n  //      ))}{\" \"}\r\n  //    </div>\r\n  //  );\r\n  //  return taggedText;\r\n  //};\r\n  createMenu = () => {\r\n    let menu;\r\n    if (this.state.isHighlightedTextTagged == false) {\r\n      menu = this.state.tagsList.map((part, i) => (\r\n        <MenuItem key={i} id={part} onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id={part} style={{ backgroundColor: \"white\" }}>\r\n            Set as {part}{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      ));\r\n    } else {\r\n      menu = (\r\n        <MenuItem id=\"no_tag\" onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id=\"no_tag\" style={{ backgroundColor: \"white\" }}>\r\n            Remove tag{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      );\r\n    }\r\n    return menu;\r\n  };\r\n\r\n  createList = (list) => {\r\n    return list.map((part, i) => (\r\n      <li onClick={this.handleChoosefile}> {part} </li>\r\n    ));\r\n  };\r\n\r\n  handleChoosefile = (eventArgs) => {\r\n    var fileName = eventArgs.currentTarget.innerHTML.trim();\r\n    if (!fileName.endsWith(\".txt\")) {\r\n      var request = \"http://localhost:9000/openConfigurationFile/\" + fileName;\r\n      fetch(request)\r\n        .then((res) => res.text())\r\n        .then((res) => this.acceptConfigurationFilesFromServer(res));\r\n    } else {\r\n      var request = \"http://localhost:9000/openFile/\" + fileName;\r\n      fetch(request)\r\n        .then((res) => res.text())\r\n        .then((res) => this.acceptFilesFromServer(res));\r\n    }\r\n  };\r\n\r\n  handleSaveFile = (eventArgs) => {\r\n\r\n  }\r\n\r\n  acceptFilesFromServer = (text) => {\r\n    this.stfilename({ filename : text });\r\n    this.setState({ fileContent: text });\r\n    this.setState({ fileContentClean: text });\r\n    this.setTags();\r\n  };\r\n\r\n  acceptConfigurationFilesFromServer = (text) => {\r\n    let conFileContent = text;\r\n    let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\r\n    // Helps to create the context menu.\r\n    let tagslist = [];\r\n\r\n    let lines = conFileContent.split(\"\\n\");\r\n    for (let i = 0; i < lines.length; i++) {\r\n      let currentPair = lines[i].split(\":\");\r\n      tagslist.push(currentPair[0]);\r\n      let pairKey = currentPair[0];\r\n      let pairValue = currentPair[1];\r\n      newTags[pairKey] = pairValue;\r\n    }\r\n\r\n    this.state.tags = newTags;\r\n    this.state.tagsList = tagslist;\r\n    this.setTags();\r\n    // Initiate setState so the view will update.\r\n    this.setState({ tags: newTags });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          align=\"center\"\r\n          style={{ backgroundImage: `url(${Background})`, height: \"100vh\" }}\r\n        >\r\n          <br></br>\r\n          <br></br>\r\n          <h1>\r\n            <b>Welcome to Tags Manager</b>\r\n          </h1>\r\n          <br></br>\r\n          <div>\r\n            <table>\r\n              <tr>\r\n                <td>\r\n                  {\" \"}\r\n                  <h5> Please choose a file from the following files </h5>\r\n                  {\"          \"}\r\n                </td>\r\n                <td>\r\n                  {\" \"}\r\n                  <h5>\r\n                    {\" \"}\r\n                    <b>AND CHOOSE</b> a configutation file from the following\r\n                    files\r\n                  </h5>{\" \"}\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td>\r\n                  {\" \"}\r\n                  <lu> {this.createList(this.state.filesList)} </lu>{\" \"}\r\n                </td>\r\n                <td>\r\n                  {\" \"}\r\n                  <lu> {this.createList(this.state.confFileList)} </lu>{\" \"}\r\n                </td>\r\n              </tr>\r\n            </table>\r\n          </div>\r\n          <table length=\"100%\">\r\n            <tr length=\"100%\">\r\n              <td length=\"25%\"> </td>\r\n              <td length=\"50%\">\r\n                {\" \"}\r\n                <ContextMenuTrigger id=\"some_unique_identifier\">\r\n                  <div\r\n                    id=\"text\"\r\n                    onClickCapture={this.captureHighlightedText}\r\n                    style={{ backgroundColor: \"white\" }}\r\n                  >\r\n                    {this.state.fileContent}\r\n                  </div>{\" \"}\r\n                </ContextMenuTrigger>\r\n                <ContextMenu id=\"some_unique_identifier\">\r\n                  {this.createMenu()}\r\n                </ContextMenu>\r\n              </td>\r\n              <td length=\"25%\"> </td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Main;\r\n// for debug\r\n//          <dir> startIndex: {this.state.leftIndex} </dir>\r\n//          <dir> endIndex: {this.state.rightIndex} </dir>\r\n//          <dir> begining: {this.state.begining} </dir>\r\n//          <dir> end: {this.state.end} </dir>\r\n//          <dir> pre: {this.state.preHighlightedText} </dir>\r\n//          <dir> in: {this.state.highlightedText} </dir>\r\n//          <dir> post: {this.state.postHighlightedText}</dir>\r\n\r\n//onClick={this.captureHighlightedText}\r\n\r\n/**\r\n<p>\r\n            Choose an article\r\n            <input\r\n              type=\"file\"\r\n              id=\"text_file\"\r\n              onChange={this.hadleClickOnUpload}\r\n            ></input>\r\n          </p>\r\n          <p>\r\n            Choose Configuration file\r\n            <input\r\n              type=\"file\"\r\n              id=\"config_file\"\r\n              onChange={this.loadConfiguration}\r\n            ></input>\r\n          </p>\r\n           */\r\n//onDoubleClickCapture={this.captureHighlightedText}\r\n"]},"metadata":{},"sourceType":"module"}