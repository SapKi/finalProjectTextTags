{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\main.jsx\";\nimport React, { Component } from \"react\";\nimport Background from \"../images/sandbackground1.png\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport ReactDOM from \"react-dom\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filename: \"\",\n      fileContent: \"\",\n      fileContentClean: \"\",\n      tagbox: \"Enter text to mark\",\n      formattedparts: \"\",\n      tags: {//person: \"yellow\",\n        //place: \"red\",\n        //bla: \"lightpink\",\n        //date: \"blue\",\n        //event: \"purple\"\n      },\n      tagsList: [],\n      filesList: [],\n      confFileList: [],\n      // Context menu\n      contextMenu: \"\",\n      // Used to keep the text the user marked\n      preHighlightedText: \"\",\n      highlightedText: \"\",\n      postHighlightedText: \"\",\n      //    leftIndex: -1,\n      //    rightIndex: -1,\n      //    begining: -1,\n      //    end: -1,\n      isHighlightedTextTagged: false,\n      apiResponse: \"\",\n      pageLayout: \"choose\"\n    };\n\n    this.arrageFileNamesRecivedFromServer = fileNames => {\n      // Saperate the files to text files and configuration files.\n      let files = fileNames.split(\"\\n\");\n      let textFiles = files[0].split(\",\");\n      let confFiles = files[1].split(\",\");\n      this.setState({\n        filesList: textFiles\n      });\n      this.setState({\n        confFileList: confFiles\n      });\n      console.log(\"in arrageFileNamesRecivedFromServer\");\n    };\n\n    this.handleClickOnUpload = () => {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        var preview = document.getElementById(\"temporaryPlace\");\n        var file = document.querySelector(\"input[id=text_file]\").files[0];\n        var reader = new FileReader();\n        var textHolder = \"File Content hasnot set\";\n        var textFile = /text.*/;\n\n        if (file.type.match(textFile)) {\n          reader.onload = this.loadFile;\n        } else {\n          preview.innerHTML = \"<span class='error'>It doesn't seem to be a text file!</span>\";\n        }\n\n        reader.readAsText(file);\n      } else {\n        alert(\"Your browser is too old to support HTML5 File API\");\n      }\n    };\n\n    this.isSpecialChar = character => {\n      let charArray = [\" \", \"\\n\", \"\\t\", \".\", \",\"];\n\n      for (let i = 0; i < charArray.length; i++) {\n        if (charArray[i] == character) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.captureHighlightedText = (event, data) => {\n      if (window.getSelection() == NaN) {\n        return;\n      } // The text is seperated to parts.\n      // Get the index of the highlited text in his part.\n\n\n      let leftIndexOfHighlightedChunkAtHisSpan;\n      let rightIndexOfHighlightedChunkAtHisSpan;\n\n      if (window.getSelection().baseOffset <= window.getSelection().extentOffset) {\n        leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n        rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n      } else if (window.getSelection().baseOffset > window.getSelection().extentOffset) {\n        leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n        rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n      } // Get the part number the highlited text is in.\n\n\n      let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement.id; //calculate the offset from the beggining of the text\n\n      let indexOfCleanText = 0;\n\n      for (let i = 0; i < spanOfHighlightedChunk; i++) {\n        //checking chunk if its not start with % we summing the length\n        if (this.state.formattedtext[i][0] != \"%\") {\n          indexOfCleanText += this.state.formattedtext[i].length;\n        } else {\n          let currentChunk = this.state.formattedtext[i].split(\"%\");\n          let tagLength = currentChunk[1].length;\n          let textlength = currentChunk[2].length;\n          indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\n        }\n      } // indexOfCleanTextc contains the location of the first caracter chosen in the text as\n      // it in raw text.\n      // Sreaching for the begining of the highlighted word.\n\n\n      let cleanText = this.state.fileContentClean;\n      let begining; // If the first chracter is in a begining of a chunk.\n\n      if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\n        begining = indexOfCleanText;\n      } else {\n        let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\n\n        for (; indexToFindTheHighligtedWordStart >= 0; indexToFindTheHighligtedWordStart--) {\n          // we reached the befining of the current paragraph.\n          if (indexToFindTheHighligtedWordStart == 0) {\n            begining = indexOfCleanText; // If we reached a space character.\n          } else {\n            let previousChar = cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1]; //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\n\n            if (this.isSpecialChar(previousChar)) {\n              //  previousChar == \" \" ||\n              //  previousChar == \"\\n\" ||\n              //  previousChar == \"\\t\"\n              begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\n              break;\n            }\n          }\n        }\n      }\n\n      let textInChunk = window.getSelection().baseNode.data;\n      let end; //in case of automatic space added by clicking\n\n      if (rightIndexOfHighlightedChunkAtHisSpan != leftIndexOfHighlightedChunkAtHisSpan && this.isSpecialChar(cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1]) //(cleanText[\n      //  indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\n      //] == \" \" ||\n      //  cleanText[\n      //    indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\n      //  ] == \"\\t\" ||\n      //  cleanText[\n      //    indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\n      //  ] == \"\\n\")\n      ) {\n          end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\n        } else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\n        // If the last chracter is in the end of a chunk.\n        end = indexOfCleanText + textInChunk.length;\n      } else {\n        let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\n\n        for (; indexToFindTheHighligtedWordEnd <= textInChunk.length; indexToFindTheHighligtedWordEnd++) {\n          // If we reached the end of the paragraph.\n          if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\n            end = indexOfCleanText + textInChunk.length; // If we reached a white space.\n          } else {\n            let nextChar = cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\n\n            if (this.isSpecialChar(nextChar)) {\n              //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\n              end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\n              break;\n            }\n          }\n        }\n      }\n\n      let preTag;\n      let inTag;\n      let postTag; // If the highlited text is not already tagged.\n\n      if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\n        preTag = cleanText.substring(0, begining);\n        inTag = cleanText.substring(begining, end);\n        postTag = cleanText.substring(end, cleanText.length);\n        this.state.isHighlightedTextTagged = false; //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\n        //preTag = cleanText.substring(0, indexOfCleanText);\n        //inTag = cleanText.substring(\n        //  indexOfCleanText,\n        //  indexOfCleanText + window.getSelection().toString().length\n        //);\n        //postTag = cleanText.substring(\n        //  indexOfCleanText + window.getSelection().toString().length,\n        //  cleanText.length\n        //);\n        //this.state.isHighlightedTextTagged = false;\n      } else {\n        let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\"%\");\n        let tagLength = currentChunk[1].length;\n        preTag = cleanText.substring(0, indexOfCleanText);\n        inTag = cleanText.substring(indexOfCleanText + tagLength + 2, indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length);\n        postTag = cleanText.substring(indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length + tagLength + 3, cleanText.length);\n        this.state.isHighlightedTextTagged = true;\n      }\n\n      this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\n      this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\n      this.state.begining = begining;\n      this.state.end = end;\n      this.setState({\n        preHighlightedText: preTag\n      });\n      this.setState({\n        highlightedText: inTag\n      });\n      this.setState({\n        postHighlightedText: postTag\n      });\n    };\n\n    this.addTag = (event, data) => {\n      let tagName = window.getSelection().anchorNode.parentElement.id;\n      let text;\n\n      if (tagName != \"no_tag\") {\n        text = this.state.preHighlightedText + \"<\" + tagName + \">\" + this.state.highlightedText + \"</\" + tagName + \">\" + this.state.postHighlightedText;\n      } else {\n        text = this.state.preHighlightedText + this.state.highlightedText + this.state.postHighlightedText;\n      }\n\n      this.state.fileContentClean = text;\n      this.setTags();\n      this.setState({\n        fileContentClean: text\n      });\n    };\n\n    this.setTags = () => {\n      let text = this.state.fileContentClean;\n      let higlight = \"<[^<]+>\";\n      let regexHiglight = RegExp(higlight);\n      let closertag = \"</[^<]+>\";\n      let regexclosetag = RegExp(closertag);\n      let par;\n      let spanIndex = 0; //Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let formattedparts = [];\n\n      for (let index = 0; index < parts.length; index++) {\n        //cheking that the current part is not a tag\n        if (!(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))) {\n          if (parts[index] != \"\") formattedparts.push(parts[index]);\n        } // handeling an open tag\n        else {\n            let currenttag = parts[index]; //building the inner tag - cuts inner text\n\n            currenttag = currenttag.substring(1, currenttag.length - 1);\n            let rightclosertag = \"</\" + currenttag + \">\";\n            let regExpRightcloser = RegExp(rightclosertag); //we want to keep running on string until we'll meet the right closer tag\n\n            let newindex = index + 1;\n\n            while (!regExpRightcloser.test(parts[newindex]) && newindex < parts.length) {\n              newindex++;\n            } //if the closing tag matches the opening tag found\n\n\n            if (newindex < parts.length) {\n              //builds the new string for injection\n              let newstring = \"%\" + currenttag + \"%\";\n\n              for (let innerindex = index + 1; innerindex < newindex; innerindex++) {\n                newstring = newstring + parts[innerindex];\n              }\n\n              formattedparts.push(newstring);\n              index = newindex;\n            } else {\n              //if theres no closing tag to a tag so we copy the opening tag as it is\n              formattedparts.push(parts[index]);\n            }\n          }\n      } //console.log(\"correct\");\n\n\n      let tagRegex = RegExp(\"%.+%.+\");\n      let taggedText = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, \" \", formattedparts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        id: i,\n        style: tagRegex.test(part) ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\n        //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: this.state.tags[part.split(\"%\")[1]]\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 396\n        },\n        __self: this\n      }, part.split(\"%\").reverse()[0])));\n      this.setState({\n        formattedtext: formattedparts\n      });\n      this.setState({\n        fileContent: taggedText\n      });\n    };\n\n    this.loadFile = event => {\n      this.state.fileContent = event.target.result;\n      this.state.filename = \"tryUploadFile.txt\";\n      this.handleSaveFile(event);\n      fetch(\"http://localhost:9000/\").then(res => res.text()).then(res => this.arrageFileNamesRecivedFromServer(res)); //  this.fileContent = \"\";\n      //  this.fileContentClean = \"\";\n      //this.setState({ fileContent: event.target.result });\n      //this.setState({ fileContentClean: event.target.result });\n      //this.setTags();\n    };\n\n    this.createMenu = () => {\n      let menu;\n\n      if (this.state.isHighlightedTextTagged == false) {\n        menu = this.state.tagsList.map((part, i) => React.createElement(MenuItem, {\n          key: i,\n          id: part,\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 477\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: part,\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 479\n          },\n          __self: this\n        }, \"Set as \", part, \" \")));\n      } else {\n        menu = React.createElement(MenuItem, {\n          id: \"no_tag\",\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 486\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: \"no_tag\",\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 488\n          },\n          __self: this\n        }, \"Remove tag\", \" \"));\n      }\n\n      return menu;\n    };\n\n    this.createList = list => {\n      return list.map((part, i) => React.createElement(\"option\", {\n        value: part,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        },\n        __self: this\n      }, \" \", part));\n    };\n\n    this.returnPageLayout = () => {\n      let page = \"\";\n\n      if (this.state.pageLayout == \"choose\") {\n        page = React.createElement(\"div\", {\n          align: \"center\",\n          style: {\n            backgroundImage: \"url(\".concat(Background, \")\"),\n            height: \"100vh\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 505\n          },\n          __self: this\n        }, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 509\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 510\n          },\n          __self: this\n        }), React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 511\n          },\n          __self: this\n        }, \" \", React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 513\n          },\n          __self: this\n        }, \"Welcome to Tags Manager\"), \" \"), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 515\n          },\n          __self: this\n        }), React.createElement(\"h5\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 516\n          },\n          __self: this\n        }, \"Choose article and choose configutation file or upload new article from local computer:\"), React.createElement(\"table\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 520\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 521\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 522\n          },\n          __self: this\n        }, \" Choose an article: \"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 523\n          },\n          __self: this\n        }, React.createElement(\"select\", {\n          name: \"fileChoser\",\n          id: \"fileChoser\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 524\n          },\n          __self: this\n        }, \" \", this.createList(this.state.filesList)), \" \")), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 530\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 531\n          },\n          __self: this\n        }, \"Choose a configuration file\"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 532\n          },\n          __self: this\n        }, React.createElement(\"select\", {\n          name: \"conffileChoser\",\n          id: \"conffileChoser\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 533\n          },\n          __self: this\n        }, this.createList(this.state.confFileList), \" \"))), React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 538\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          align: \"center\",\n          colspan: \"2\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 539\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: this.loadDataAndConfFiles,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 540\n          },\n          __self: this\n        }, \" Load files\")), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 542\n          },\n          __self: this\n        }, \" \"))), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 545\n          },\n          __self: this\n        }), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 546\n          },\n          __self: this\n        }, \"Upload New File to Server\", React.createElement(\"input\", {\n          type: \"file\",\n          id: \"text_file\",\n          onChange: this.handleClickOnUpload,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 548\n          },\n          __self: this\n        })));\n      } else {\n        page = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 558\n          },\n          __self: this\n        }, React.createElement(\"table\", {\n          length: \"100%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 559\n          },\n          __self: this\n        }, React.createElement(\"tr\", {\n          length: \"100%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 560\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          length: \"25%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 561\n          },\n          __self: this\n        }, \" \"), React.createElement(\"td\", {\n          length: \"50%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 562\n          },\n          __self: this\n        }, \" \", React.createElement(ContextMenuTrigger, {\n          id: \"some_unique_identifier\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 564\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"text\",\n          onClickCapture: this.captureHighlightedText,\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 565\n          },\n          __self: this\n        }, this.state.fileContent), \" \"), React.createElement(ContextMenu, {\n          id: \"some_unique_identifier\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 573\n          },\n          __self: this\n        }, this.createMenu())), React.createElement(\"td\", {\n          length: \"25%\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 577\n          },\n          __self: this\n        }, \" \"))), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 580\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: this.handleSaveFile,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 581\n          },\n          __self: this\n        }, \" Save Work on System\")), React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 583\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: this.retrunToChooseFile,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 584\n          },\n          __self: this\n        }, \" \", \"Return to Main Menu\")));\n      }\n\n      return page;\n    };\n\n    this.loadDataAndConfFiles = eventArgs => {\n      var textFile = document.getElementById(\"fileChoser\");\n      textFile = textFile.value;\n      this.handleChoosefile(textFile);\n      var confFile = document.getElementById(\"conffileChoser\");\n      confFile = confFile.value;\n      this.handleChoosefile(confFile);\n      this.setState({\n        pageLayout: \"edit\"\n      });\n    };\n\n    this.handleChoosefile = filename => {\n      var fileName = filename; //eventArgs.currentTarget.innerHTML.trim();\n\n      if (!fileName.endsWith(\".txt\")) {\n        var request = \"http://localhost:9000/openConfigurationFile/\" + fileName;\n        fetch(request).then(res => res.text()).then(res => this.acceptConfigurationFilesFromServer(res));\n      } else {\n        var request = \"http://localhost:9000/openFile/\" + fileName;\n        fetch(request).then(res => res.text()).then(res => this.acceptFilesFromServer(res));\n      }\n    };\n\n    this.handleSaveFile = eventArgs => {\n      let request = this.state.filename + \"\\n\" + this.state.fileContentClean;\n      let address = \"http://localhost:9000/saveFile\";\n      fetch(address, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          data: this.state.fileContentClean,\n          filename: this.state.filename\n        })\n      }).then(function (response) {\n        let bla = response.body.getReader();\n        console.log();\n      }); //.then(function (response) {\n      //console.log(response);\n      //});\n    };\n\n    this.acceptFilesFromServer = text => {\n      let filename = text.split(\"\\n\", 2); //first chunk of text is the name\n\n      this.setState({\n        filename: filename[0]\n      }); //the rest of the text\n\n      this.setState({\n        fileContent: filename[1]\n      });\n      this.setState({\n        fileContentClean: filename[1]\n      });\n      this.setTags(); //note\n    };\n\n    this.acceptConfigurationFilesFromServer = text => {\n      let conFileContent = text;\n      let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\n      // Helps to create the context menu.\n\n      let tagslist = [];\n      let lines = conFileContent.split(\"\\n\");\n\n      for (let i = 0; i < lines.length; i++) {\n        let currentPair = lines[i].split(\":\");\n        tagslist.push(currentPair[0]);\n        let pairKey = currentPair[0];\n        let pairValue = currentPair[1];\n        newTags[pairKey] = pairValue;\n      }\n\n      this.state.tags = newTags;\n      this.state.tagsList = tagslist;\n      this.setTags(); // Initiate setState so the view will update.\n\n      this.setState({\n        tags: newTags\n      });\n    };\n\n    this.retrunToChooseFile = eventArgs => {\n      this.setState({\n        pageLayout: \"choose\"\n      });\n    };\n  }\n\n  callAPI() {\n    console.log(\"in callApi\");\n    fetch(\"http://localhost:9000/\").then(res => res.text()).then(res => this.arrageFileNamesRecivedFromServer(res));\n  }\n\n  componentWillMount() {\n    this.callAPI();\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676\n      },\n      __self: this\n    }, this.returnPageLayout());\n  }\n\n}\n\nexport default Main; //<div\n//align=\"center\"\n//style={{ backgroundImage: `url(${Background})`, height: \"100vh\" }}\n//>\n//<br></br>\n//<br></br>\n//<h1>\n//  {\" \"}\n//  <b>Welcome to Tags Manager</b>{\" \"}\n//</h1>\n//<br></br>\n//<div>\n//  <h5>\n//    Choose article and configutation file or upload new atricle to the\n//    from local computer\n//  </h5>\n//  <table>\n//    <tr>\n//      <td> Choose an article: </td>\n//      <td>\n//        <select name=\"fileChoser\" id=\"fileChoser\">\n//          {\" \"}\n//          {this.createList(this.state.filesList)}\n//        </select>{\" \"}\n//      </td>\n//    </tr>\n//    <tr>\n//      <td>Choose a configuration file</td>\n//      <td>\n//        <select name=\"conffileChoser\" id=\"conffileChoser\">\n//          {this.createList(this.state.confFileList)}{\" \"}\n//        </select>\n//      </td>\n//    </tr>\n//    <tr>\n//      <td align=\"center\" colspan=\"2\">\n//        <button onClick={this.loadDataAndConfFiles}>\n//          {\" \"}\n//          Load files\n//        </button>\n//      </td>\n//      <td> </td>\n//    </tr>\n//  </table>\n//  <br></br>\n//</div></div>  <p>\n//    Upload New File to Server\n//</p>    <input\n//      type=\"file\"\n//      id=\"text_file\"\n//      onChange={this.handleClickOnUpload}\n//    ></input>\n//  </p>\n//</div>\n//</div><table length=\"100%\">\n//</table>  <tr length=\"100%\">\n//    <td length=\"25%\"> </td>\n//</tr>    <td length=\"50%\">\n//      {\" \"}\n//</td>      <ContextMenuTrigger id=\"some_unique_identifier\">\n//</ContextMenuTrigger>       <div\n//          id=\"text\"\n//          onClickCapture={this.captureHighlightedText}\n//          style={{ backgroundColor: \"white\" }}\n//        >\n//          {this.state.fileContent}\n//        </div>{\" \"}\n//      </ContextMenuTrigger>\n//      <ContextMenu id=\"some_unique_identifier\">\n//        {this.createMenu()}\n//      </ContextMenu>\n//    </td>\n//    <td length=\"25%\"> </td>\n//  </tr>\n//</table>\n//<p>\n//  <button onClick={this.handleSaveFile}> Save Work on System</button>\n//</p>\n//</div>\n// for debug\n//          <dir> startIndex: {this.state.leftIndex} </dir>\n//          <dir> endIndex: {this.state.rightIndex} </dir>\n//          <dir> begining: {this.state.begining} </dir>\n//          <dir> end: {this.state.end} </dir>\n//          <dir> pre: {this.state.preHighlightedText} </dir>\n//          <dir> in: {this.state.highlightedText} </dir>\n//          <dir> post: {this.state.postHighlightedText}</dir>\n//onClick={this.captureHighlightedText}\n\n/**\r\n<p>\r\n            Choose an article\r\n            <input\r\n              type=\"file\"\r\n              id=\"text_file\"\r\n              onChange={this.handleClickOnUpload}\r\n            ></input>\r\n          </p>\r\n          <p>\r\n            Choose Configuration file\r\n            <input\r\n              type=\"file\"\r\n              id=\"config_file\"\r\n              onChange={this.loadConfiguration}\r\n            ></input>\r\n          </p>\r\n           */\n//onDoubleClickCapture={this.captureHighlightedText}","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/main.jsx"],"names":["React","Component","Background","ContextMenu","MenuItem","ContextMenuTrigger","ReactDOM","throwStatement","Main","state","filename","fileContent","fileContentClean","tagbox","formattedparts","tags","tagsList","filesList","confFileList","contextMenu","preHighlightedText","highlightedText","postHighlightedText","isHighlightedTextTagged","apiResponse","pageLayout","arrageFileNamesRecivedFromServer","fileNames","files","split","textFiles","confFiles","setState","console","log","handleClickOnUpload","window","File","FileReader","FileList","Blob","preview","document","getElementById","file","querySelector","reader","textHolder","textFile","type","match","onload","loadFile","innerHTML","readAsText","alert","isSpecialChar","character","charArray","i","length","captureHighlightedText","event","data","getSelection","NaN","leftIndexOfHighlightedChunkAtHisSpan","rightIndexOfHighlightedChunkAtHisSpan","baseOffset","extentOffset","spanOfHighlightedChunk","anchorNode","parentElement","id","indexOfCleanText","formattedtext","currentChunk","tagLength","textlength","cleanText","begining","indexToFindTheHighligtedWordStart","previousChar","textInChunk","baseNode","end","indexToFindTheHighligtedWordEnd","nextChar","preTag","inTag","postTag","substring","leftIndex","rightIndex","addTag","tagName","text","setTags","higlight","regexHiglight","RegExp","closertag","regexclosetag","par","spanIndex","parts","index","test","push","currenttag","rightclosertag","regExpRightcloser","newindex","newstring","innerindex","tagRegex","taggedText","map","part","fontWeight","backgroundColor","reverse","target","result","handleSaveFile","fetch","then","res","createMenu","menu","createList","list","returnPageLayout","page","backgroundImage","height","loadDataAndConfFiles","retrunToChooseFile","eventArgs","value","handleChoosefile","confFile","fileName","endsWith","request","acceptConfigurationFilesFromServer","acceptFilesFromServer","address","method","headers","body","JSON","stringify","response","bla","getReader","conFileContent","newTags","tagslist","lines","currentPair","pairKey","pairValue","callAPI","componentWillMount","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Background from \"../images/sandbackground1.png\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { throwStatement } from \"@babel/types\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    filename: \"\",\r\n    fileContent: \"\",\r\n    fileContentClean: \"\",\r\n    tagbox: \"Enter text to mark\",\r\n    formattedparts: \"\",\r\n    tags: {\r\n      //person: \"yellow\",\r\n      //place: \"red\",\r\n      //bla: \"lightpink\",\r\n      //date: \"blue\",\r\n      //event: \"purple\"\r\n    },\r\n    tagsList: [],\r\n    filesList: [],\r\n    confFileList: [],\r\n    // Context menu\r\n    contextMenu: \"\",\r\n    // Used to keep the text the user marked\r\n    preHighlightedText: \"\",\r\n    highlightedText: \"\",\r\n    postHighlightedText: \"\",\r\n    //    leftIndex: -1,\r\n    //    rightIndex: -1,\r\n    //    begining: -1,\r\n    //    end: -1,\r\n    isHighlightedTextTagged: false,\r\n    apiResponse: \"\",\r\n    pageLayout: \"choose\",\r\n  };\r\n\r\n  callAPI() {\r\n    console.log(\"in callApi\");\r\n    fetch(\"http://localhost:9000/\")\r\n      .then((res) => res.text())\r\n      .then((res) => this.arrageFileNamesRecivedFromServer(res));\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.callAPI();\r\n  }\r\n\r\n  arrageFileNamesRecivedFromServer = (fileNames) => {\r\n    // Saperate the files to text files and configuration files.\r\n    let files = fileNames.split(\"\\n\");\r\n    let textFiles = files[0].split(\",\");\r\n    let confFiles = files[1].split(\",\");\r\n    this.setState({ filesList: textFiles });\r\n    this.setState({ confFileList: confFiles });\r\n    console.log(\"in arrageFileNamesRecivedFromServer\");\r\n  };\r\n\r\n  handleClickOnUpload = () => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      var preview = document.getElementById(\"temporaryPlace\");\r\n      var file = document.querySelector(\"input[id=text_file]\").files[0];\r\n      var reader = new FileReader();\r\n      var textHolder = \"File Content hasnot set\";\r\n\r\n      var textFile = /text.*/;\r\n      if (file.type.match(textFile)) {\r\n        reader.onload = this.loadFile;\r\n      } else {\r\n        preview.innerHTML =\r\n          \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n  };\r\n\r\n  // loadConfiguration = () => {\r\n  //   if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n  //    var preview = document.getElementById(\"temporaryPlace\");\r\n  //   var file = document.querySelector(\"input[id=config_file]\").files[0];\r\n  //   var reader = new FileReader();\r\n  //   var textHolder = \"File Content hasnot set\";\r\n\r\n  //  var textFile = /text.*/;\r\n  //  if (file.type.match(textFile)) {\r\n  //   reader.onload = this.tagsConvert;\r\n  // } else {\r\n  //  preview.innerHTML =\r\n  //   \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n  // }\r\n  // reader.readAsText(file);\r\n  //} else {\r\n  //  alert(\"Your browser is too old to support HTML5 File API\");\r\n  // }\r\n  // };\r\n  //if (file.type.match(textFile)) {\r\n  //  reader.onload = function(event) {\r\n  //    preview.innerHTML = event.target.result;\r\n  //    //this.setState({ fileContent: event.target.result });\r\n  //  };\r\n  //}\r\n  // tagsConvert = (eventTags) => {\r\n  // let conFileContent = eventTags.target.result;\r\n  // let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\r\n  // Helps to create the context menu.\r\n  // let tagslist = [];\r\n\r\n  //let lines = conFileContent.split(\"\\n\");\r\n  //for (let i = 0; i < lines.length; i++) {\r\n  //  let currentPair = lines[i].split(\":\");\r\n  //  tagslist.push(currentPair[0]);\r\n  //  let pairKey = currentPair[0];\r\n  //  let pairValue = currentPair[1];\r\n  //  newTags[pairKey] = pairValue;\r\n  //}\r\n\r\n  //this.state.tags = newTags;\r\n  //this.state.tagsList = tagslist;\r\n  //this.setTags();\r\n  // Initiate setState so the view will update.\r\n  //this.setState({ tags: newTags });\r\n  //};\r\n\r\n  isSpecialChar = (character) => {\r\n    let charArray = [\" \", \"\\n\", \"\\t\", \".\", \",\"];\r\n    for (let i = 0; i < charArray.length; i++) {\r\n      if (charArray[i] == character) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  captureHighlightedText = (event, data) => {\r\n    if (window.getSelection() == NaN) {\r\n      return;\r\n    }\r\n    // The text is seperated to parts.\r\n    // Get the index of the highlited text in his part.\r\n    let leftIndexOfHighlightedChunkAtHisSpan;\r\n    let rightIndexOfHighlightedChunkAtHisSpan;\r\n    if (\r\n      window.getSelection().baseOffset <= window.getSelection().extentOffset\r\n    ) {\r\n      leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n      rightIndexOfHighlightedChunkAtHisSpan = window.getSelection()\r\n        .extentOffset;\r\n    } else if (\r\n      window.getSelection().baseOffset > window.getSelection().extentOffset\r\n    ) {\r\n      leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\r\n      rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n    }\r\n\r\n    // Get the part number the highlited text is in.\r\n    let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\r\n      .id;\r\n\r\n    //calculate the offset from the beggining of the text\r\n    let indexOfCleanText = 0;\r\n    for (let i = 0; i < spanOfHighlightedChunk; i++) {\r\n      //checking chunk if its not start with % we summing the length\r\n      if (this.state.formattedtext[i][0] != \"%\") {\r\n        indexOfCleanText += this.state.formattedtext[i].length;\r\n      } else {\r\n        let currentChunk = this.state.formattedtext[i].split(\"%\");\r\n        let tagLength = currentChunk[1].length;\r\n        let textlength = currentChunk[2].length;\r\n        indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\r\n      }\r\n    }\r\n\r\n    // indexOfCleanTextc contains the location of the first caracter chosen in the text as\r\n    // it in raw text.\r\n\r\n    // Sreaching for the begining of the highlighted word.\r\n    let cleanText = this.state.fileContentClean;\r\n    let begining;\r\n    // If the first chracter is in a begining of a chunk.\r\n    if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\r\n      begining = indexOfCleanText;\r\n    } else {\r\n      let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\r\n      for (\r\n        ;\r\n        indexToFindTheHighligtedWordStart >= 0;\r\n        indexToFindTheHighligtedWordStart--\r\n      ) {\r\n        // we reached the befining of the current paragraph.\r\n        if (indexToFindTheHighligtedWordStart == 0) {\r\n          begining = indexOfCleanText;\r\n          // If we reached a space character.\r\n        } else {\r\n          let previousChar =\r\n            cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1];\r\n          //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\r\n          if (this.isSpecialChar(previousChar)) {\r\n            //  previousChar == \" \" ||\r\n            //  previousChar == \"\\n\" ||\r\n            //  previousChar == \"\\t\"\r\n            begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let textInChunk = window.getSelection().baseNode.data;\r\n    let end;\r\n    //in case of automatic space added by clicking\r\n    if (\r\n      rightIndexOfHighlightedChunkAtHisSpan !=\r\n        leftIndexOfHighlightedChunkAtHisSpan &&\r\n      this.isSpecialChar(\r\n        cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1]\r\n      )\r\n      //(cleanText[\r\n      //  indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\r\n      //] == \" \" ||\r\n      //  cleanText[\r\n      //    indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\r\n      //  ] == \"\\t\" ||\r\n      //  cleanText[\r\n      //    indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1\r\n      //  ] == \"\\n\")\r\n    ) {\r\n      end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\r\n    } else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\r\n      // If the last chracter is in the end of a chunk.\r\n      end = indexOfCleanText + textInChunk.length;\r\n    } else {\r\n      let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\r\n      for (\r\n        ;\r\n        indexToFindTheHighligtedWordEnd <= textInChunk.length;\r\n        indexToFindTheHighligtedWordEnd++\r\n      ) {\r\n        // If we reached the end of the paragraph.\r\n        if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\r\n          end = indexOfCleanText + textInChunk.length;\r\n          // If we reached a white space.\r\n        } else {\r\n          let nextChar =\r\n            cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\r\n          if (this.isSpecialChar(nextChar)) {\r\n            //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\r\n            end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let preTag;\r\n    let inTag;\r\n    let postTag;\r\n\r\n    // If the highlited text is not already tagged.\r\n    if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\r\n      preTag = cleanText.substring(0, begining);\r\n      inTag = cleanText.substring(begining, end);\r\n      postTag = cleanText.substring(end, cleanText.length);\r\n      this.state.isHighlightedTextTagged = false;\r\n      //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\r\n      //preTag = cleanText.substring(0, indexOfCleanText);\r\n      //inTag = cleanText.substring(\r\n      //  indexOfCleanText,\r\n      //  indexOfCleanText + window.getSelection().toString().length\r\n      //);\r\n      //postTag = cleanText.substring(\r\n      //  indexOfCleanText + window.getSelection().toString().length,\r\n      //  cleanText.length\r\n      //);\r\n      //this.state.isHighlightedTextTagged = false;\r\n    } else {\r\n      let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\r\n        \"%\"\r\n      );\r\n      let tagLength = currentChunk[1].length;\r\n      preTag = cleanText.substring(0, indexOfCleanText);\r\n      inTag = cleanText.substring(\r\n        indexOfCleanText + tagLength + 2,\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length\r\n      );\r\n      postTag = cleanText.substring(\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length +\r\n          tagLength +\r\n          3,\r\n        cleanText.length\r\n      );\r\n      this.state.isHighlightedTextTagged = true;\r\n    }\r\n    this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.begining = begining;\r\n    this.state.end = end;\r\n    this.setState({ preHighlightedText: preTag });\r\n    this.setState({ highlightedText: inTag });\r\n    this.setState({ postHighlightedText: postTag });\r\n  };\r\n\r\n  addTag = (event, data) => {\r\n    let tagName = window.getSelection().anchorNode.parentElement.id;\r\n    let text;\r\n    if (tagName != \"no_tag\") {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        \"<\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.highlightedText +\r\n        \"</\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.postHighlightedText;\r\n    } else {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        this.state.highlightedText +\r\n        this.state.postHighlightedText;\r\n    }\r\n    this.state.fileContentClean = text;\r\n    this.setTags();\r\n    this.setState({ fileContentClean: text });\r\n  };\r\n\r\n  setTags = () => {\r\n    let text = this.state.fileContentClean;\r\n    let higlight = \"<[^<]+>\";\r\n    let regexHiglight = RegExp(higlight);\r\n    let closertag = \"</[^<]+>\";\r\n    let regexclosetag = RegExp(closertag);\r\n    let par;\r\n    let spanIndex = 0;\r\n\r\n    //Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let formattedparts = [];\r\n\r\n    for (let index = 0; index < parts.length; index++) {\r\n      //cheking that the current part is not a tag\r\n      if (\r\n        !(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))\r\n      ) {\r\n        if (parts[index] != \"\") formattedparts.push(parts[index]);\r\n      }\r\n      // handeling an open tag\r\n      else {\r\n        let currenttag = parts[index];\r\n        //building the inner tag - cuts inner text\r\n        currenttag = currenttag.substring(1, currenttag.length - 1);\r\n        let rightclosertag = \"</\" + currenttag + \">\";\r\n        let regExpRightcloser = RegExp(rightclosertag);\r\n        //we want to keep running on string until we'll meet the right closer tag\r\n        let newindex = index + 1;\r\n        while (\r\n          !regExpRightcloser.test(parts[newindex]) &&\r\n          newindex < parts.length\r\n        ) {\r\n          newindex++;\r\n        }\r\n        //if the closing tag matches the opening tag found\r\n        if (newindex < parts.length) {\r\n          //builds the new string for injection\r\n          let newstring = \"%\" + currenttag + \"%\";\r\n\r\n          for (\r\n            let innerindex = index + 1;\r\n            innerindex < newindex;\r\n            innerindex++\r\n          ) {\r\n            newstring = newstring + parts[innerindex];\r\n          }\r\n\r\n          formattedparts.push(newstring);\r\n          index = newindex;\r\n        } else {\r\n          //if theres no closing tag to a tag so we copy the opening tag as it is\r\n          formattedparts.push(parts[index]);\r\n        }\r\n      }\r\n    }\r\n\r\n    //console.log(\"correct\");\r\n\r\n    let tagRegex = RegExp(\"%.+%.+\");\r\n    let taggedText = (\r\n      <div>\r\n        {\" \"}\r\n        {formattedparts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            id={i}\r\n            style={\r\n              tagRegex.test(part)\r\n                ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\r\n                  //part.toLowerCase() === higlight.toLowerCase()\r\n                  {\r\n                    fontWeight: \"bold\",\r\n                    backgroundColor: this.state.tags[part.split(\"%\")[1]],\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {part.split(\"%\").reverse()[0]}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n    this.setState({ formattedtext: formattedparts });\r\n    this.setState({ fileContent: taggedText });\r\n  };\r\n\r\n  loadFile = (event) => {\r\n    this.state.fileContent = event.target.result;\r\n    this.state.filename = \"tryUploadFile.txt\";\r\n    this.handleSaveFile(event);\r\n    fetch(\"http://localhost:9000/\")\r\n      .then((res) => res.text())\r\n      .then((res) => this.arrageFileNamesRecivedFromServer(res));\r\n    //  this.fileContent = \"\";\r\n    //  this.fileContentClean = \"\";\r\n    //this.setState({ fileContent: event.target.result });\r\n    //this.setState({ fileContentClean: event.target.result });\r\n    //this.setTags();\r\n  };\r\n\r\n  // highlightText = () => {\r\n  //   let textHolder = this.fileContentClean;\r\n  //   this.setState({\r\n  //     fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\r\n  //   });\r\n  // };\r\n\r\n  //handleChange = event => {\r\n  //  this.setState({ tagbox: event.target.value });\r\n  //};\r\n\r\n  //getHighlightedText = (data, mark) => {\r\n  //  //console.log(this);\r\n  //  let text = data;\r\n  //  let higlight = mark; //this.state.tagbox;\r\n  //  // Split on higlight term and include term into parts, ignore case\r\n  //  let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n  //  let taggedText = (\r\n  //    <div>\r\n  //      {\" \"}\r\n  //      {parts.map((part, i) => (\r\n  //        <span\r\n  //          key={i}\r\n  //          id={i}\r\n  //          style={\r\n  //            part.toLowerCase() === higlight.toLowerCase()\r\n  //              ? {\r\n  //                  fontWeight: \"bold\",\r\n  //                  backgroundColor: this.state.tagbox[part]\r\n  //                }\r\n  //              : {}\r\n  //          }\r\n  //        >\r\n  //          {part}\r\n  //        </span>\r\n  //      ))}{\" \"}\r\n  //    </div>\r\n  //  );\r\n  //  return taggedText;\r\n  //};\r\n  createMenu = () => {\r\n    let menu;\r\n    if (this.state.isHighlightedTextTagged == false) {\r\n      menu = this.state.tagsList.map((part, i) => (\r\n        <MenuItem key={i} id={part} onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id={part} style={{ backgroundColor: \"white\" }}>\r\n            Set as {part}{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      ));\r\n    } else {\r\n      menu = (\r\n        <MenuItem id=\"no_tag\" onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id=\"no_tag\" style={{ backgroundColor: \"white\" }}>\r\n            Remove tag{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      );\r\n    }\r\n    return menu;\r\n  };\r\n\r\n  createList = (list) => {\r\n    return list.map((part, i) => <option value={part}> {part}</option>);\r\n  };\r\n\r\n  returnPageLayout = () => {\r\n    let page = \"\";\r\n    if (this.state.pageLayout == \"choose\") {\r\n      page = (\r\n        <div\r\n          align=\"center\"\r\n          style={{ backgroundImage: `url(${Background})`, height: \"100vh\" }}\r\n        >\r\n          <br></br>\r\n          <br></br>\r\n          <h1>\r\n            {\" \"}\r\n            <b>Welcome to Tags Manager</b>{\" \"}\r\n          </h1>\r\n          <br></br>\r\n          <h5>\r\n            Choose article and choose configutation file or upload new article\r\n            from local computer:\r\n          </h5>\r\n          <table>\r\n            <tr>\r\n              <td> Choose an article: </td>\r\n              <td>\r\n                <select name=\"fileChoser\" id=\"fileChoser\">\r\n                  {\" \"}\r\n                  {this.createList(this.state.filesList)}\r\n                </select>{\" \"}\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td>Choose a configuration file</td>\r\n              <td>\r\n                <select name=\"conffileChoser\" id=\"conffileChoser\">\r\n                  {this.createList(this.state.confFileList)}{\" \"}\r\n                </select>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td align=\"center\" colspan=\"2\">\r\n                <button onClick={this.loadDataAndConfFiles}> Load files</button>\r\n              </td>\r\n              <td> </td>\r\n            </tr>\r\n          </table>\r\n          <br></br>\r\n          <p>\r\n            Upload New File to Server\r\n            <input\r\n              type=\"file\"\r\n              id=\"text_file\"\r\n              onChange={this.handleClickOnUpload}\r\n            ></input>\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      page = (\r\n        <div>\r\n          <table length=\"100%\">\r\n            <tr length=\"100%\">\r\n              <td length=\"25%\"> </td>\r\n              <td length=\"50%\">\r\n                {\" \"}\r\n                <ContextMenuTrigger id=\"some_unique_identifier\">\r\n                  <div\r\n                    id=\"text\"\r\n                    onClickCapture={this.captureHighlightedText}\r\n                    style={{ backgroundColor: \"white\" }}\r\n                  >\r\n                    {this.state.fileContent}\r\n                  </div>{\" \"}\r\n                </ContextMenuTrigger>\r\n                <ContextMenu id=\"some_unique_identifier\">\r\n                  {this.createMenu()}\r\n                </ContextMenu>\r\n              </td>\r\n              <td length=\"25%\"> </td>\r\n            </tr>\r\n          </table>\r\n          <p>\r\n            <button onClick={this.handleSaveFile}> Save Work on System</button>\r\n          </p>\r\n          <p>\r\n            <button onClick={this.retrunToChooseFile}>\r\n              {\" \"}\r\n              Return to Main Menu\r\n            </button>\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n    return page;\r\n  };\r\n  loadDataAndConfFiles = (eventArgs) => {\r\n    var textFile = document.getElementById(\"fileChoser\");\r\n    textFile = textFile.value;\r\n    this.handleChoosefile(textFile);\r\n    var confFile = document.getElementById(\"conffileChoser\");\r\n    confFile = confFile.value;\r\n    this.handleChoosefile(confFile);\r\n    this.setState({ pageLayout: \"edit\" });\r\n  };\r\n\r\n  handleChoosefile = (filename) => {\r\n    var fileName = filename; //eventArgs.currentTarget.innerHTML.trim();\r\n    if (!fileName.endsWith(\".txt\")) {\r\n      var request = \"http://localhost:9000/openConfigurationFile/\" + fileName;\r\n      fetch(request)\r\n        .then((res) => res.text())\r\n        .then((res) => this.acceptConfigurationFilesFromServer(res));\r\n    } else {\r\n      var request = \"http://localhost:9000/openFile/\" + fileName;\r\n      fetch(request)\r\n        .then((res) => res.text())\r\n        .then((res) => this.acceptFilesFromServer(res));\r\n    }\r\n  };\r\n\r\n  handleSaveFile = (eventArgs) => {\r\n    let request = this.state.filename + \"\\n\" + this.state.fileContentClean;\r\n    let address = \"http://localhost:9000/saveFile\";\r\n\r\n    fetch(address, {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        data: this.state.fileContentClean,\r\n        filename: this.state.filename,\r\n      }),\r\n    }).then(function (response) {\r\n      let bla = response.body.getReader();\r\n      console.log();\r\n    });\r\n    //.then(function (response) {\r\n    //console.log(response);\r\n    //});\r\n  };\r\n\r\n  acceptFilesFromServer = (text) => {\r\n    let filename = text.split(\"\\n\", 2);\r\n    //first chunk of text is the name\r\n    this.setState({ filename: filename[0] });\r\n    //the rest of the text\r\n    this.setState({ fileContent: filename[1] });\r\n    this.setState({ fileContentClean: filename[1] });\r\n    this.setTags();\r\n    //note\r\n  };\r\n\r\n  acceptConfigurationFilesFromServer = (text) => {\r\n    let conFileContent = text;\r\n    let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\r\n    // Helps to create the context menu.\r\n    let tagslist = [];\r\n\r\n    let lines = conFileContent.split(\"\\n\");\r\n    for (let i = 0; i < lines.length; i++) {\r\n      let currentPair = lines[i].split(\":\");\r\n      tagslist.push(currentPair[0]);\r\n      let pairKey = currentPair[0];\r\n      let pairValue = currentPair[1];\r\n      newTags[pairKey] = pairValue;\r\n    }\r\n\r\n    this.state.tags = newTags;\r\n    this.state.tagsList = tagslist;\r\n    this.setTags();\r\n    // Initiate setState so the view will update.\r\n    this.setState({ tags: newTags });\r\n  };\r\n\r\n  retrunToChooseFile = (eventArgs) => {\r\n    this.setState({ pageLayout: \"choose\" });\r\n  };\r\n  render() {\r\n    return <React.Fragment>{this.returnPageLayout()}</React.Fragment>;\r\n  }\r\n}\r\nexport default Main;\r\n\r\n//<div\r\n//align=\"center\"\r\n//style={{ backgroundImage: `url(${Background})`, height: \"100vh\" }}\r\n//>\r\n//<br></br>\r\n//<br></br>\r\n//<h1>\r\n//  {\" \"}\r\n//  <b>Welcome to Tags Manager</b>{\" \"}\r\n//</h1>\r\n//<br></br>\r\n//<div>\r\n//  <h5>\r\n//    Choose article and configutation file or upload new atricle to the\r\n//    from local computer\r\n//  </h5>\r\n//  <table>\r\n//    <tr>\r\n//      <td> Choose an article: </td>\r\n//      <td>\r\n//        <select name=\"fileChoser\" id=\"fileChoser\">\r\n//          {\" \"}\r\n//          {this.createList(this.state.filesList)}\r\n//        </select>{\" \"}\r\n//      </td>\r\n//    </tr>\r\n//    <tr>\r\n//      <td>Choose a configuration file</td>\r\n//      <td>\r\n//        <select name=\"conffileChoser\" id=\"conffileChoser\">\r\n//          {this.createList(this.state.confFileList)}{\" \"}\r\n//        </select>\r\n//      </td>\r\n//    </tr>\r\n//    <tr>\r\n//      <td align=\"center\" colspan=\"2\">\r\n//        <button onClick={this.loadDataAndConfFiles}>\r\n//          {\" \"}\r\n//          Load files\r\n//        </button>\r\n//      </td>\r\n//      <td> </td>\r\n//    </tr>\r\n//  </table>\r\n//  <br></br>\r\n//</div></div>  <p>\r\n//    Upload New File to Server\r\n//</p>    <input\r\n//      type=\"file\"\r\n//      id=\"text_file\"\r\n//      onChange={this.handleClickOnUpload}\r\n//    ></input>\r\n//  </p>\r\n//</div>\r\n//</div><table length=\"100%\">\r\n//</table>  <tr length=\"100%\">\r\n//    <td length=\"25%\"> </td>\r\n//</tr>    <td length=\"50%\">\r\n//      {\" \"}\r\n//</td>      <ContextMenuTrigger id=\"some_unique_identifier\">\r\n//</ContextMenuTrigger>       <div\r\n//          id=\"text\"\r\n//          onClickCapture={this.captureHighlightedText}\r\n//          style={{ backgroundColor: \"white\" }}\r\n//        >\r\n//          {this.state.fileContent}\r\n//        </div>{\" \"}\r\n//      </ContextMenuTrigger>\r\n//      <ContextMenu id=\"some_unique_identifier\">\r\n//        {this.createMenu()}\r\n//      </ContextMenu>\r\n//    </td>\r\n//    <td length=\"25%\"> </td>\r\n//  </tr>\r\n//</table>\r\n//<p>\r\n//  <button onClick={this.handleSaveFile}> Save Work on System</button>\r\n//</p>\r\n//</div>\r\n\r\n// for debug\r\n//          <dir> startIndex: {this.state.leftIndex} </dir>\r\n//          <dir> endIndex: {this.state.rightIndex} </dir>\r\n//          <dir> begining: {this.state.begining} </dir>\r\n//          <dir> end: {this.state.end} </dir>\r\n//          <dir> pre: {this.state.preHighlightedText} </dir>\r\n//          <dir> in: {this.state.highlightedText} </dir>\r\n//          <dir> post: {this.state.postHighlightedText}</dir>\r\n\r\n//onClick={this.captureHighlightedText}\r\n\r\n/**\r\n<p>\r\n            Choose an article\r\n            <input\r\n              type=\"file\"\r\n              id=\"text_file\"\r\n              onChange={this.handleClickOnUpload}\r\n            ></input>\r\n          </p>\r\n          <p>\r\n            Choose Configuration file\r\n            <input\r\n              type=\"file\"\r\n              id=\"config_file\"\r\n              onChange={this.loadConfiguration}\r\n            ></input>\r\n          </p>\r\n           */\r\n//onDoubleClickCapture={this.captureHighlightedText}\r\n"]},"metadata":{},"sourceType":"module"}