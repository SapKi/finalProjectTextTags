{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\main.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileContent: \"\",\n      fileContentClean: \"\",\n      tagbox: \"Enter text to mark\"\n    };\n\n    this.hadleClickOnUpload = () => {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        var preview = document.getElementById(\"temporaryPlace\");\n        var file = document.querySelector(\"input[type=file]\").files[0];\n        var reader = new FileReader();\n        var textHolder = \"File Content hasnot set\";\n        var textFile = /text.*/;\n\n        if (file.type.match(textFile)) {\n          reader.onload = function (event) {\n            preview.innerHTML = event.target.result;\n          };\n        } else {\n          preview.innerHTML = \"<span class='error'>It doesn't seem to be a text file!</span>\";\n        }\n\n        reader.readAsText(file);\n      } else {\n        alert(\"Your browser is too old to support HTML5 File API\");\n      }\n\n      textHolder = preview.innerHTML;\n      this.setState({\n        fileContent: textHolder\n      });\n    };\n\n    this.setTags = () => {\n      let text = this.refresh();\n      let higlight = \"<[^<]+>[^<]+</[^<]+>\"; //this.state.tagbox;\n\n      let regexHiglight = RegExp(higlight); //Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let par;\n      console.log(\"parts=\" + parts.length);\n      console.log(parts);\n      let bla = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \" \", parts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        style: regexHiglight.test(part.toLowerCase()) ? //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: \"yellow\"\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, part)), \" \");\n      this.setState({\n        fileContent: bla\n      });\n    };\n\n    this.highlightText = () => {\n      let textHolder = this.refresh();\n      this.setState({\n        fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        tagbox: event.target.value\n      });\n    };\n\n    this.getHighlightedText = (data, mark) => {\n      //console.log(this);\n      let text = data;\n      let higlight = mark; //this.state.tagbox;\n      // Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let bla = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \" \", parts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        style: part.toLowerCase() === higlight.toLowerCase() ? {\n          fontWeight: \"bold\",\n          backgroundColor: \"yellow\"\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, part)), \" \");\n      return bla;\n    };\n\n    this.refresh = () => {\n      // Check wether the information stored at a temporary place or at the application state.\n      // Get the information from the temporary place.\n      var preview = document.getElementById(\"temporaryPlace\");\n      var textHolder; // Checks if the information is in the temporary place.\n\n      if (preview.innerHTML != \"\") {\n        textHolder = preview.innerHTML;\n        preview.innerHTML = \"\";\n      } else {\n        textHolder = this.state.fileContentClean;\n      }\n\n      this.setState({\n        fileContentClean: textHolder\n      });\n      return textHolder;\n    };\n  }\n\n  render() {\n    //<input type=\"file\" onChange={this.hadleClickOnUpload} />\n    //<div> the file chosen </div>\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Text editor\"), React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.hadleClickOnUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"temporaryPlace\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"light\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, this.state.fileContent), React.createElement(\"input\", {\n      id: \"tags\",\n      type: \"text\",\n      height: \"200\",\n      width: \"200\",\n      value: this.state.tagbox,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.highlightText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \" Highlight\"), \"//\", React.createElement(\"button\", {\n      onClick: this.setTags,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, \" Set tags\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }));\n  }\n\n} //<button onClick={this.refresh}> Refresh</button>\n//\n//<input\n//id=\"fileContent\"\n//height=\"1000\"\n//width=\"200\"\n//value={this.state.value}\n//onChange={this.handleChange}\n///>\n//<button onClick={this.hadleClickOnUpload}> Upload file</button>\n//       <button> Save file</button>\n//       <br></br>\n//<input\n//          id=\"tagsPlace\"\n//          height=\"200\"\n//          width=\"200\"\n//          type=\"text\"\n//          value={this.state.fileContent}\n//value={this.state.value}\n//onChange={this.handleChange}\n//        />\n\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/main.jsx"],"names":["React","Component","ReactDOM","throwStatement","Main","state","fileContent","fileContentClean","tagbox","hadleClickOnUpload","window","File","FileReader","FileList","Blob","preview","document","getElementById","file","querySelector","files","reader","textHolder","textFile","type","match","onload","event","innerHTML","target","result","readAsText","alert","setState","setTags","text","refresh","higlight","regexHiglight","RegExp","parts","split","par","console","log","length","bla","map","part","i","test","toLowerCase","fontWeight","backgroundColor","highlightText","getHighlightedText","handleChange","value","data","mark","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { throwStatement } from \"@babel/types\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    fileContent: \"\",\r\n    fileContentClean: \"\",\r\n    tagbox: \"Enter text to mark\"\r\n  };\r\n\r\n  hadleClickOnUpload = () => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      var preview = document.getElementById(\"temporaryPlace\");\r\n      var file = document.querySelector(\"input[type=file]\").files[0];\r\n      var reader = new FileReader();\r\n      var textHolder = \"File Content hasnot set\";\r\n\r\n      var textFile = /text.*/;\r\n      if (file.type.match(textFile)) {\r\n        reader.onload = function(event) {\r\n          preview.innerHTML = event.target.result;\r\n        };\r\n      } else {\r\n        preview.innerHTML =\r\n          \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n\r\n    textHolder = preview.innerHTML;\r\n    this.setState({ fileContent: textHolder });\r\n  };\r\n  //if (file.type.match(textFile)) {\r\n  //  reader.onload = function(event) {\r\n  //    preview.innerHTML = event.target.result;\r\n  //    //this.setState({ fileContent: event.target.result });\r\n  //  };\r\n  //}\r\n\r\n  setTags = () => {\r\n    let text = this.refresh();\r\n    let higlight = \"<[^<]+>[^<]+</[^<]+>\"; //this.state.tagbox;\r\n    let regexHiglight = RegExp(higlight);\r\n\r\n    //Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let par;\r\n    console.log(\"parts=\" + parts.length);\r\n    console.log(parts);\r\n    let bla = (\r\n      <div>\r\n        {\" \"}\r\n        {parts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            style={\r\n              regexHiglight.test(part.toLowerCase())\r\n                ? //part.toLowerCase() === higlight.toLowerCase()\r\n                  { fontWeight: \"bold\", backgroundColor: \"yellow\" }\r\n                : {}\r\n            }\r\n          >\r\n            {part}\r\n          </span>\r\n        ))}{\" \"}\r\n      </div>\r\n    );\r\n    this.setState({ fileContent: bla });\r\n  };\r\n\r\n  highlightText = () => {\r\n    let textHolder = this.refresh();\r\n    this.setState({\r\n      fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\r\n    });\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ tagbox: event.target.value });\r\n  };\r\n\r\n  getHighlightedText = (data, mark) => {\r\n    //console.log(this);\r\n    let text = data;\r\n    let higlight = mark; //this.state.tagbox;\r\n    // Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let bla = (\r\n      <div>\r\n        {\" \"}\r\n        {parts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            style={\r\n              part.toLowerCase() === higlight.toLowerCase()\r\n                ? { fontWeight: \"bold\", backgroundColor: \"yellow\" }\r\n                : {}\r\n            }\r\n          >\r\n            {part}\r\n          </span>\r\n        ))}{\" \"}\r\n      </div>\r\n    );\r\n    return bla;\r\n  };\r\n\r\n  refresh = () => {\r\n    // Check wether the information stored at a temporary place or at the application state.\r\n    // Get the information from the temporary place.\r\n    var preview = document.getElementById(\"temporaryPlace\");\r\n    var textHolder;\r\n\r\n    // Checks if the information is in the temporary place.\r\n    if (preview.innerHTML != \"\") {\r\n      textHolder = preview.innerHTML;\r\n      preview.innerHTML = \"\";\r\n    } else {\r\n      textHolder = this.state.fileContentClean;\r\n    }\r\n\r\n    this.setState({\r\n      fileContentClean: textHolder\r\n    });\r\n\r\n    return textHolder;\r\n  };\r\n\r\n  render() {\r\n    //<input type=\"file\" onChange={this.hadleClickOnUpload} />\r\n    //<div> the file chosen </div>\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Text editor</h1>\r\n        <input type=\"file\" onChange={this.hadleClickOnUpload}></input>\r\n        <br></br>\r\n        <div id=\"temporaryPlace\"></div>\r\n        <div id=\"light\">{this.state.fileContent}</div>\r\n        <input\r\n          id=\"tags\"\r\n          type=\"text\"\r\n          height=\"200\"\r\n          width=\"200\"\r\n          value={this.state.tagbox}\r\n          onChange={this.handleChange}\r\n        />\r\n        <br></br>\r\n        <button onClick={this.highlightText}> Highlight</button>\r\n        //<button onClick={this.setTags}> Set tags</button>\r\n        <br></br>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n//<button onClick={this.refresh}> Refresh</button>\r\n//\r\n//<input\r\n//id=\"fileContent\"\r\n//height=\"1000\"\r\n//width=\"200\"\r\n//value={this.state.value}\r\n//onChange={this.handleChange}\r\n///>\r\n\r\n//<button onClick={this.hadleClickOnUpload}> Upload file</button>\r\n//       <button> Save file</button>\r\n//       <br></br>\r\n//<input\r\n//          id=\"tagsPlace\"\r\n//          height=\"200\"\r\n//          width=\"200\"\r\n//          type=\"text\"\r\n//          value={this.state.fileContent}\r\n//value={this.state.value}\r\n//onChange={this.handleChange}\r\n//        />\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}