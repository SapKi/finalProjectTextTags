{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\taggedTextArea.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\n\nclass taggedTextArea extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Used to keep the text the user marked\n      preHighlightedText: \"\",\n      highlightedText: \"\",\n      postHighlightedText: \"\",\n      preHtmlFormatedText: [],\n      newLineCharacterLength: 1,\n      isHighlightedTextTagged: false,\n      isUpTodate: true\n    };\n\n    this.isSpecialChar = character => {\n      if (character == \"\\n\") {\n        let i = 0;\n      }\n\n      for (let i = 0; i < this.props.specialCharsList.length; i++) {\n        if (this.props.specialCharsList[i] == character) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.setTags = () => {\n      if (this.props.fileContent === \"\") {\n        return;\n      }\n\n      let text = this.props.fileContent;\n      let lines = this.separateIntoLines(text); // Work on each line seperately.\n      // Convert every line to a format that later will be converted,\n      // to an html format.\n\n      let convertedLine = \"\";\n      let convertedLines = [];\n      let htmlFormLines = [];\n\n      for (let index = 0; index < lines.length; index++) {\n        convertedLine = this.separateTaggedFromUntaggedText(lines[index]);\n        convertedLines.push(convertedLine);\n        htmlFormLines.push(this.makeHtmlForm(index, convertedLine));\n      }\n\n      this.state.preHtmlFormatedText = convertedLines;\n      let htmlForm = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, htmlFormLines.map((line, i) => React.createElement(\"span\", {\n        key: i,\n        id: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, line, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }));\n      return htmlForm;\n    };\n\n    this.separateIntoLines = text => {\n      // Fist check if the new line character is \\n\\r\n      let regexIsSpace = RegExp(\"\\r\\n\");\n      let lines = text.split(regexIsSpace);\n      this.state.newLineCharacterLength = 2; // If the new line character is not \\n\\r\n\n      if (lines.length == 1) {\n        // The new line character is \\n or \\r.\n        regexIsSpace = RegExp(\"\\n|\\r\");\n        lines = text.split(regexIsSpace);\n        this.state.newLineCharacterLength = 1;\n      }\n\n      return lines;\n    };\n\n    this.separateTaggedFromUntaggedText = text => {\n      let higlight = \"<[^<]+>\";\n      let regexIstag = RegExp(higlight);\n      let regexIsCloseTag = RegExp(\"</[^<]+>\");\n      let formattedparts = []; // Seperates plain text from tags.\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\")); // Handle each part.\n\n      for (let index = 0; index < parts.length; index++) {\n        // If the tag is a plain text.\n        // (or a closing tag without an opening tag matches it).\n        if (!regexIstag.test(parts[index]) && parts[index] != \"\" || regexIsCloseTag.test(parts[index])) {\n          // Add the text to the proccesd text.\n          formattedparts.push(parts[index]);\n        } // If the tag is an open tag.\n        else if (regexIstag.test(parts[index]) && !regexIsCloseTag.test(parts[index])) {\n            // Create a regex that checks for the closer tag matches the current tag.\n            let currenttag = parts[index].substring(1, parts[index].length - 1);\n            let regexIsSearchedTag = RegExp(\"</\" + currenttag + \">\"); // Search the closer tag matches the currnt tag.\n\n            let serchingIndex = index + 1;\n\n            while (!regexIsSearchedTag.test(parts[serchingIndex]) && serchingIndex < parts.length) {\n              serchingIndex++;\n            } // If a matching closer tag was not found.\n\n\n            if (serchingIndex >= parts.length) {\n              // Consider the tag as a plain text.\n              // Add the text to the proccesd text.\n              formattedparts.push(parts[index]);\n            } // If a matching closer tag was found.\n            else {\n                // Make a string contains all the plain text surrounded by the tag.\n                let currentTaggedText = \"\";\n\n                for (let copyingIndex = index + 1; copyingIndex < serchingIndex; copyingIndex++) {\n                  currentTaggedText += parts[copyingIndex];\n                } // Add the text to the proccesd text, with a prefix that tells the tag name.\n\n\n                formattedparts.push(\"%\" + currenttag + \"%\" + currentTaggedText);\n                index = serchingIndex;\n              }\n          }\n      }\n\n      return formattedparts;\n    };\n\n    this.makeHtmlForm = (lineNumber, line) => {\n      let regexIsTagged = RegExp(\"%.+%.+\");\n      let htmlForm = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \" \", line.map((part, i) => React.createElement(\"span\", {\n        key: lineNumber + \",\" + i,\n        id: lineNumber + \",\" + i,\n        style: regexIsTagged.test(part) ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\n        //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: this.props.tagsAndColors[part.split(\"%\")[1]]\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, part.split(\"%\").reverse()[0])));\n      return htmlForm;\n    };\n\n    this.addTag = (event, data) => {\n      this.state.isUpTodate = false;\n      let tagName = window.getSelection().anchorNode.parentElement.id;\n      let text;\n\n      if (tagName != \"no_tag\") {\n        text = this.state.preHighlightedText + \"<\" + tagName + \">\" + this.state.highlightedText + \"</\" + tagName + \">\" + this.state.postHighlightedText;\n      } else {\n        text = this.state.preHighlightedText + this.state.highlightedText + this.state.postHighlightedText;\n      }\n\n      this.props.updateFileContent(text);\n      this.state.preHighlightedText = \"\";\n      this.state.higlight = \"\";\n      this.state.postHighlightedText = \"\";\n    };\n\n    this.captureHighlightedText = (event, data) => {\n      if (window.getSelection() == NaN) {\n        return;\n      }\n\n      let base = window.getSelection().baseOffset;\n      let extent = window.getSelection().extentOffset;\n      let formatedText = this.state.preHtmlFormatedText; // Get the part number the highlited text is in.\n\n      let lineAndparagraph = window.getSelection().anchorNode.parentElement.id;\n      lineAndparagraph = lineAndparagraph.split(\",\");\n      console.log(\"lineAndparagraph = \" + lineAndparagraph);\n      let line = lineAndparagraph[0];\n      let paragraph = lineAndparagraph[1];\n      console.log(\"line = \" + line);\n      console.log(\"paragraph = \" + paragraph); // If the highlighted text is not valid.\n\n      if (typeof line === \"undefined\" || typeof paragraph === \"undefined\" || typeof lineAndparagraph === \"undefined\" || line === \"\" || paragraph === \"\" || lineAndparagraph === \"\") {\n        return;\n      }\n\n      let borders = this.calcBordersOfHighlightedText(base, extent);\n      borders = this.extendHighlightToEntireWord(formatedText, line, paragraph, borders[0], borders[1]);\n      let offset = this.clacOfsetFromTheStartOfTheText(formatedText, line, paragraph);\n      borders[0] += offset;\n      borders[1] += offset;\n      let preTag;\n      let inTag;\n      let postTag;\n      let fileContent = this.props.fileContent; // If the highlited text is not already tagged.\n\n      if (formatedText[line][paragraph][0] != \"%\") {\n        preTag = fileContent.substring(0, borders[0]);\n        inTag = fileContent.substring(borders[0], borders[1]);\n        postTag = fileContent.substring(borders[1], fileContent.length);\n        this.state.isHighlightedTextTagged = false;\n      } else {\n        let textParagraph = formatedText[line][paragraph].split(\"%\");\n        let tagLength = textParagraph[1].length;\n        preTag = fileContent.substring(0, offset);\n        inTag = fileContent.substring(offset + tagLength + 2, offset + tagLength + 2 + textParagraph[2].length);\n        postTag = fileContent.substring(offset + textParagraph[2].length + 2 * tagLength + 5, fileContent.length);\n        this.state.isHighlightedTextTagged = true;\n      }\n\n      this.state.leftIndex = borders[0] - offset;\n      this.state.rightIndex = borders[1] - offset;\n      this.state.begining = borders[0];\n      this.state.end = borders[1];\n      this.setState({\n        preHighlightedText: preTag\n      });\n      this.setState({\n        highlightedText: inTag\n      });\n      this.setState({\n        postHighlightedText: postTag\n      });\n    };\n\n    this.calcBordersOfHighlightedText = (base, extent) => {\n      let leftBorder;\n      let rightBorder;\n\n      if (base <= extent) {\n        leftBorder = base;\n        rightBorder = extent;\n      } else if (base > extent) {\n        leftBorder = extent;\n        rightBorder = base;\n      }\n\n      return [leftBorder, rightBorder];\n    };\n\n    this.extendHighlightToEntireWord = (text, line, paragraph, leftIndex, rightIndex) => {\n      let textParagraph = text[line][paragraph]; // Sreaching for the begining of the highlighted word.\n\n      let begining; // If the first chracter is in a begining of a chunk.\n\n      if (leftIndex == 0) {\n        begining = leftIndex;\n      } else {\n        for (let index = leftIndex; index >= 0; index--) {\n          // we reached the begining of the current paragraph.\n          if (index == 0) {\n            begining = index; // If we reached a space character.\n          } else {\n            let previousChar = textParagraph[index - 1]; //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\n\n            if (this.isSpecialChar(previousChar)) {\n              //  previousChar == \" \" ||\n              //  previousChar == \"\\n\" ||\n              //  previousChar == \"\\t\"\n              begining = index;\n              break;\n            }\n          }\n        }\n      }\n\n      let end; //in case of automatic space added by clicking\n\n      if (rightIndex != leftIndex && this.isSpecialChar(textParagraph[rightIndex - 1])) {\n        end = rightIndex - 1;\n      } else if (rightIndex == textParagraph.length) {\n        // If the last chracter is in the end of a chunk.\n        end = rightIndex;\n      } else {\n        for (let index = rightIndex; index <= textParagraph.length; index++) {\n          // If we reached the end of the paragraph.\n          if (index == textParagraph.length) {\n            end = index; // If we reached a white space.\n          } else {\n            let nextChar = textParagraph[index];\n\n            if (this.isSpecialChar(nextChar)) {\n              end = index;\n              break;\n            }\n          }\n        }\n      }\n\n      return [begining, end];\n    };\n\n    this.clacOfsetFromTheStartOfTheText = (text, line, paragraph) => {\n      //calculate the offset from the beggining of the text\n      // Calc the number of letter in the previous lines.\n      let offset = 0; // Add the number of new line character to the offset\n\n      offset += line * this.state.newLineCharacterLength; // Go through the text lines.\n\n      for (let i = 0; i <= line; i++) {\n        // Go through the partition of the line.\n        // If the line is the line where the highlighted text is in, run until\n        // the part where the highlighted text is found.\n        let end = text[i].length;\n\n        if (i == line) {\n          end = paragraph;\n        }\n\n        for (let j = 0; j < end; j++) {\n          // In case the current part does not contain highlighted text.\n          if (!text[i][j].startsWith(\"%\")) {\n            offset += text[i][j].length;\n          } // In case the current part contains highlighted text.\n          else {\n              let currentPartText = text[i][j].split(\"%\");\n              let tagLength = currentPartText[1].length;\n              let textlength = currentPartText[2].length; // 2 * tagLength + 5:\n              // 2 * tagLength: stands for the 2 appearance of the tag's name, at the text.\n              // (One appearance of the tag in the opening tag and the second in the closing tag).\n              // 5: stands for the characters : <> </>, <> appear in the opening tag,\n              // and </> in the closing tag.\n\n              offset += textlength + 2 * tagLength + 5;\n            }\n        }\n      }\n\n      return offset; // Add to the calculted offset the highlighted text offset from the beginng of it's part\n      // in the line the text is found.\n      //.offset += leftBorder;\n    };\n\n    this.render = () => {\n      let page = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 436\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        length: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 437\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        length: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 438\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        length: \"25%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 439\n        },\n        __self: this\n      }, \" \"), React.createElement(\"td\", {\n        length: \"50%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 440\n        },\n        __self: this\n      }, \" \", React.createElement(ContextMenuTrigger, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 442\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"text\",\n        onClickCapture: this.captureHighlightedText,\n        style: {\n          backgroundColor: \"white\",\n          borderStyle: \"solid\",\n          height: \"8cm\",\n          width: \"30cm\",\n          overflowY: \"scroll\",\n          overflowX: \"hidden\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443\n        },\n        __self: this\n      }, this.setTags(this.props.fileContent)), \" \"), React.createElement(ContextMenu, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458\n        },\n        __self: this\n      }, this.createMenu())), React.createElement(\"td\", {\n        length: \"25%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462\n        },\n        __self: this\n      }, \" \"))));\n      return page;\n    };\n\n    this.createMenu = () => {\n      let menu;\n\n      if (this.state.isHighlightedTextTagged == false) {\n        menu = this.props.tagsList.map((part, i) => React.createElement(MenuItem, {\n          key: i,\n          id: part,\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 474\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: part,\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 476\n          },\n          __self: this\n        }, \"Set as \", part, \" \")));\n      } else {\n        menu = React.createElement(MenuItem, {\n          id: \"no_tag\",\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 483\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: \"no_tag\",\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 485\n          },\n          __self: this\n        }, \"Remove tag\", \" \"));\n      }\n\n      return menu;\n    };\n\n    this.createList = list => {\n      return list.map((part, i) => React.createElement(\"option\", {\n        value: part,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498\n        },\n        __self: this\n      }, \" \", part));\n    };\n  }\n\n  rrender() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \" \", React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, \"hiiiii \"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }, \" \", this.props.fileContent, \" \"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, this.props.tags));\n  }\n\n}\n\nexport default taggedTextArea;","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/taggedTextArea.jsx"],"names":["React","Component","ReactDOM","ContextMenu","MenuItem","ContextMenuTrigger","taggedTextArea","state","preHighlightedText","highlightedText","postHighlightedText","preHtmlFormatedText","newLineCharacterLength","isHighlightedTextTagged","isUpTodate","isSpecialChar","character","i","props","specialCharsList","length","setTags","fileContent","text","lines","separateIntoLines","convertedLine","convertedLines","htmlFormLines","index","separateTaggedFromUntaggedText","push","makeHtmlForm","htmlForm","map","line","regexIsSpace","RegExp","split","higlight","regexIstag","regexIsCloseTag","formattedparts","parts","test","currenttag","substring","regexIsSearchedTag","serchingIndex","currentTaggedText","copyingIndex","lineNumber","regexIsTagged","part","fontWeight","backgroundColor","tagsAndColors","reverse","addTag","event","data","tagName","window","getSelection","anchorNode","parentElement","id","updateFileContent","captureHighlightedText","NaN","base","baseOffset","extent","extentOffset","formatedText","lineAndparagraph","console","log","paragraph","borders","calcBordersOfHighlightedText","extendHighlightToEntireWord","offset","clacOfsetFromTheStartOfTheText","preTag","inTag","postTag","textParagraph","tagLength","leftIndex","rightIndex","begining","end","setState","leftBorder","rightBorder","previousChar","nextChar","j","startsWith","currentPartText","textlength","render","page","borderStyle","height","width","overflowY","overflowX","createMenu","menu","tagsList","createList","list","rrender","tags"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\n\r\nclass taggedTextArea extends Component {\r\n  state = {\r\n    // Used to keep the text the user marked\r\n    preHighlightedText: \"\",\r\n    highlightedText: \"\",\r\n    postHighlightedText: \"\",\r\n\r\n    preHtmlFormatedText: [],\r\n    newLineCharacterLength: 1,\r\n\r\n    isHighlightedTextTagged: false,\r\n    isUpTodate: true,\r\n  };\r\n\r\n  isSpecialChar = (character) => {\r\n    if (character == \"\\n\") {\r\n      let i = 0;\r\n    }\r\n    for (let i = 0; i < this.props.specialCharsList.length; i++) {\r\n      if (this.props.specialCharsList[i] == character) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // This funtiuos reads the clean text (with the tags), and turns it to the\r\n  // form which the text is representd to the user.\r\n  // separateTaggedFromUntaggedText\r\n  setTags = () => {\r\n    if (this.props.fileContent === \"\") {\r\n      return;\r\n    }\r\n\r\n    let text = this.props.fileContent;\r\n    let lines = this.separateIntoLines(text);\r\n\r\n    // Work on each line seperately.\r\n    // Convert every line to a format that later will be converted,\r\n    // to an html format.\r\n    let convertedLine = \"\";\r\n    let convertedLines = [];\r\n    let htmlFormLines = [];\r\n    for (let index = 0; index < lines.length; index++) {\r\n      convertedLine = this.separateTaggedFromUntaggedText(lines[index]);\r\n      convertedLines.push(convertedLine);\r\n      htmlFormLines.push(this.makeHtmlForm(index, convertedLine));\r\n    }\r\n\r\n    this.state.preHtmlFormatedText = convertedLines;\r\n\r\n    let htmlForm = (\r\n      <React.Fragment>\r\n        {htmlFormLines.map((line, i) => (\r\n          <span key={i} id={i}>\r\n            {line}\r\n            <br />\r\n          </span>\r\n        ))}\r\n        <br />\r\n      </React.Fragment>\r\n    );\r\n\r\n    return htmlForm;\r\n  };\r\n\r\n  separateIntoLines = (text) => {\r\n    // Fist check if the new line character is \\n\\r\r\n    let regexIsSpace = RegExp(\"\\r\\n\");\r\n    let lines = text.split(regexIsSpace);\r\n    this.state.newLineCharacterLength = 2;\r\n\r\n    // If the new line character is not \\n\\r\r\n    if (lines.length == 1) {\r\n      // The new line character is \\n or \\r.\r\n      regexIsSpace = RegExp(\"\\n|\\r\");\r\n      lines = text.split(regexIsSpace);\r\n      this.state.newLineCharacterLength = 1;\r\n    }\r\n\r\n    return lines;\r\n  };\r\n\r\n  separateTaggedFromUntaggedText = (text) => {\r\n    let higlight = \"<[^<]+>\";\r\n    let regexIstag = RegExp(higlight);\r\n    let regexIsCloseTag = RegExp(\"</[^<]+>\");\r\n    let formattedparts = [];\r\n\r\n    // Seperates plain text from tags.\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n\r\n    // Handle each part.\r\n    for (let index = 0; index < parts.length; index++) {\r\n      // If the tag is a plain text.\r\n      // (or a closing tag without an opening tag matches it).\r\n      if (\r\n        (!regexIstag.test(parts[index]) && parts[index] != \"\") ||\r\n        regexIsCloseTag.test(parts[index])\r\n      ) {\r\n        // Add the text to the proccesd text.\r\n        formattedparts.push(parts[index]);\r\n      }\r\n      // If the tag is an open tag.\r\n      else if (\r\n        regexIstag.test(parts[index]) &&\r\n        !regexIsCloseTag.test(parts[index])\r\n      ) {\r\n        // Create a regex that checks for the closer tag matches the current tag.\r\n        let currenttag = parts[index].substring(1, parts[index].length - 1);\r\n        let regexIsSearchedTag = RegExp(\"</\" + currenttag + \">\");\r\n\r\n        // Search the closer tag matches the currnt tag.\r\n        let serchingIndex = index + 1;\r\n        while (\r\n          !regexIsSearchedTag.test(parts[serchingIndex]) &&\r\n          serchingIndex < parts.length\r\n        ) {\r\n          serchingIndex++;\r\n        }\r\n\r\n        // If a matching closer tag was not found.\r\n        if (serchingIndex >= parts.length) {\r\n          // Consider the tag as a plain text.\r\n          // Add the text to the proccesd text.\r\n          formattedparts.push(parts[index]);\r\n        }\r\n        // If a matching closer tag was found.\r\n        else {\r\n          // Make a string contains all the plain text surrounded by the tag.\r\n          let currentTaggedText = \"\";\r\n          for (\r\n            let copyingIndex = index + 1;\r\n            copyingIndex < serchingIndex;\r\n            copyingIndex++\r\n          ) {\r\n            currentTaggedText += parts[copyingIndex];\r\n          }\r\n\r\n          // Add the text to the proccesd text, with a prefix that tells the tag name.\r\n          formattedparts.push(\"%\" + currenttag + \"%\" + currentTaggedText);\r\n          index = serchingIndex;\r\n        }\r\n      }\r\n    }\r\n\r\n    return formattedparts;\r\n  };\r\n\r\n  makeHtmlForm = (lineNumber, line) => {\r\n    let regexIsTagged = RegExp(\"%.+%.+\");\r\n    let htmlForm = (\r\n      <React.Fragment>\r\n        {\" \"}\r\n        {line.map((part, i) => (\r\n          <span\r\n            key={lineNumber + \",\" + i}\r\n            id={lineNumber + \",\" + i}\r\n            style={\r\n              regexIsTagged.test(part)\r\n                ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\r\n                  //part.toLowerCase() === higlight.toLowerCase()\r\n                  {\r\n                    fontWeight: \"bold\",\r\n                    backgroundColor: this.props.tagsAndColors[\r\n                      part.split(\"%\")[1]\r\n                    ],\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {part.split(\"%\").reverse()[0]}\r\n          </span>\r\n        ))}\r\n      </React.Fragment>\r\n    );\r\n\r\n    return htmlForm;\r\n  };\r\n\r\n  // When a user Highlights text segment and choose to tag that segment,\r\n  // this function is called.\r\n  // Tthe funtion update the whole text so the highlight segment will be\r\n  // serroiunded by a tag.\r\n  addTag = (event, data) => {\r\n    this.state.isUpTodate = false;\r\n    let tagName = window.getSelection().anchorNode.parentElement.id;\r\n    let text;\r\n    if (tagName != \"no_tag\") {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        \"<\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.highlightedText +\r\n        \"</\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.postHighlightedText;\r\n    } else {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        this.state.highlightedText +\r\n        this.state.postHighlightedText;\r\n    }\r\n\r\n    this.props.updateFileContent(text);\r\n\r\n    this.state.preHighlightedText = \"\";\r\n    this.state.higlight = \"\";\r\n    this.state.postHighlightedText = \"\";\r\n  };\r\n\r\n  captureHighlightedText = (event, data) => {\r\n    if (window.getSelection() == NaN) {\r\n      return;\r\n    }\r\n\r\n    let base = window.getSelection().baseOffset;\r\n    let extent = window.getSelection().extentOffset;\r\n    let formatedText = this.state.preHtmlFormatedText;\r\n\r\n    // Get the part number the highlited text is in.\r\n    let lineAndparagraph = window.getSelection().anchorNode.parentElement.id;\r\n    lineAndparagraph = lineAndparagraph.split(\",\");\r\n    console.log(\"lineAndparagraph = \" + lineAndparagraph);\r\n    let line = lineAndparagraph[0];\r\n    let paragraph = lineAndparagraph[1];\r\n\r\n    console.log(\"line = \" + line);\r\n    console.log(\"paragraph = \" + paragraph);\r\n\r\n    // If the highlighted text is not valid.\r\n    if (\r\n      typeof line === \"undefined\" ||\r\n      typeof paragraph === \"undefined\" ||\r\n      typeof lineAndparagraph === \"undefined\" ||\r\n      line === \"\" ||\r\n      paragraph === \"\" ||\r\n      lineAndparagraph === \"\"\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let borders = this.calcBordersOfHighlightedText(base, extent);\r\n    borders = this.extendHighlightToEntireWord(\r\n      formatedText,\r\n      line,\r\n      paragraph,\r\n      borders[0],\r\n      borders[1]\r\n    );\r\n\r\n    let offset = this.clacOfsetFromTheStartOfTheText(\r\n      formatedText,\r\n      line,\r\n      paragraph\r\n    );\r\n\r\n    borders[0] += offset;\r\n    borders[1] += offset;\r\n\r\n    let preTag;\r\n    let inTag;\r\n    let postTag;\r\n\r\n    let fileContent = this.props.fileContent;\r\n\r\n    // If the highlited text is not already tagged.\r\n    if (formatedText[line][paragraph][0] != \"%\") {\r\n      preTag = fileContent.substring(0, borders[0]);\r\n      inTag = fileContent.substring(borders[0], borders[1]);\r\n      postTag = fileContent.substring(borders[1], fileContent.length);\r\n      this.state.isHighlightedTextTagged = false;\r\n    } else {\r\n      let textParagraph = formatedText[line][paragraph].split(\"%\");\r\n      let tagLength = textParagraph[1].length;\r\n      preTag = fileContent.substring(0, offset);\r\n      inTag = fileContent.substring(\r\n        offset + tagLength + 2,\r\n        offset + tagLength + 2 + textParagraph[2].length\r\n      );\r\n      postTag = fileContent.substring(\r\n        offset + textParagraph[2].length + 2 * tagLength + 5,\r\n        fileContent.length\r\n      );\r\n      this.state.isHighlightedTextTagged = true;\r\n    }\r\n\r\n    this.state.leftIndex = borders[0] - offset;\r\n    this.state.rightIndex = borders[1] - offset;\r\n    this.state.begining = borders[0];\r\n    this.state.end = borders[1];\r\n    this.setState({ preHighlightedText: preTag });\r\n    this.setState({ highlightedText: inTag });\r\n    this.setState({ postHighlightedText: postTag });\r\n  };\r\n\r\n  calcBordersOfHighlightedText = (base, extent) => {\r\n    let leftBorder;\r\n    let rightBorder;\r\n\r\n    if (base <= extent) {\r\n      leftBorder = base;\r\n      rightBorder = extent;\r\n    } else if (base > extent) {\r\n      leftBorder = extent;\r\n      rightBorder = base;\r\n    }\r\n\r\n    return [leftBorder, rightBorder];\r\n  };\r\n\r\n  extendHighlightToEntireWord = (\r\n    text,\r\n    line,\r\n    paragraph,\r\n    leftIndex,\r\n    rightIndex\r\n  ) => {\r\n    let textParagraph = text[line][paragraph];\r\n\r\n    // Sreaching for the begining of the highlighted word.\r\n    let begining;\r\n    // If the first chracter is in a begining of a chunk.\r\n    if (leftIndex == 0) {\r\n      begining = leftIndex;\r\n    } else {\r\n      for (let index = leftIndex; index >= 0; index--) {\r\n        // we reached the begining of the current paragraph.\r\n        if (index == 0) {\r\n          begining = index;\r\n          // If we reached a space character.\r\n        } else {\r\n          let previousChar = textParagraph[index - 1];\r\n          //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\r\n          if (this.isSpecialChar(previousChar)) {\r\n            //  previousChar == \" \" ||\r\n            //  previousChar == \"\\n\" ||\r\n            //  previousChar == \"\\t\"\r\n            begining = index;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let end;\r\n    //in case of automatic space added by clicking\r\n    if (\r\n      rightIndex != leftIndex &&\r\n      this.isSpecialChar(textParagraph[rightIndex - 1])\r\n    ) {\r\n      end = rightIndex - 1;\r\n    } else if (rightIndex == textParagraph.length) {\r\n      // If the last chracter is in the end of a chunk.\r\n      end = rightIndex;\r\n    } else {\r\n      for (let index = rightIndex; index <= textParagraph.length; index++) {\r\n        // If we reached the end of the paragraph.\r\n        if (index == textParagraph.length) {\r\n          end = index;\r\n          // If we reached a white space.\r\n        } else {\r\n          let nextChar = textParagraph[index];\r\n          if (this.isSpecialChar(nextChar)) {\r\n            end = index;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return [begining, end];\r\n  };\r\n\r\n  clacOfsetFromTheStartOfTheText = (text, line, paragraph) => {\r\n    //calculate the offset from the beggining of the text\r\n    // Calc the number of letter in the previous lines.\r\n    let offset = 0;\r\n\r\n    // Add the number of new line character to the offset\r\n    offset += line * this.state.newLineCharacterLength;\r\n\r\n    // Go through the text lines.\r\n    for (let i = 0; i <= line; i++) {\r\n      // Go through the partition of the line.\r\n      // If the line is the line where the highlighted text is in, run until\r\n      // the part where the highlighted text is found.\r\n      let end = text[i].length;\r\n      if (i == line) {\r\n        end = paragraph;\r\n      }\r\n      for (let j = 0; j < end; j++) {\r\n        // In case the current part does not contain highlighted text.\r\n        if (!text[i][j].startsWith(\"%\")) {\r\n          offset += text[i][j].length;\r\n        }\r\n        // In case the current part contains highlighted text.\r\n        else {\r\n          let currentPartText = text[i][j].split(\"%\");\r\n          let tagLength = currentPartText[1].length;\r\n          let textlength = currentPartText[2].length;\r\n          // 2 * tagLength + 5:\r\n          // 2 * tagLength: stands for the 2 appearance of the tag's name, at the text.\r\n          // (One appearance of the tag in the opening tag and the second in the closing tag).\r\n          // 5: stands for the characters : <> </>, <> appear in the opening tag,\r\n          // and </> in the closing tag.\r\n          offset += textlength + 2 * tagLength + 5;\r\n        }\r\n      }\r\n    }\r\n\r\n    return offset;\r\n\r\n    // Add to the calculted offset the highlighted text offset from the beginng of it's part\r\n    // in the line the text is found.\r\n    //.offset += leftBorder;\r\n  };\r\n\r\n  rrender() {\r\n    return (\r\n      <React.Fragment>\r\n        {\" \"}\r\n        <h1>hiiiii </h1>\r\n        <h1> {this.props.fileContent} </h1>\r\n        <h1>{this.props.tags}</h1>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  render = () => {\r\n    let page = (\r\n      <div>\r\n        <table length=\"100%\">\r\n          <tr length=\"100%\">\r\n            <td length=\"25%\"> </td>\r\n            <td length=\"50%\">\r\n              {\" \"}\r\n              <ContextMenuTrigger id=\"some_unique_identifier\">\r\n                <div\r\n                  id=\"text\"\r\n                  onClickCapture={this.captureHighlightedText}\r\n                  style={{\r\n                    backgroundColor: \"white\",\r\n                    borderStyle: \"solid\",\r\n                    height: \"8cm\",\r\n                    width: \"30cm\",\r\n                    overflowY: \"scroll\",\r\n                    overflowX: \"hidden\",\r\n                  }}\r\n                >\r\n                  {this.setTags(this.props.fileContent)}\r\n                </div>{\" \"}\r\n              </ContextMenuTrigger>\r\n              <ContextMenu id=\"some_unique_identifier\">\r\n                {this.createMenu()}\r\n              </ContextMenu>\r\n            </td>\r\n            <td length=\"25%\"> </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    );\r\n    return page;\r\n  };\r\n\r\n  createMenu = () => {\r\n    let menu;\r\n    if (this.state.isHighlightedTextTagged == false) {\r\n      menu = this.props.tagsList.map((part, i) => (\r\n        <MenuItem key={i} id={part} onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id={part} style={{ backgroundColor: \"white\" }}>\r\n            Set as {part}{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      ));\r\n    } else {\r\n      menu = (\r\n        <MenuItem id=\"no_tag\" onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id=\"no_tag\" style={{ backgroundColor: \"white\" }}>\r\n            Remove tag{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      );\r\n    }\r\n    return menu;\r\n  };\r\n\r\n  // Gets a list of string and make a drop down option list of them.\r\n  // Creates only the list of the drop down list <option>\r\n  // and not the <select> drop down list itself.\r\n  createList = (list) => {\r\n    return list.map((part, i) => <option value={part}> {part}</option>);\r\n  };\r\n}\r\n\r\nexport default taggedTextArea;\r\n"]},"metadata":{},"sourceType":"module"}