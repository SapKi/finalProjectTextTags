{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\main.jsx\";\nimport React, { Component } from \"react\";\nimport Background from \"../images/backgroundabout.jpg\";\nimport logo from \"../images/logo.png\";\nimport biulogo from \"../images/biulogo.png\";\nimport TaggedTextArea from \"./taggedTextArea\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport ReactDOM from \"react-dom\";\nimport { throwStatement } from \"@babel/types\";\nimport \"react-s-alert/dist/s-alert-default.css\";\nimport Alert from \"react-s-alert\";\nimport \"react-s-alert/dist/s-alert-default.css\";\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\"; //display: \"none\",\n//  fontFamily: \"Guttman Hatzvi\",\n//  width: \"auto\",\n//  height: \"25cm\",\n//  overflow: \"scroll\",\n//  fontSize: \"medium\",\n//  overflowY: \"scroll\",\n//positionY: \"absolute\",\n//positionX: \"absolute\",\n//width: \"auto\",\n//height: \"100%\",\n//margin: \"auto\",\n\nconst divStyle = {\n  color: \"#5B6676\",\n  fontSize: \"medium\",\n  fontFamily: \"Arial\",\n  backgroundSize: \"contain\",\n  overflowX: \"hidden\",\n  height: \"100vh\",\n  background: \"url(shutterstock_125995700.jpg)\",\n  backgroundImage: \"url(\".concat(Background, \")\")\n};\nconst buttonStyle = {\n  backgroundColor: \"#74CDD1\"\n}; // backgroundSize: \"100%\",\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filename: \"\",\n      conffilename: \"\",\n      fileContent: \"\",\n      fileContentClean: \"\",\n      fileToUploadName: \"\",\n      fileToUploadContent: \"\",\n      newlyUploadedFileName: \"\",\n      formattedparts: \"\",\n      tagsAndColors: {//person: \"yellow\",\n        //place: \"red\",\n        //bla: \"lightpink\",\n        //date: \"blue\",\n        //event: \"purple\"\n      },\n      configurationFileContentClean: \"\",\n      tagsList: [],\n      filesList: [],\n      confFileList: [],\n      specialCharsList: [],\n      // Context menu\n      contextMenu: \"\",\n      // Used to keep the text the user marked\n      preHighlightedText: \"\",\n      highlightedText: \"\",\n      postHighlightedText: \"\",\n      //    leftIndex: -1,\n      //    rightIndex: -1,\n      //    begining: -1,\n      //    end: -1,\n      isHighlightedTextTagged: false,\n      isUpTodate: true,\n      apiResponse: \"\",\n      pageLayout: \"choose\",\n      actions: [\"clean file\", \"tagged file\", \"report\", \"html\"]\n    };\n\n    this.arrageFileNamesRecivedFromServer = fileNames => {\n      // Saperate the files to text files and configuration files.\n      let files = fileNames.split(\"\\n\"); // Seperate the text files names.\n\n      let textFiles = files[0].split(\",\"); // Seperates the configuration file names.\n\n      let confFiles = files[1].split(\",\"); // Seperate the spacial chars the marker will egnore.\n\n      let spacialChars = files[2].split(\" \");\n      spacialChars.push(\" \");\n      spacialChars.push(\"\\n\");\n      spacialChars.push(\"\\r\");\n      this.setState({\n        filesList: textFiles\n      });\n      this.setState({\n        confFileList: confFiles\n      });\n      this.setState({\n        specialCharsList: spacialChars\n      });\n    };\n\n    this.handleClickOnUpload = event => {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        // var preview = document.getElementById(\"temporaryPlace\");\n        var file = document.querySelector(\"input[id=text_file]\").files[0];\n        var reader = new FileReader();\n        var textFile = /text.*/;\n        var namefile = event.target.value;\n        namefile = namefile.split(\"\\\\\");\n        this.state.fileToUploadName = namefile[namefile.length - 1];\n\n        if (file.type.match(textFile)) {\n          reader.onload = this.uploadFileToServer;\n        }\n\n        reader.readAsText(file);\n      } else {\n        alert(\"Your browser is too old to support HTML5 File API\");\n      }\n    };\n\n    this.handleClickLoadFiles = eventArgs => {\n      var textFile = document.getElementById(\"fileChoser\");\n      textFile = textFile.value;\n      this.getFileFromServer(textFile);\n      var confFile = document.getElementById(\"conffileChoser\");\n      confFile = confFile.value;\n      this.getFileFromServer(confFile);\n      this.state.isUpTodate = true;\n      this.setState({\n        pageLayout: \"edit\"\n      });\n    };\n\n    this.handleStatisticsFile = eventArgs => {\n      let address = \"http://localhost:9000/makeReport\";\n      fetch(address, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          data: this.state.fileContentClean,\n          filename: this.state.filename,\n          confData: this.state.configurationFileContentClean,\n          confFileName: this.state.conffilename\n        })\n      }).then(function (response) {\n        let answer = response.body.getReader();\n        console.log();\n      });\n    };\n\n    this.handleSaveFile = eventArgs => {\n      let request = this.state.filename + \"\\n\" + this.state.fileContentClean;\n      let address = \"http://localhost:9000/saveFile\";\n      let fileTosaveData = \"\";\n      let fileTosaveName = \"\"; // If the the save is of a new file\n\n      if (this.state.fileToUploadContent != \"\") {\n        fileTosaveData = this.state.fileToUploadContent;\n        fileTosaveName = this.state.fileToUploadName;\n        this.state.fileToUploadContent = \"\";\n        this.state.fileToUploadName = \"\";\n      } else {\n        fileTosaveName = this.state.filename;\n        fileTosaveData = this.state.fileContentClean;\n        this.handleStatisticsFile(\"\");\n        this.makeHtml();\n      }\n\n      fetch(address, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          data: fileTosaveData,\n          filename: fileTosaveName\n        })\n      }).then(function (response) {\n        let answer = response.body.getReader();\n        console.log();\n      });\n      this.state.isUpTodate = true; //    var message = new Notification(\"RandomString\");\n      //    message.onclick = function () {\n      //      alert(\"Random Message\");\n      //    };\n      //.then(function (response) {\n      //console.log(response);\n      //});\n    };\n\n    this.handleClickRetrunToMainMenu = eventArgs => {\n      if (!this.state.isUpTodate) {\n        this.handleClick1(eventArgs);\n      } else {\n        this.setState({\n          pageLayout: \"choose\"\n        });\n      }\n\n      this.state.isUpTodate = true;\n    };\n\n    this.handleClickOnDownload = eventArgs => {\n      var action = document.getElementById(\"actionChooser\");\n      action = action.value;\n      var filename = document.getElementById(\"fileToDownloadChooser\");\n      filename = filename.value;\n      var conffilename = document.getElementById(\"conffileToDownloadChooser\");\n      conffilename = conffilename.value;\n      let downloadedFileName = action + \"_\" + filename;\n\n      if (action == \"html\") {\n        downloadedFileName = filename + \".html\";\n      }\n\n      let address = \"http://localhost:9000/downloadfile\";\n      fetch(address, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          action: action,\n          filename: filename,\n          confFileName: conffilename\n        })\n      }).then(response => {\n        response.blob().then(blob => {\n          let url = window.URL.createObjectURL(blob);\n          let a = document.createElement(\"a\");\n          a.href = url;\n          a.download = downloadedFileName;\n          a.click();\n        });\n      });\n    };\n\n    this.setCurrentTextFile = text => {\n      let filename = text.split(\"\\n\");\n      let fileData = text.slice(filename[0].length + 1, text.lenth); //first chunk of text is the name\n\n      this.setState({\n        filename: filename[0]\n      }); //the rest of the text\n\n      this.setState({\n        fileContent: fileData\n      });\n      this.setState({\n        fileContentClean: fileData\n      });\n      this.setTags(); //note\n    };\n\n    this.setCurrentConfigurationFile = text => {\n      let filename = text.split(\"\\n\");\n      this.setState({\n        conffilename: filename[0]\n      });\n      let conFileContent = filename.slice(1, filename.length);\n      this.state.configurationFileContentClean = conFileContent;\n      let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\n      // Helps to create the context menu.\n\n      let tagslist = [];\n\n      for (let i = 0; i < conFileContent.length; i++) {\n        let currentPair = conFileContent[i].split(\":\");\n        tagslist.push(currentPair[0]);\n        let pairKey = currentPair[0];\n        let pairValue = currentPair[1];\n        newTags[pairKey] = pairValue;\n      }\n\n      this.state.tagsAndColors = newTags;\n      this.state.tagsList = tagslist;\n      this.setTags(); // Initiate setState so the view will update.\n\n      this.setState({\n        tagsAndColors: newTags\n      });\n    };\n\n    this.uploadFileToServer = event => {\n      //this.state.fileContent = event.target.result;\n      //this.state.fileContentClean = event.target.result;\n      // this.state.fileToUploadContent =\n      this.state.fileToUploadContent = event.target.result;\n      this.state.newlyUploadedFileName = this.state.fileToUploadName;\n      this.handleSaveFile(event); // Get the updated list of files on the server.\n\n      fetch(\"http://localhost:9000/\").then(res => res.text()).then(res => this.arrageFileNamesRecivedFromServer(res)).then(() => this.UpdateChosenFile());\n    };\n\n    this.makeHtml = () => {\n      var textFile = document.getElementById(\"text\");\n      textFile = textFile.innerHTML;\n      var htmlFile = \"\";\n      htmlFile += \"<!DOCTYPE html>\";\n      htmlFile += \"<html>\";\n      htmlFile += \"<head>\";\n      htmlFile += \"<title>\";\n      htmlFile += this.state.filename;\n      htmlFile += \"</title>\";\n      htmlFile += \"</head>\";\n      htmlFile += \"<body>\";\n      htmlFile += \"<h3>\";\n      htmlFile += textFile;\n      htmlFile += \"</h3>\";\n      htmlFile += \"</body>\";\n      htmlFile += \"</html>\";\n      let address = \"http://localhost:9000/saveFile\";\n      fetch(address, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          data: htmlFile,\n          filename: this.state.filename + \".html\"\n        })\n      }).then(function (response) {\n        let answer = response.body.getReader();\n        console.log();\n      });\n    };\n\n    this.UpdateChosenFile = res => {\n      // If the list of files sent from the server had the file was added to the server.\n      const exists = this.state.filesList.some(v => v == this.state.newlyUploadedFileName);\n\n      if (exists) {\n        var textFile = document.getElementById(\"fileChoser\");\n        textFile.value = this.state.newlyUploadedFileName;\n      }\n    };\n\n    this.getFileFromServer = filename => {\n      var fileName = filename; //eventArgs.currentTarget.innerHTML.trim();\n\n      if (!fileName.endsWith(\".txt\")) {\n        var request = \"http://localhost:9000/openConfigurationFile/\" + fileName;\n        fetch(request).then(res => res.text()).then(res => this.setCurrentConfigurationFile(res));\n      } else {\n        var request = \"http://localhost:9000/openFile/\" + fileName;\n        fetch(request).then(res => res.text()).then(res => this.setCurrentTextFile(res));\n      }\n    };\n\n    this.captureHighlightedText = (event, data) => {\n      if (window.getSelection() == NaN) {\n        return;\n      } // The text is seperated to parts.\n      // Get the index of the highlited text in his part.\n\n\n      let leftIndexOfHighlightedChunkAtHisSpan;\n      let rightIndexOfHighlightedChunkAtHisSpan;\n\n      if (window.getSelection().baseOffset <= window.getSelection().extentOffset) {\n        leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n        rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n      } else if (window.getSelection().baseOffset > window.getSelection().extentOffset) {\n        leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n        rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n      } // Get the part number the highlited text is in.\n\n\n      let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement.id; //calculate the offset from the beggining of the text\n\n      let indexOfCleanText = 0;\n\n      for (let i = 0; i < spanOfHighlightedChunk; i++) {\n        //checking chunk if its not start with % we summing the length\n        if (this.state.formattedtext[i][0] != \"%\") {\n          indexOfCleanText += this.state.formattedtext[i].length;\n        } else {\n          let currentChunk = this.state.formattedtext[i].split(\"%\");\n          let tagLength = currentChunk[1].length;\n          let textlength = currentChunk[2].length;\n          indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\n        }\n      } // indexOfCleanTextc contains the location of the first caracter chosen in the text as\n      // it in raw text.\n      // Sreaching for the begining of the highlighted word.\n\n\n      let cleanText = this.state.fileContentClean;\n      let begining; // If the first chracter is in a begining of a chunk.\n\n      if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\n        begining = indexOfCleanText;\n      } else {\n        let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\n\n        for (; indexToFindTheHighligtedWordStart >= 0; indexToFindTheHighligtedWordStart--) {\n          // we reached the befining of the current paragraph.\n          if (indexToFindTheHighligtedWordStart == 0) {\n            begining = indexOfCleanText; // If we reached a space character.\n          } else {\n            let previousChar = cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1]; //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\n\n            if (this.isSpecialChar(previousChar)) {\n              //  previousChar == \" \" ||\n              //  previousChar == \"\\n\" ||\n              //  previousChar == \"\\t\"\n              begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\n              break;\n            }\n          }\n        }\n      }\n\n      let textInChunk = window.getSelection().baseNode.data;\n      let end; //in case of automatic space added by clicking\n\n      if (rightIndexOfHighlightedChunkAtHisSpan != leftIndexOfHighlightedChunkAtHisSpan && this.isSpecialChar(cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1])) {\n        end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\n      } else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\n        // If the last chracter is in the end of a chunk.\n        end = indexOfCleanText + textInChunk.length;\n      } else {\n        let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\n\n        for (; indexToFindTheHighligtedWordEnd <= textInChunk.length; indexToFindTheHighligtedWordEnd++) {\n          // If we reached the end of the paragraph.\n          if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\n            end = indexOfCleanText + textInChunk.length; // If we reached a white space.\n          } else {\n            let nextChar = cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\n\n            if (this.isSpecialChar(nextChar)) {\n              //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\n              end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\n              break;\n            }\n          }\n        }\n      }\n\n      let preTag;\n      let inTag;\n      let postTag; // If the highlited text is not already tagged.\n\n      if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\n        preTag = cleanText.substring(0, begining);\n        inTag = cleanText.substring(begining, end);\n        postTag = cleanText.substring(end, cleanText.length);\n        this.state.isHighlightedTextTagged = false; //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\n        //preTag = cleanText.substring(0, indexOfCleanText);\n        //inTag = cleanText.substring(\n        //  indexOfCleanText,\n        //  indexOfCleanText + window.getSelection().toString().length\n        //);\n        //postTag = cleanText.substring(\n        //  indexOfCleanText + window.getSelection().toString().length,\n        //  cleanText.length\n        //);\n        //this.state.isHighlightedTextTagged = false;\n      } else {\n        let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\"%\");\n        let tagLength = currentChunk[1].length;\n        preTag = cleanText.substring(0, indexOfCleanText);\n        inTag = cleanText.substring(indexOfCleanText + tagLength + 2, indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length);\n        postTag = cleanText.substring(indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length + tagLength + 3, cleanText.length);\n        this.state.isHighlightedTextTagged = true;\n      }\n\n      this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\n      this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\n      this.state.begining = begining;\n      this.state.end = end;\n      this.setState({\n        preHighlightedText: preTag\n      });\n      this.setState({\n        highlightedText: inTag\n      });\n      this.setState({\n        postHighlightedText: postTag\n      });\n    };\n\n    this.addTag = (event, data) => {\n      this.state.isUpTodate = false;\n      let tagName = window.getSelection().anchorNode.parentElement.id;\n      let text;\n\n      if (tagName != \"no_tag\") {\n        text = this.state.preHighlightedText + \"<\" + tagName + \">\" + this.state.highlightedText + \"</\" + tagName + \">\" + this.state.postHighlightedText;\n      } else {\n        text = this.state.preHighlightedText + this.state.highlightedText + this.state.postHighlightedText;\n      }\n\n      this.state.fileContentClean = text;\n      this.setTags();\n      this.setState({\n        fileContentClean: text\n      });\n    };\n\n    this.setTags = () => {\n      let text = this.state.fileContentClean;\n      let higlight = \"<[^<]+>\";\n      let regexHiglight = RegExp(higlight);\n      let closertag = \"</[^<]+>\";\n      let regexclosetag = RegExp(closertag);\n      let par;\n      let spanIndex = 0; //Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let formattedparts = [];\n\n      for (let index = 0; index < parts.length; index++) {\n        //cheking that the current part is not a tag\n        if (!(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))) {\n          if (parts[index] != \"\") formattedparts.push(parts[index]);\n        } // handeling an open tag\n        else {\n            let currenttag = parts[index]; //building the inner tag - cuts inner text\n\n            currenttag = currenttag.substring(1, currenttag.length - 1);\n            let rightclosertag = \"</\" + currenttag + \">\";\n            let regExpRightcloser = RegExp(rightclosertag); //we want to keep running on string until we'll meet the right closer tag\n\n            let newindex = index + 1;\n\n            while (!regExpRightcloser.test(parts[newindex]) && newindex < parts.length) {\n              newindex++;\n            } //if the closing tag matches the opening tag found\n\n\n            if (newindex < parts.length) {\n              //builds the new string for injection\n              let newstring = \"%\" + currenttag + \"%\";\n\n              for (let innerindex = index + 1; innerindex < newindex; innerindex++) {\n                newstring = newstring + parts[innerindex];\n              }\n\n              formattedparts.push(newstring);\n              index = newindex;\n            } else {\n              //if theres no closing tag to a tag so we copy the opening tag as it is\n              formattedparts.push(parts[index]);\n            }\n          }\n      } //console.log(\"correct\");\n\n\n      let tagRegex = RegExp(\"%.+%.+\");\n      let taggedText = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 634\n        },\n        __self: this\n      }, \" \", formattedparts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        id: i,\n        style: tagRegex.test(part) ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\n        //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: this.state.tagsAndColors[part.split(\"%\")[1]]\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637\n        },\n        __self: this\n      }, part.split(\"%\").reverse()[0])));\n      this.setState({\n        formattedtext: formattedparts\n      });\n      this.setState({\n        fileContent: taggedText\n      });\n    };\n\n    this.isSpecialChar = character => {\n      if (character == \"\\n\") {\n        let i = 0;\n      }\n\n      for (let i = 0; i < this.state.specialCharsList.length; i++) {\n        if (this.state.specialCharsList[i] == character) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.returnPageLayout = () => {\n      if (this.state.pageLayout == \"choose\") {\n        return this.returnMainMenuLayout();\n      } else if (this.state.pageLayout == \"edit\") {\n        return this.returnTaggedTextArea();\n      }\n    };\n\n    this.returnMainMenuLayout = () => {\n      let page = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 731\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732\n        },\n        __self: this\n      }), React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 733\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 734\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 735\n        },\n        __self: this\n      }, \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 737\n        },\n        __self: this\n      }, \"1. Select an existing document\"), \" \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 739\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        name: \"fileChoser\",\n        id: \"fileChoser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 740\n        },\n        __self: this\n      }, \" \", this.createList(this.state.filesList)), \" \")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 746\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 747\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 748\n        },\n        __self: this\n      }, \" -or- \"), \" \"), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 750\n        },\n        __self: this\n      }, \" \")), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 752\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        align: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 753\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 754\n        },\n        __self: this\n      }, \"Upload New File to Server \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 755\n        },\n        __self: this\n      }), \" \")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 758\n        },\n        __self: this\n      }, \" \", React.createElement(\"input\", {\n        type: \"file\",\n        id: \"text_file\",\n        onChange: this.handleClickOnUpload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 760\n        },\n        __self: this\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 767\n        },\n        __self: this\n      }), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 768\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 769\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 770\n        },\n        __self: this\n      }, \" 2. Choose a configuration file: \")), React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 772\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        name: \"conffileChoser\",\n        id: \"conffileChoser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 773\n        },\n        __self: this\n      }, this.createList(this.state.confFileList), \" \"))), React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 778\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 779\n        },\n        __self: this\n      }, \" \"), React.createElement(\"td\", {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 780\n        },\n        __self: this\n      }, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 781\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.handleClickLoadFiles,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 782\n        },\n        __self: this\n      }, \" \", \"Load files\")))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 789\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 790\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 791\n        },\n        __self: this\n      }, \"Download file\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 792\n        },\n        __self: this\n      }), React.createElement(\"select\", {\n        name: \"actionChooser\",\n        id: \"actionChooser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 793\n        },\n        __self: this\n      }, \" \", this.createList(this.state.actions)), \" \", React.createElement(\"select\", {\n        name: \"fileToDownloadChooser\",\n        id: \"fileToDownloadChooser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 797\n        },\n        __self: this\n      }, \" \", this.createList(this.state.filesList)), \" \", React.createElement(\"select\", {\n        name: \"conffileToDownloadChooser\",\n        id: \"conffileToDownloadChooser\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 801\n        },\n        __self: this\n      }, this.createList(this.state.confFileList), \" \"), \"  \", React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.handleClickOnDownload,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 808\n        },\n        __self: this\n      }, \" \", \"Download file\", \" \")), React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 813\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 814\n        },\n        __self: this\n      }, \" \", React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 816\n        },\n        __self: this\n      }, \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 818\n        },\n        __self: this\n      }, \"\\xA9 Sapir Kikoz, Yifat Yankovich - \")), \" \"), React.createElement(\"td\", {\n        align: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 821\n        },\n        __self: this\n      }, \" \", React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 823\n        },\n        __self: this\n      }, \" September 2020 \"))));\n      return page;\n    };\n\n    this.returnEditFileLayout = () => {\n      let page = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 833\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 834\n        },\n        __self: this\n      }, \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 836\n        },\n        __self: this\n      }, \"Choosen Article: \", this.state.filename, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 838\n        },\n        __self: this\n      }), \"Choosen Configuration File: \", this.state.conffilename)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 843\n        },\n        __self: this\n      }), React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 844\n        },\n        __self: this\n      }, \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 846\n        },\n        __self: this\n      }, \"Add or edit tags by selecting and right clicking the text.\"), \" \"), React.createElement(\"table\", {\n        length: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 848\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        length: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 849\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        length: \"25%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 850\n        },\n        __self: this\n      }, \" \"), React.createElement(\"td\", {\n        length: \"50%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 851\n        },\n        __self: this\n      }, \" \", React.createElement(ContextMenuTrigger, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 853\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"text\",\n        onClickCapture: this.captureHighlightedText,\n        style: {\n          backgroundColor: \"white\",\n          borderStyle: \"solid\",\n          height: \"8cm\",\n          width: \"30cm\",\n          overflowY: \"scroll\",\n          overflowX: \"hidden\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 854\n        },\n        __self: this\n      }, this.state.fileContent), \" \"), React.createElement(ContextMenu, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 869\n        },\n        __self: this\n      }, this.createMenu())), React.createElement(\"td\", {\n        length: \"25%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 873\n        },\n        __self: this\n      }, \" \"))), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 876\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.handleSaveFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 877\n        },\n        __self: this\n      }, \" \", \"Save Work on System\"), \"     \", React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.handleClickRetrunToMainMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 882\n        },\n        __self: this\n      }, \" \", \"Return to Main Menu\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 889\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: this.handleClick1,\n        onClose: this.handleOnClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 890\n        },\n        __self: this\n      }))));\n      return page;\n    };\n\n    this.returnTaggedTextArea = () => {\n      let page = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 910\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 911\n        },\n        __self: this\n      }, \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 913\n        },\n        __self: this\n      }, \"Choosen Article: \", this.state.filename, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 915\n        },\n        __self: this\n      }), \"Choosen Configuration File: \", this.state.conffilename)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 920\n        },\n        __self: this\n      }), React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 921\n        },\n        __self: this\n      }, \" \", React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 923\n        },\n        __self: this\n      }, \"Add or edit tags by selecting and right clicking the text.\"), \" \"), React.createElement(TaggedTextArea, {\n        tagsAndColors: this.state.tagsAndColors,\n        tagsList: this.state.tagsList,\n        specialCharsList: this.state.specialCharsList,\n        fileContent: this.state.fileContentClean,\n        updateFileContent: this.updateFileContent,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 925\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 932\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.handleSaveFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 933\n        },\n        __self: this\n      }, \" \", \"Save Work on System\"), \"     \", React.createElement(\"button\", {\n        style: buttonStyle,\n        onClick: this.handleClickRetrunToMainMenu,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 938\n        },\n        __self: this\n      }, \" \", \"Return to Main Menu\"), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 945\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        onClick: this.handleClick1,\n        onClose: this.handleOnClose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 946\n        },\n        __self: this\n      }))));\n      return page;\n    };\n\n    this.updateFileContent = (content, htmlForm) => {\n      this.state.isUpTodate = false;\n      this.setState({\n        fileContentClean: content\n      });\n      this.setState({\n        fileHtmlForm: htmlForm\n      });\n    };\n\n    this.createMenu = () => {\n      let menu;\n\n      if (this.state.isHighlightedTextTagged == false) {\n        menu = this.state.tagsList.map((part, i) => React.createElement(MenuItem, {\n          key: i,\n          id: part,\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 975\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: part,\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 977\n          },\n          __self: this\n        }, \"Set as \", part, \" \")));\n      } else {\n        menu = React.createElement(MenuItem, {\n          id: \"no_tag\",\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 984\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: \"no_tag\",\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 986\n          },\n          __self: this\n        }, \"Remove tag\", \" \"));\n      }\n\n      return menu;\n    };\n\n    this.createList = list => {\n      return list.map((part, i) => React.createElement(\"option\", {\n        value: part,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 999\n        },\n        __self: this\n      }, \" \", part));\n    };\n  }\n\n  callAPI() {\n    console.log(\"in callApi\");\n    fetch(\"http://localhost:9000/\").then(res => res.text()).then(res => this.arrageFileNamesRecivedFromServer(res));\n  }\n\n  componentWillMount() {\n    this.callAPI();\n  }\n\n  //alert capara\n  handleClick1(e) {\n    e.preventDefault();\n    Alert.info(\"Make sure to save your changes before returning to the Main Menu\", {\n      position: \"top\",\n      timeout: \"none\",\n      onClose: function () {\n        console.log(\"onClose Fired!\");\n      }\n    });\n  } // Render the frame of the site and get the cueent page from the method this.returnPageLayout()\n\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 692\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      align: \"center\",\n      style: divStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      align: \"right\",\n      src: biulogo,\n      alt: \"biulogo\",\n      style: {\n        width: \"auto\",\n        height: \"0.75cm\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      align: \"left\",\n      src: logo,\n      alt: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 700\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 701\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 702\n      },\n      __self: this\n    }), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 703\n      },\n      __self: this\n    }, \" \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705\n      },\n      __self: this\n    }, \"Jerusalem Knowledge Center\"), \" \"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 707\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708\n      },\n      __self: this\n    }, \"Tag Editor\")), this.returnPageLayout(), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 711\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 712\n      },\n      __self: this\n    }, this.props.children), React.createElement(Alert, {\n      stack: {\n        limit: 3\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 713\n      },\n      __self: this\n    }))));\n  } // Returns the current page the web sites has to present.\n\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/main.jsx"],"names":["React","Component","Background","logo","biulogo","TaggedTextArea","ContextMenu","MenuItem","ContextMenuTrigger","ReactDOM","throwStatement","Alert","divStyle","color","fontSize","fontFamily","backgroundSize","overflowX","height","background","backgroundImage","buttonStyle","backgroundColor","Main","state","filename","conffilename","fileContent","fileContentClean","fileToUploadName","fileToUploadContent","newlyUploadedFileName","formattedparts","tagsAndColors","configurationFileContentClean","tagsList","filesList","confFileList","specialCharsList","contextMenu","preHighlightedText","highlightedText","postHighlightedText","isHighlightedTextTagged","isUpTodate","apiResponse","pageLayout","actions","arrageFileNamesRecivedFromServer","fileNames","files","split","textFiles","confFiles","spacialChars","push","setState","handleClickOnUpload","event","window","File","FileReader","FileList","Blob","file","document","querySelector","reader","textFile","namefile","target","value","length","type","match","onload","uploadFileToServer","readAsText","alert","handleClickLoadFiles","eventArgs","getElementById","getFileFromServer","confFile","handleStatisticsFile","address","fetch","method","headers","body","JSON","stringify","data","confData","confFileName","then","response","answer","getReader","console","log","handleSaveFile","request","fileTosaveData","fileTosaveName","makeHtml","handleClickRetrunToMainMenu","handleClick1","handleClickOnDownload","action","downloadedFileName","blob","url","URL","createObjectURL","a","createElement","href","download","click","setCurrentTextFile","text","fileData","slice","lenth","setTags","setCurrentConfigurationFile","conFileContent","newTags","tagslist","i","currentPair","pairKey","pairValue","result","res","UpdateChosenFile","innerHTML","htmlFile","exists","some","v","fileName","endsWith","captureHighlightedText","getSelection","NaN","leftIndexOfHighlightedChunkAtHisSpan","rightIndexOfHighlightedChunkAtHisSpan","baseOffset","extentOffset","spanOfHighlightedChunk","anchorNode","parentElement","id","indexOfCleanText","formattedtext","currentChunk","tagLength","textlength","cleanText","begining","indexToFindTheHighligtedWordStart","previousChar","isSpecialChar","textInChunk","baseNode","end","indexToFindTheHighligtedWordEnd","nextChar","preTag","inTag","postTag","substring","leftIndex","rightIndex","addTag","tagName","higlight","regexHiglight","RegExp","closertag","regexclosetag","par","spanIndex","parts","index","test","currenttag","rightclosertag","regExpRightcloser","newindex","newstring","innerindex","tagRegex","taggedText","map","part","fontWeight","reverse","character","returnPageLayout","returnMainMenuLayout","returnTaggedTextArea","page","createList","returnEditFileLayout","borderStyle","width","overflowY","createMenu","handleOnClose","updateFileContent","content","htmlForm","fileHtmlForm","menu","list","callAPI","componentWillMount","e","preventDefault","info","position","timeout","onClose","render","props","children","limit"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Background from \"../images/backgroundabout.jpg\";\r\nimport logo from \"../images/logo.png\";\r\nimport biulogo from \"../images/biulogo.png\";\r\nimport TaggedTextArea from \"./taggedTextArea\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { throwStatement } from \"@babel/types\";\r\nimport \"react-s-alert/dist/s-alert-default.css\";\r\nimport Alert from \"react-s-alert\";\r\nimport \"react-s-alert/dist/s-alert-default.css\";\r\nimport \"react-s-alert/dist/s-alert-css-effects/slide.css\";\r\n//display: \"none\",\r\n//  fontFamily: \"Guttman Hatzvi\",\r\n//  width: \"auto\",\r\n//  height: \"25cm\",\r\n//  overflow: \"scroll\",\r\n//  fontSize: \"medium\",\r\n//  overflowY: \"scroll\",\r\n//positionY: \"absolute\",\r\n//positionX: \"absolute\",\r\n//width: \"auto\",\r\n//height: \"100%\",\r\n//margin: \"auto\",\r\n\r\nconst divStyle = {\r\n  color: \"#5B6676\",\r\n  fontSize: \"medium\",\r\n  fontFamily: \"Arial\",\r\n  backgroundSize: \"contain\",\r\n  overflowX: \"hidden\",\r\n  height: \"100vh\",\r\n  background: \"url(shutterstock_125995700.jpg)\",\r\n  backgroundImage: `url(${Background})`,\r\n};\r\n\r\nconst buttonStyle = {\r\n  backgroundColor: \"#74CDD1\",\r\n};\r\n// backgroundSize: \"100%\",\r\nclass Main extends Component {\r\n  state = {\r\n    filename: \"\",\r\n    conffilename: \"\",\r\n    fileContent: \"\",\r\n    fileContentClean: \"\",\r\n    fileToUploadName: \"\",\r\n    fileToUploadContent: \"\",\r\n    newlyUploadedFileName: \"\",\r\n    formattedparts: \"\",\r\n    tagsAndColors: {\r\n      //person: \"yellow\",\r\n      //place: \"red\",\r\n      //bla: \"lightpink\",\r\n      //date: \"blue\",\r\n      //event: \"purple\"\r\n    },\r\n    configurationFileContentClean: \"\",\r\n    tagsList: [],\r\n    filesList: [],\r\n    confFileList: [],\r\n    specialCharsList: [],\r\n    // Context menu\r\n    contextMenu: \"\",\r\n    // Used to keep the text the user marked\r\n    preHighlightedText: \"\",\r\n    highlightedText: \"\",\r\n    postHighlightedText: \"\",\r\n    //    leftIndex: -1,\r\n    //    rightIndex: -1,\r\n    //    begining: -1,\r\n    //    end: -1,\r\n    isHighlightedTextTagged: false,\r\n    isUpTodate: true,\r\n    apiResponse: \"\",\r\n    pageLayout: \"choose\",\r\n    actions: [\"clean file\", \"tagged file\", \"report\", \"html\"],\r\n  };\r\n\r\n  callAPI() {\r\n    console.log(\"in callApi\");\r\n    fetch(\"http://localhost:9000/\")\r\n      .then((res) => res.text())\r\n      .then((res) => this.arrageFileNamesRecivedFromServer(res));\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.callAPI();\r\n  }\r\n\r\n  arrageFileNamesRecivedFromServer = (fileNames) => {\r\n    // Saperate the files to text files and configuration files.\r\n    let files = fileNames.split(\"\\n\");\r\n\r\n    // Seperate the text files names.\r\n    let textFiles = files[0].split(\",\");\r\n\r\n    // Seperates the configuration file names.\r\n    let confFiles = files[1].split(\",\");\r\n\r\n    // Seperate the spacial chars the marker will egnore.\r\n    let spacialChars = files[2].split(\" \");\r\n    spacialChars.push(\" \");\r\n    spacialChars.push(\"\\n\");\r\n    spacialChars.push(\"\\r\");\r\n\r\n    this.setState({ filesList: textFiles });\r\n    this.setState({ confFileList: confFiles });\r\n    this.setState({ specialCharsList: spacialChars });\r\n  };\r\n\r\n  handleClickOnUpload = (event) => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      // var preview = document.getElementById(\"temporaryPlace\");\r\n      var file = document.querySelector(\"input[id=text_file]\").files[0];\r\n      var reader = new FileReader();\r\n      var textFile = /text.*/;\r\n\r\n      var namefile = event.target.value;\r\n      namefile = namefile.split(\"\\\\\");\r\n      this.state.fileToUploadName = namefile[namefile.length - 1];\r\n\r\n      if (file.type.match(textFile)) {\r\n        reader.onload = this.uploadFileToServer;\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n  };\r\n\r\n  // previously called loadDataAndConfFiles\r\n  handleClickLoadFiles = (eventArgs) => {\r\n    var textFile = document.getElementById(\"fileChoser\");\r\n    textFile = textFile.value;\r\n    this.getFileFromServer(textFile);\r\n    var confFile = document.getElementById(\"conffileChoser\");\r\n    confFile = confFile.value;\r\n    this.getFileFromServer(confFile);\r\n    this.state.isUpTodate = true;\r\n    this.setState({ pageLayout: \"edit\" });\r\n  };\r\n\r\n  handleStatisticsFile = (eventArgs) => {\r\n    let address = \"http://localhost:9000/makeReport\";\r\n\r\n    fetch(address, {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        data: this.state.fileContentClean,\r\n        filename: this.state.filename,\r\n        confData: this.state.configurationFileContentClean,\r\n        confFileName: this.state.conffilename,\r\n      }),\r\n    }).then(function (response) {\r\n      let answer = response.body.getReader();\r\n      console.log();\r\n    });\r\n  };\r\n\r\n  handleSaveFile = (eventArgs) => {\r\n    let request = this.state.filename + \"\\n\" + this.state.fileContentClean;\r\n    let address = \"http://localhost:9000/saveFile\";\r\n\r\n    let fileTosaveData = \"\";\r\n    let fileTosaveName = \"\";\r\n\r\n    // If the the save is of a new file\r\n    if (this.state.fileToUploadContent != \"\") {\r\n      fileTosaveData = this.state.fileToUploadContent;\r\n      fileTosaveName = this.state.fileToUploadName;\r\n      this.state.fileToUploadContent = \"\";\r\n      this.state.fileToUploadName = \"\";\r\n    } else {\r\n      fileTosaveName = this.state.filename;\r\n      fileTosaveData = this.state.fileContentClean;\r\n      this.handleStatisticsFile(\"\");\r\n      this.makeHtml();\r\n    }\r\n\r\n    fetch(address, {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        data: fileTosaveData,\r\n        filename: fileTosaveName,\r\n      }),\r\n    }).then(function (response) {\r\n      let answer = response.body.getReader();\r\n      console.log();\r\n    });\r\n\r\n    this.state.isUpTodate = true;\r\n\r\n    //    var message = new Notification(\"RandomString\");\r\n    //    message.onclick = function () {\r\n    //      alert(\"Random Message\");\r\n    //    };\r\n    //.then(function (response) {\r\n    //console.log(response);\r\n    //});\r\n  };\r\n\r\n  // retrunToChooseFile\r\n  handleClickRetrunToMainMenu = (eventArgs) => {\r\n    if (!this.state.isUpTodate) {\r\n      this.handleClick1(eventArgs);\r\n    } else {\r\n      this.setState({ pageLayout: \"choose\" });\r\n    }\r\n    this.state.isUpTodate = true;\r\n  };\r\n\r\n  handleClickOnDownload = (eventArgs) => {\r\n    var action = document.getElementById(\"actionChooser\");\r\n    action = action.value;\r\n    var filename = document.getElementById(\"fileToDownloadChooser\");\r\n    filename = filename.value;\r\n    var conffilename = document.getElementById(\"conffileToDownloadChooser\");\r\n    conffilename = conffilename.value;\r\n\r\n    let downloadedFileName = action + \"_\" + filename;\r\n    if (action == \"html\") {\r\n      downloadedFileName = filename + \".html\";\r\n    }\r\n\r\n    let address = \"http://localhost:9000/downloadfile\";\r\n    fetch(address, {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        action: action,\r\n        filename: filename,\r\n        confFileName: conffilename,\r\n      }),\r\n    }).then((response) => {\r\n      response.blob().then((blob) => {\r\n        let url = window.URL.createObjectURL(blob);\r\n        let a = document.createElement(\"a\");\r\n        a.href = url;\r\n        a.download = downloadedFileName;\r\n        a.click();\r\n      });\r\n    });\r\n  };\r\n\r\n  //  downloadEmployeeData = () => {\r\n  //    fetch('http://localhost:8080/employees/download')\r\n  //      .then(response => {\r\n  //        response.blob().then(blob => {\r\n  //          let url = window.URL.createObjectURL(blob);\r\n  //          let a = document.createElement('a');\r\n  //          a.href = url;\r\n  //          a.download = 'employees.json';\r\n  //          a.click();\r\n  //        });\r\n  //        //window.location.href = response.url;\r\n  //    });\r\n  //  }\r\n\r\n  // previously called acceptFilesFromServer\r\n  setCurrentTextFile = (text) => {\r\n    let filename = text.split(\"\\n\");\r\n    let fileData = text.slice(filename[0].length + 1, text.lenth);\r\n    //first chunk of text is the name\r\n    this.setState({ filename: filename[0] });\r\n    //the rest of the text\r\n    this.setState({ fileContent: fileData });\r\n    this.setState({ fileContentClean: fileData });\r\n    this.setTags();\r\n    //note\r\n  };\r\n\r\n  // previously called acceptConfigurationFilesFromServer\r\n  setCurrentConfigurationFile = (text) => {\r\n    let filename = text.split(\"\\n\");\r\n    this.setState({ conffilename: filename[0] });\r\n    let conFileContent = filename.slice(1, filename.length);\r\n    this.state.configurationFileContentClean = conFileContent;\r\n    let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\r\n\r\n    // Helps to create the context menu.\r\n    let tagslist = [];\r\n\r\n    for (let i = 0; i < conFileContent.length; i++) {\r\n      let currentPair = conFileContent[i].split(\":\");\r\n      tagslist.push(currentPair[0]);\r\n      let pairKey = currentPair[0];\r\n      let pairValue = currentPair[1];\r\n      newTags[pairKey] = pairValue;\r\n    }\r\n\r\n    this.state.tagsAndColors = newTags;\r\n    this.state.tagsList = tagslist;\r\n    this.setTags();\r\n    // Initiate setState so the view will update.\r\n    this.setState({ tagsAndColors: newTags });\r\n  };\r\n\r\n  // previously called loadFile\r\n  uploadFileToServer = (event) => {\r\n    //this.state.fileContent = event.target.result;\r\n    //this.state.fileContentClean = event.target.result;\r\n    // this.state.fileToUploadContent =\r\n\r\n    this.state.fileToUploadContent = event.target.result;\r\n    this.state.newlyUploadedFileName = this.state.fileToUploadName;\r\n    this.handleSaveFile(event);\r\n\r\n    // Get the updated list of files on the server.\r\n    fetch(\"http://localhost:9000/\")\r\n      .then((res) => res.text())\r\n      .then((res) => this.arrageFileNamesRecivedFromServer(res))\r\n      .then(() => this.UpdateChosenFile());\r\n  };\r\n\r\n  makeHtml = () => {\r\n    var textFile = document.getElementById(\"text\");\r\n    textFile = textFile.innerHTML;\r\n    var htmlFile = \"\";\r\n    htmlFile += \"<!DOCTYPE html>\";\r\n    htmlFile += \"<html>\";\r\n    htmlFile += \"<head>\";\r\n    htmlFile += \"<title>\";\r\n    htmlFile += this.state.filename;\r\n    htmlFile += \"</title>\";\r\n    htmlFile += \"</head>\";\r\n    htmlFile += \"<body>\";\r\n    htmlFile += \"<h3>\";\r\n    htmlFile += textFile;\r\n    htmlFile += \"</h3>\";\r\n    htmlFile += \"</body>\";\r\n    htmlFile += \"</html>\";\r\n\r\n    let address = \"http://localhost:9000/saveFile\";\r\n    fetch(address, {\r\n      method: \"POST\",\r\n      headers: { \"Content-type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        data: htmlFile,\r\n        filename: this.state.filename + \".html\",\r\n      }),\r\n    }).then(function (response) {\r\n      let answer = response.body.getReader();\r\n      console.log();\r\n    });\r\n  };\r\n\r\n  UpdateChosenFile = (res) => {\r\n    // If the list of files sent from the server had the file was added to the server.\r\n    const exists = this.state.filesList.some(\r\n      (v) => v == this.state.newlyUploadedFileName\r\n    );\r\n    if (exists) {\r\n      var textFile = document.getElementById(\"fileChoser\");\r\n      textFile.value = this.state.newlyUploadedFileName;\r\n    }\r\n  };\r\n\r\n  //previously called handleChoosefile.\r\n  getFileFromServer = (filename) => {\r\n    var fileName = filename; //eventArgs.currentTarget.innerHTML.trim();\r\n    if (!fileName.endsWith(\".txt\")) {\r\n      var request = \"http://localhost:9000/openConfigurationFile/\" + fileName;\r\n      fetch(request)\r\n        .then((res) => res.text())\r\n        .then((res) => this.setCurrentConfigurationFile(res));\r\n    } else {\r\n      var request = \"http://localhost:9000/openFile/\" + fileName;\r\n      fetch(request)\r\n        .then((res) => res.text())\r\n        .then((res) => this.setCurrentTextFile(res));\r\n    }\r\n  };\r\n\r\n  // Recognise the text the user Highlights, and the text segments that\r\n  // comes before and after the Highlighted text.\r\n  captureHighlightedText = (event, data) => {\r\n    if (window.getSelection() == NaN) {\r\n      return;\r\n    }\r\n\r\n    // The text is seperated to parts.\r\n    // Get the index of the highlited text in his part.\r\n    let leftIndexOfHighlightedChunkAtHisSpan;\r\n    let rightIndexOfHighlightedChunkAtHisSpan;\r\n    if (\r\n      window.getSelection().baseOffset <= window.getSelection().extentOffset\r\n    ) {\r\n      leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n      rightIndexOfHighlightedChunkAtHisSpan = window.getSelection()\r\n        .extentOffset;\r\n    } else if (\r\n      window.getSelection().baseOffset > window.getSelection().extentOffset\r\n    ) {\r\n      leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\r\n      rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n    }\r\n\r\n    // Get the part number the highlited text is in.\r\n    let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\r\n      .id;\r\n\r\n    //calculate the offset from the beggining of the text\r\n    let indexOfCleanText = 0;\r\n    for (let i = 0; i < spanOfHighlightedChunk; i++) {\r\n      //checking chunk if its not start with % we summing the length\r\n      if (this.state.formattedtext[i][0] != \"%\") {\r\n        indexOfCleanText += this.state.formattedtext[i].length;\r\n      } else {\r\n        let currentChunk = this.state.formattedtext[i].split(\"%\");\r\n        let tagLength = currentChunk[1].length;\r\n        let textlength = currentChunk[2].length;\r\n        indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\r\n      }\r\n    }\r\n\r\n    // indexOfCleanTextc contains the location of the first caracter chosen in the text as\r\n    // it in raw text.\r\n\r\n    // Sreaching for the begining of the highlighted word.\r\n    let cleanText = this.state.fileContentClean;\r\n    let begining;\r\n    // If the first chracter is in a begining of a chunk.\r\n    if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\r\n      begining = indexOfCleanText;\r\n    } else {\r\n      let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\r\n      for (\r\n        ;\r\n        indexToFindTheHighligtedWordStart >= 0;\r\n        indexToFindTheHighligtedWordStart--\r\n      ) {\r\n        // we reached the befining of the current paragraph.\r\n        if (indexToFindTheHighligtedWordStart == 0) {\r\n          begining = indexOfCleanText;\r\n          // If we reached a space character.\r\n        } else {\r\n          let previousChar =\r\n            cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1];\r\n          //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\r\n          if (this.isSpecialChar(previousChar)) {\r\n            //  previousChar == \" \" ||\r\n            //  previousChar == \"\\n\" ||\r\n            //  previousChar == \"\\t\"\r\n            begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let textInChunk = window.getSelection().baseNode.data;\r\n    let end;\r\n    //in case of automatic space added by clicking\r\n    if (\r\n      rightIndexOfHighlightedChunkAtHisSpan !=\r\n        leftIndexOfHighlightedChunkAtHisSpan &&\r\n      this.isSpecialChar(\r\n        cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1]\r\n      )\r\n    ) {\r\n      end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\r\n    } else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\r\n      // If the last chracter is in the end of a chunk.\r\n      end = indexOfCleanText + textInChunk.length;\r\n    } else {\r\n      let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\r\n      for (\r\n        ;\r\n        indexToFindTheHighligtedWordEnd <= textInChunk.length;\r\n        indexToFindTheHighligtedWordEnd++\r\n      ) {\r\n        // If we reached the end of the paragraph.\r\n        if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\r\n          end = indexOfCleanText + textInChunk.length;\r\n          // If we reached a white space.\r\n        } else {\r\n          let nextChar =\r\n            cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\r\n          if (this.isSpecialChar(nextChar)) {\r\n            //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\r\n            end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let preTag;\r\n    let inTag;\r\n    let postTag;\r\n\r\n    // If the highlited text is not already tagged.\r\n    if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\r\n      preTag = cleanText.substring(0, begining);\r\n      inTag = cleanText.substring(begining, end);\r\n      postTag = cleanText.substring(end, cleanText.length);\r\n      this.state.isHighlightedTextTagged = false;\r\n      //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\r\n      //preTag = cleanText.substring(0, indexOfCleanText);\r\n      //inTag = cleanText.substring(\r\n      //  indexOfCleanText,\r\n      //  indexOfCleanText + window.getSelection().toString().length\r\n      //);\r\n      //postTag = cleanText.substring(\r\n      //  indexOfCleanText + window.getSelection().toString().length,\r\n      //  cleanText.length\r\n      //);\r\n      //this.state.isHighlightedTextTagged = false;\r\n    } else {\r\n      let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\r\n        \"%\"\r\n      );\r\n      let tagLength = currentChunk[1].length;\r\n      preTag = cleanText.substring(0, indexOfCleanText);\r\n      inTag = cleanText.substring(\r\n        indexOfCleanText + tagLength + 2,\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length\r\n      );\r\n      postTag = cleanText.substring(\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length +\r\n          tagLength +\r\n          3,\r\n        cleanText.length\r\n      );\r\n      this.state.isHighlightedTextTagged = true;\r\n    }\r\n    this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.begining = begining;\r\n    this.state.end = end;\r\n    this.setState({ preHighlightedText: preTag });\r\n    this.setState({ highlightedText: inTag });\r\n    this.setState({ postHighlightedText: postTag });\r\n  };\r\n\r\n  // When a user Highlights text segment and choose to tag that segment,\r\n  // this function is called.\r\n  // Tthe funtion update the whole text so the highlight segment will be\r\n  // serroiunded by a tag.\r\n  addTag = (event, data) => {\r\n    this.state.isUpTodate = false;\r\n    let tagName = window.getSelection().anchorNode.parentElement.id;\r\n    let text;\r\n    if (tagName != \"no_tag\") {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        \"<\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.highlightedText +\r\n        \"</\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.postHighlightedText;\r\n    } else {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        this.state.highlightedText +\r\n        this.state.postHighlightedText;\r\n    }\r\n    this.state.fileContentClean = text;\r\n    this.setTags();\r\n    this.setState({ fileContentClean: text });\r\n  };\r\n\r\n  // This funtiuos reads the clean text (with the tags), and turns it to the\r\n  // form which the text is representd to the user.\r\n  setTags = () => {\r\n    let text = this.state.fileContentClean;\r\n    let higlight = \"<[^<]+>\";\r\n    let regexHiglight = RegExp(higlight);\r\n    let closertag = \"</[^<]+>\";\r\n    let regexclosetag = RegExp(closertag);\r\n    let par;\r\n    let spanIndex = 0;\r\n\r\n    //Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let formattedparts = [];\r\n\r\n    for (let index = 0; index < parts.length; index++) {\r\n      //cheking that the current part is not a tag\r\n      if (\r\n        !(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))\r\n      ) {\r\n        if (parts[index] != \"\") formattedparts.push(parts[index]);\r\n      }\r\n      // handeling an open tag\r\n      else {\r\n        let currenttag = parts[index];\r\n        //building the inner tag - cuts inner text\r\n        currenttag = currenttag.substring(1, currenttag.length - 1);\r\n        let rightclosertag = \"</\" + currenttag + \">\";\r\n        let regExpRightcloser = RegExp(rightclosertag);\r\n        //we want to keep running on string until we'll meet the right closer tag\r\n        let newindex = index + 1;\r\n        while (\r\n          !regExpRightcloser.test(parts[newindex]) &&\r\n          newindex < parts.length\r\n        ) {\r\n          newindex++;\r\n        }\r\n        //if the closing tag matches the opening tag found\r\n        if (newindex < parts.length) {\r\n          //builds the new string for injection\r\n          let newstring = \"%\" + currenttag + \"%\";\r\n\r\n          for (\r\n            let innerindex = index + 1;\r\n            innerindex < newindex;\r\n            innerindex++\r\n          ) {\r\n            newstring = newstring + parts[innerindex];\r\n          }\r\n\r\n          formattedparts.push(newstring);\r\n          index = newindex;\r\n        } else {\r\n          //if theres no closing tag to a tag so we copy the opening tag as it is\r\n          formattedparts.push(parts[index]);\r\n        }\r\n      }\r\n    }\r\n\r\n    //console.log(\"correct\");\r\n\r\n    let tagRegex = RegExp(\"%.+%.+\");\r\n    let taggedText = (\r\n      <div>\r\n        {\" \"}\r\n        {formattedparts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            id={i}\r\n            style={\r\n              tagRegex.test(part)\r\n                ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\r\n                  //part.toLowerCase() === higlight.toLowerCase()\r\n                  {\r\n                    fontWeight: \"bold\",\r\n                    backgroundColor: this.state.tagsAndColors[\r\n                      part.split(\"%\")[1]\r\n                    ],\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {part.split(\"%\").reverse()[0]}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n    this.setState({ formattedtext: formattedparts });\r\n    this.setState({ fileContent: taggedText });\r\n  };\r\n\r\n  isSpecialChar = (character) => {\r\n    if (character == \"\\n\") {\r\n      let i = 0;\r\n    }\r\n    for (let i = 0; i < this.state.specialCharsList.length; i++) {\r\n      if (this.state.specialCharsList[i] == character) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  //alert capara\r\n  handleClick1(e) {\r\n    e.preventDefault();\r\n    Alert.info(\r\n      \"Make sure to save your changes before returning to the Main Menu\",\r\n      {\r\n        position: \"top\",\r\n        timeout: \"none\",\r\n        onClose: function () {\r\n          console.log(\"onClose Fired!\");\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  // Render the frame of the site and get the cueent page from the method this.returnPageLayout()\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div align=\"center\" style={divStyle}>\r\n          <img\r\n            align=\"right\"\r\n            src={biulogo}\r\n            alt=\"biulogo\"\r\n            style={{ width: \"auto\", height: \"0.75cm\" }}\r\n          />\r\n          <img align=\"left\" src={logo} alt=\"logo\" />\r\n          <br></br>\r\n          <br></br>\r\n          <h2>\r\n            {\" \"}\r\n            <b>Jerusalem Knowledge Center</b>{\" \"}\r\n          </h2>\r\n          <h1>\r\n            <b>Tag Editor</b>\r\n          </h1>\r\n          {this.returnPageLayout()}\r\n          <div>\r\n            <span>{this.props.children}</span>\r\n            <Alert stack={{ limit: 3 }} />\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  // Returns the current page the web sites has to present.\r\n  returnPageLayout = () => {\r\n    if (this.state.pageLayout == \"choose\") {\r\n      return this.returnMainMenuLayout();\r\n    } else if (this.state.pageLayout == \"edit\") {\r\n      return this.returnTaggedTextArea();\r\n    }\r\n  };\r\n  // Returns the page\r\n  returnMainMenuLayout = () => {\r\n    let page = (\r\n      <div>\r\n        <br></br>\r\n        <table>\r\n          <tr>\r\n            <td align=\"center\">\r\n              {\" \"}\r\n              <b>1. Select an existing document</b>{\" \"}\r\n            </td>\r\n            <td>\r\n              <select name=\"fileChoser\" id=\"fileChoser\">\r\n                {\" \"}\r\n                {this.createList(this.state.filesList)}\r\n              </select>{\" \"}\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td align=\"center\">\r\n              <b> -or- </b>{\" \"}\r\n            </td>\r\n            <td> </td>\r\n          </tr>\r\n          <tr>\r\n            <td align=\"center\">\r\n              <b>\r\n                Upload New File to Server <br></br>{\" \"}\r\n              </b>\r\n            </td>\r\n            <td>\r\n              {\" \"}\r\n              <input\r\n                type=\"file\"\r\n                id=\"text_file\"\r\n                onChange={this.handleClickOnUpload}\r\n              ></input>\r\n            </td>\r\n          </tr>\r\n          <br></br>\r\n          <tr>\r\n            <td>\r\n              <b> 2. Choose a configuration file: </b>\r\n            </td>\r\n            <td>\r\n              <select name=\"conffileChoser\" id=\"conffileChoser\">\r\n                {this.createList(this.state.confFileList)}{\" \"}\r\n              </select>\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td> </td>\r\n            <td align=\"left\">\r\n              <br></br>\r\n              <button style={buttonStyle} onClick={this.handleClickLoadFiles}>\r\n                {\" \"}\r\n                Load files\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </table>\r\n        <br></br>\r\n        <p>\r\n          <b>Download file</b>\r\n          <br></br>\r\n          <select name=\"actionChooser\" id=\"actionChooser\">\r\n            {\" \"}\r\n            {this.createList(this.state.actions)}\r\n          </select>{\" \"}\r\n          <select name=\"fileToDownloadChooser\" id=\"fileToDownloadChooser\">\r\n            {\" \"}\r\n            {this.createList(this.state.filesList)}\r\n          </select>{\" \"}\r\n          <select\r\n            name=\"conffileToDownloadChooser\"\r\n            id=\"conffileToDownloadChooser\"\r\n          >\r\n            {this.createList(this.state.confFileList)}{\" \"}\r\n          </select>\r\n          {\"  \"}\r\n          <button style={buttonStyle} onClick={this.handleClickOnDownload}>\r\n            {\" \"}\r\n            Download file{\" \"}\r\n          </button>\r\n        </p>\r\n        <table>\r\n          <td align=\"left\">\r\n            {\" \"}\r\n            <h6>\r\n              {\" \"}\r\n              <b>© Sapir Kikoz, Yifat Yankovich - </b>\r\n            </h6>{\" \"}\r\n          </td>\r\n          <td align=\"right\">\r\n            {\" \"}\r\n            <h6> September 2020 </h6>\r\n          </td>\r\n        </table>\r\n      </div>\r\n    );\r\n    return page;\r\n  };\r\n  //colspan=\"2\">\r\n  returnEditFileLayout = () => {\r\n    let page = (\r\n      <div>\r\n        <h6>\r\n          {\" \"}\r\n          <b>\r\n            Choosen Article: {this.state.filename}\r\n            <br></br>\r\n            Choosen Configuration File: {this.state.conffilename}\r\n          </b>\r\n        </h6>\r\n\r\n        <br></br>\r\n        <h6>\r\n          {\" \"}\r\n          <b>Add or edit tags by selecting and right clicking the text.</b>{\" \"}\r\n        </h6>\r\n        <table length=\"100%\">\r\n          <tr length=\"100%\">\r\n            <td length=\"25%\"> </td>\r\n            <td length=\"50%\">\r\n              {\" \"}\r\n              <ContextMenuTrigger id=\"some_unique_identifier\">\r\n                <div\r\n                  id=\"text\"\r\n                  onClickCapture={this.captureHighlightedText}\r\n                  style={{\r\n                    backgroundColor: \"white\",\r\n                    borderStyle: \"solid\",\r\n                    height: \"8cm\",\r\n                    width: \"30cm\",\r\n                    overflowY: \"scroll\",\r\n                    overflowX: \"hidden\",\r\n                  }}\r\n                >\r\n                  {this.state.fileContent}\r\n                </div>{\" \"}\r\n              </ContextMenuTrigger>\r\n              <ContextMenu id=\"some_unique_identifier\">\r\n                {this.createMenu()}\r\n              </ContextMenu>\r\n            </td>\r\n            <td length=\"25%\"> </td>\r\n          </tr>\r\n        </table>\r\n        <p>\r\n          <button style={buttonStyle} onClick={this.handleSaveFile}>\r\n            {\" \"}\r\n            Save Work on System\r\n          </button>\r\n          {\"     \"}\r\n          <button\r\n            style={buttonStyle}\r\n            onClick={this.handleClickRetrunToMainMenu}\r\n          >\r\n            {\" \"}\r\n            Return to Main Menu\r\n          </button>\r\n          <div>\r\n            <a\r\n              href=\"#\"\r\n              onClick={this.handleClick1}\r\n              onClose={this.handleOnClose}\r\n            ></a>\r\n          </div>\r\n        </p>\r\n      </div>\r\n    );\r\n    return page;\r\n  };\r\n\r\n  //<taggedTextArea\r\n  //      key=\"taddedTextArea\"\r\n  //      fileContent={this.props.fileContentClean}\r\n  //      tags={this.state.tagsList}\r\n  //      specialCharsList={this.state.specialCharsList}\r\n  //    />\r\n  returnTaggedTextArea = () => {\r\n    let page = (\r\n      <div>\r\n        <h6>\r\n          {\" \"}\r\n          <b>\r\n            Choosen Article: {this.state.filename}\r\n            <br></br>\r\n            Choosen Configuration File: {this.state.conffilename}\r\n          </b>\r\n        </h6>\r\n\r\n        <br></br>\r\n        <h6>\r\n          {\" \"}\r\n          <b>Add or edit tags by selecting and right clicking the text.</b>{\" \"}\r\n        </h6>\r\n        <TaggedTextArea\r\n          tagsAndColors={this.state.tagsAndColors}\r\n          tagsList={this.state.tagsList}\r\n          specialCharsList={this.state.specialCharsList}\r\n          fileContent={this.state.fileContentClean}\r\n          updateFileContent={this.updateFileContent}\r\n        />\r\n        <p>\r\n          <button style={buttonStyle} onClick={this.handleSaveFile}>\r\n            {\" \"}\r\n            Save Work on System\r\n          </button>\r\n          {\"     \"}\r\n          <button\r\n            style={buttonStyle}\r\n            onClick={this.handleClickRetrunToMainMenu}\r\n          >\r\n            {\" \"}\r\n            Return to Main Menu\r\n          </button>\r\n          <div>\r\n            <a\r\n              href=\"#\"\r\n              onClick={this.handleClick1}\r\n              onClose={this.handleOnClose}\r\n            ></a>\r\n          </div>\r\n        </p>\r\n      </div>\r\n    );\r\n    return page;\r\n  };\r\n\r\n  updateFileContent = (content, htmlForm) => {\r\n    this.state.isUpTodate = false;\r\n    this.setState({ fileContentClean: content });\r\n    this.setState({ fileHtmlForm: htmlForm });\r\n  };\r\n\r\n  // Creates a menu that appears when the user press the right click.\r\n  // Creates only the menu items and not the menu itself.\r\n  // The menu created depends on the value of this.state.isHighlightedTextTagged\r\n  // that dends on the valye of this.state.highlightedText\r\n  // If the highlighted text is not serrounded by a tag, the menu contains\r\n  // all the tags avaliable, and if not, the menu contains only the option\r\n  // \"remove tag:.\r\n  createMenu = () => {\r\n    let menu;\r\n    if (this.state.isHighlightedTextTagged == false) {\r\n      menu = this.state.tagsList.map((part, i) => (\r\n        <MenuItem key={i} id={part} onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id={part} style={{ backgroundColor: \"white\" }}>\r\n            Set as {part}{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      ));\r\n    } else {\r\n      menu = (\r\n        <MenuItem id=\"no_tag\" onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id=\"no_tag\" style={{ backgroundColor: \"white\" }}>\r\n            Remove tag{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      );\r\n    }\r\n    return menu;\r\n  };\r\n\r\n  // Gets a list of string and make a drop down option list of them.\r\n  // Creates only the list of the drop down list <option>\r\n  // and not the <select> drop down list itself.\r\n  createList = (list) => {\r\n    return list.map((part, i) => <option value={part}> {part}</option>);\r\n  };\r\n}\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}