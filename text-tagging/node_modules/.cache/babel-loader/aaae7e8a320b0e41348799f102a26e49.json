{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\taggedTextArea.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\n\nclass taggedTextArea extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // Used to keep the text the user marked\n      preHighlightedText: \"\",\n      highlightedText: \"\",\n      postHighlightedText: \"\",\n      preHtmlFormatedText: [],\n      isHighlightedTextTagged: false,\n      isUpTodate: true\n    };\n\n    this.isSpecialChar = character => {\n      if (character == \"\\n\") {\n        let i = 0;\n      }\n\n      for (let i = 0; i < this.state.specialCharsList.length; i++) {\n        if (this.state.specialCharsList[i] == character) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    this.setTags = () => {\n      if (this.props.fileContent === \"\") {\n        return;\n      }\n\n      let text = this.props.fileContent;\n      let regexIsSpace = RegExp(\"(\\n|\\r)\"); // Separete the text into lines.\n\n      let lines = text.split(regexIsSpace); // Delete empty lines.\n\n      let tempLines = [];\n\n      for (let index = 0; index < lines.length; index++) {\n        if (lines[index] != \"\" && !regexIsSpace.test(lines[index])) {\n          tempLines.push(lines[index]);\n        }\n      }\n\n      lines = tempLines; // Work on each line seperately.\n      // Convert every line to a format that later will be converted,\n      // to an html format.\n\n      let convertedLine = \"\";\n      let convertedLines = [];\n      let htmlFormLines = [];\n\n      for (let index = 0; index < lines.length; index++) {\n        convertedLine = this.separateTaggedFromUntaggedText(lines[index]);\n        convertedLines.push(convertedLine);\n        htmlFormLines.push(this.makeHtmlForm(index, convertedLine));\n      }\n\n      this.setState({\n        preHtmlFormatedText: convertedLines\n      });\n      let htmlForm = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, htmlFormLines.map((line, i) => React.createElement(\"span\", {\n        key: i,\n        id: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, line, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n      return htmlForm;\n    };\n\n    this.separateTaggedFromUntaggedText = text => {\n      let higlight = \"<[^<]+>\";\n      let regexIstag = RegExp(higlight);\n      let regexIsCloseTag = RegExp(\"</[^<]+>\");\n      let formattedparts = []; // Seperates plain text from tags.\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\")); // Handle each part.\n\n      for (let index = 0; index < parts.length; index++) {\n        // If the tag is a plain text.\n        // (or a closing tag without an opening tag matches it).\n        if (!regexIstag.test(parts[index]) && parts[index] != \"\" || regexIsCloseTag.test(parts[index])) {\n          // Add the text to the proccesd text.\n          formattedparts.push(parts[index]);\n        } // If the tag is an open tag.\n        else if (regexIstag.test(parts[index]) && !regexIsCloseTag.test(parts[index])) {\n            // Create a regex that checks for the closer tag matches the current tag.\n            let currenttag = parts[index].substring(1, parts[index].length - 1);\n            let regexIsSearchedTag = RegExp(\"</\" + currenttag + \">\"); // Search the closer tag matches the currnt tag.\n\n            let serchingIndex = index + 1;\n\n            while (!regexIsSearchedTag.test(parts[serchingIndex]) && serchingIndex < parts.length) {\n              serchingIndex++;\n            } // If a matching closer tag was not found.\n\n\n            if (serchingIndex >= parts.length) {\n              // Consider the tag as a plain text.\n              // Add the text to the proccesd text.\n              formattedparts.push(parts[index]);\n            } // If a matching closer tag was found.\n            else {\n                // Make a string contains all the plain text surrounded by the tag.\n                let currentTaggedText = \"\";\n\n                for (let copyingIndex = index + 1; copyingIndex < serchingIndex; copyingIndex++) {\n                  currentTaggedText += parts[copyingIndex];\n                } // Add the text to the proccesd text, with a prefix that tells the tag name.\n\n\n                formattedparts.push(\"%\" + currenttag + \"%\" + currentTaggedText);\n                index = serchingIndex;\n              }\n          }\n      }\n\n      return formattedparts;\n    };\n\n    this.makeHtmlForm = (lineNumber, line) => {\n      let regexIsTagged = RegExp(\"%.+%.+\");\n      let htmlForm = React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \" \", line.map((part, i) => React.createElement(\"span\", {\n        key: lineNumber + \",\" + i,\n        id: lineNumber + \",\" + i,\n        style: regexIsTagged.test(part) ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\n        //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: this.props.tagsAndColors[part.split(\"%\")[1]]\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, part.split(\"%\").reverse()[0])));\n      return htmlForm;\n    };\n\n    this.addTag = (event, data) => {\n      this.state.isUpTodate = false;\n      let tagName = window.getSelection().anchorNode.parentElement.id;\n      let text;\n\n      if (tagName != \"no_tag\") {\n        text = this.state.preHighlightedText + \"<\" + tagName + \">\" + this.state.highlightedText + \"</\" + tagName + \">\" + this.state.postHighlightedText;\n      } else {\n        text = this.state.preHighlightedText + this.state.highlightedText + this.state.postHighlightedText;\n      }\n\n      this.state.fileContentClean = text;\n      this.setTags();\n      this.setState({\n        fileContentClean: text\n      });\n    };\n\n    this.captureHighlightedText = (event, data) => {\n      if (window.getSelection() == NaN) {\n        return;\n      }\n\n      let base = window.getSelection().baseOffset;\n      let extent = window.getSelection().extentOffset;\n      let formatedText = this.state.preHtmlFormatedText;\n      borders = this.calcBordersOfHighlightedText(base, extent);\n      borders = this; // The text is seperated to parts.\n      // Get the index of the highlited text in his part.\n      //let leftIndexOfHighlightedChunkAtHisSpan;\n      //let rightIndexOfHighlightedChunkAtHisSpan;\n      //if (\n      //  window.getSelection().baseOffset <= window.getSelection().extentOffset\n      //) {\n      //  leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n      //  rightIndexOfHighlightedChunkAtHisSpan = window.getSelection()\n      //    .extentOffset;\n      //} else if (\n      //  window.getSelection().baseOffset > window.getSelection().extentOffset\n      //) {\n      //  leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\n      //  rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\n      //}\n      // Get the part number the highlited text is in.\n      //let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\n      //  .id;\n      //calculate the offset from the beggining of the text\n      //let indexOfCleanText = 0;\n      //for (let i = 0; i < spanOfHighlightedChunk; i++) {\n      //checking chunk if its not start with % we summing the length\n      //  if (this.state.formattedtext[i][0] != \"%\") {\n      //    indexOfCleanText += this.state.formattedtext[i].length;\n      //  } else {\n      //    let currentChunk = this.state.formattedtext[i].split(\"%\");\n      //    let tagLength = currentChunk[1].length;\n      //    let textlength = currentChunk[2].length;\n      //    indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\n      //  }\n      //}\n      // indexOfCleanTextc contains the location of the first caracter chosen in the text as\n      // it in raw text.\n      // Sreaching for the begining of the highlighted word.\n      //let cleanText = this.state.fileContentClean;\n      //let begining;\n      // If the first chracter is in a begining of a chunk.\n      //if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\n      //  begining = indexOfCleanText;\n      //} else {\n      //  let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\n      //  for (\n      //    ;\n      //    indexToFindTheHighligtedWordStart >= 0;\n      //    indexToFindTheHighligtedWordStart--\n      //  ) {\n      // we reached the befining of the current paragraph.\n      //    if (indexToFindTheHighligtedWordStart == 0) {\n      //      begining = indexOfCleanText;\n      //      // If we reached a space character.\n      //    } else {\n      //      let previousChar =\n      //        cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1];\n      //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\n      //      if (this.isSpecialChar(previousChar)) {\n      //  previousChar == \" \" ||\n      //  previousChar == \"\\n\" ||\n      //  previousChar == \"\\t\"\n      //         begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\n      //         break;\n      //       }\n      //     }\n      //   }\n      //}\n      //let textInChunk = window.getSelection().baseNode.data;\n      //let end;\n      //in case of automatic space added by clicking\n      //if (\n      //  rightIndexOfHighlightedChunkAtHisSpan !=\n      //    leftIndexOfHighlightedChunkAtHisSpan &&\n      //  this.isSpecialChar(\n      //    cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1]\n      //  )\n      //) {\n      //  end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\n      //} else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\n      // If the last chracter is in the end of a chunk.\n      //  end = indexOfCleanText + textInChunk.length;\n      //} else {\n      //  let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\n      //  for (\n      //    ;\n      //   indexToFindTheHighligtedWordEnd <= textInChunk.length;\n      //  indexToFindTheHighligtedWordEnd++\n      //) {\n      //  // If we reached the end of the paragraph.\n      //  if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\n      //    end = indexOfCleanText + textInChunk.length;\n      // If we reached a white space.\n      //  } else {\n      //    let nextChar =\n      //      cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\n      //    if (this.isSpecialChar(nextChar)) {\n      //      //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\n      //      end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\n      //      break;\n      //    }\n      //  }\n      // }\n      //}\n\n      let preTag;\n      let inTag;\n      let postTag; // If the highlited text is not already tagged.\n\n      if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\n        preTag = cleanText.substring(0, begining);\n        inTag = cleanText.substring(begining, end);\n        postTag = cleanText.substring(end, cleanText.length);\n        this.state.isHighlightedTextTagged = false; //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\n        //preTag = cleanText.substring(0, indexOfCleanText);\n        //inTag = cleanText.substring(\n        //  indexOfCleanText,\n        //  indexOfCleanText + window.getSelection().toString().length\n        //);\n        //postTag = cleanText.substring(\n        //  indexOfCleanText + window.getSelection().toString().length,\n        //  cleanText.length\n        //);\n        //this.state.isHighlightedTextTagged = false;\n      } else {\n        let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\"%\");\n        let tagLength = currentChunk[1].length;\n        preTag = cleanText.substring(0, indexOfCleanText);\n        inTag = cleanText.substring(indexOfCleanText + tagLength + 2, indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length);\n        postTag = cleanText.substring(indexOfCleanText + this.state.formattedtext[spanOfHighlightedChunk].length + tagLength + 3, cleanText.length);\n        this.state.isHighlightedTextTagged = true;\n      }\n\n      this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\n      this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\n      this.state.begining = begining;\n      this.state.end = end;\n      this.setState({\n        preHighlightedText: preTag\n      });\n      this.setState({\n        highlightedText: inTag\n      });\n      this.setState({\n        postHighlightedText: postTag\n      });\n    };\n\n    this.calcBordersOfHighlightedText = (base, extent) => {\n      let leftBorder;\n      let rightBorder;\n\n      if (base <= extent) {\n        leftBorder = base;\n        rightBorder = extent;\n      } else if (base > extent) {\n        leftBorder = extent;\n        rightBorder = base;\n      }\n\n      return [leftBorder, rightBorder];\n    };\n\n    this.extendHighlightToEntireWord = (leftIndex, rightIndex) => {\n      // Get the part number the highlited text is in.\n      let lineAndparagraph = window.getSelection().anchorNode.parentElement.id;\n      lineAndparagraph = lineAndparagraph.split(\",\");\n      let line = lineAndparagraph[0];\n      let paragraph = lineAndparagraph[1];\n      let textParagraph = this.state.preHtmlFormatedText[line][paragraph]; // Sreaching for the begining of the highlighted word.\n\n      let begining; // If the first chracter is in a begining of a chunk.\n\n      if (leftIndex == 0) {\n        begining = leftIndex;\n      } else {\n        for (let index = leftIndex; index >= 0; index--) {\n          // we reached the begining of the current paragraph.\n          if (index == 0) {\n            begining = index; // If we reached a space character.\n          } else {\n            let previousChar = textParagraph[index - 1]; //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\n\n            if (this.isSpecialChar(previousChar)) {\n              //  previousChar == \" \" ||\n              //  previousChar == \"\\n\" ||\n              //  previousChar == \"\\t\"\n              begining = index;\n              break;\n            }\n          }\n        }\n      }\n\n      let end; //in case of automatic space added by clicking\n\n      if (rightIndex != leftIndex && this.isSpecialChar(textParagraph[rightIndex - 1])) {\n        end = rightIndex - 1;\n      } else if (rightIndex == textParagraph.length) {\n        // If the last chracter is in the end of a chunk.\n        end = rightIndex;\n      } else {\n        for (let index = rightIndex; index <= textParagraph.length; index++) {\n          // If we reached the end of the paragraph.\n          if (index == textParagraph.length) {\n            end = index; // If we reached a white space.\n          } else {\n            let nextChar = textParagraph[index];\n\n            if (this.isSpecialChar(nextChar)) {\n              end = index;\n              break;\n            }\n          }\n        }\n      }\n\n      return [begining, end];\n    };\n\n    this.clacOfsetFromTheStartOfTheText = () => {\n      // Get the part number the highlited text is in.\n      let lineAndparagraph = window.getSelection().anchorNode.parentElement.id;\n      lineAndparagraph = lineAndparagraph.split(\",\");\n      let line = lineAndparagraph[0];\n      let paragraph = lineAndparagraph[1];\n      let text = this.state.preHtmlFormatedText; //calculate the offset from the beggining of the text\n      // Calc the number of letter in the previous lines.\n\n      let offset = 0; // Go through the text lines.\n\n      for (let i = 0; i <= line; i++) {\n        // Go through the partition of the line.\n        // If the line is the line where the highlighted text is in, run until\n        // the part where the highlighted text is found.\n        let end = text[i].length;\n\n        if (i = line) {\n          end = paragraph;\n        }\n\n        for (let j = 0; j < end; j++) {\n          // In case the current part does not contain highlighted text.\n          if (text[i][j][0] != \"%\") {\n            offset += this.state.formattedtext[i][j].length;\n          } // In case the current part contains highlighted text.\n          else {\n              let currentPartText = text[i][j].split(\"%\");\n              let tagLength = currentPartText[1].length;\n              let textlength = currentPartText[2].length; // 2 * tagLength + 5:\n              // 2 * tagLength: stands for the 2 appearance of the tag's name, at the text.\n              // (One appearance of the tag in the opening tag and the second in the closing tag).\n              // 5: stands for the characters : <> </>, <> appear in the opening tag,\n              // and </> in the closing tag.\n\n              offset += textlength + 2 * tagLength + 5;\n            }\n        }\n      }\n\n      return offset; // Add to the calculted offset the highlighted text offset from the beginng of it's part\n      // in the line the text is found.\n      //.offset += leftBorder;\n    };\n\n    this.render = () => {\n      let page = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 515\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        length: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 516\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        length: \"100%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 517\n        },\n        __self: this\n      }, React.createElement(\"td\", {\n        length: \"25%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518\n        },\n        __self: this\n      }, \" \"), React.createElement(\"td\", {\n        length: \"50%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 519\n        },\n        __self: this\n      }, \" \", React.createElement(ContextMenuTrigger, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"text\",\n        onClickCapture: this.captureHighlightedText,\n        style: {\n          backgroundColor: \"white\",\n          borderStyle: \"solid\",\n          height: \"8cm\",\n          width: \"30cm\",\n          overflowY: \"scroll\",\n          overflowX: \"hidden\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 522\n        },\n        __self: this\n      }, this.setTags(this.props.fileContent)), \" \"), React.createElement(ContextMenu, {\n        id: \"some_unique_identifier\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537\n        },\n        __self: this\n      }, this.createMenu())), React.createElement(\"td\", {\n        length: \"25%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 541\n        },\n        __self: this\n      }, \" \"))));\n      return page;\n    };\n\n    this.createMenu = () => {\n      let menu;\n\n      if (this.state.isHighlightedTextTagged == false) {\n        menu = this.props.tagsList.map((part, i) => React.createElement(MenuItem, {\n          key: i,\n          id: part,\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 553\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: part,\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 555\n          },\n          __self: this\n        }, \"Set as \", part, \" \")));\n      } else {\n        menu = React.createElement(MenuItem, {\n          id: \"no_tag\",\n          onClick: this.addTag,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 562\n          },\n          __self: this\n        }, \" \", React.createElement(\"div\", {\n          id: \"no_tag\",\n          style: {\n            backgroundColor: \"white\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 564\n          },\n          __self: this\n        }, \"Remove tag\", \" \"));\n      }\n\n      return menu;\n    };\n\n    this.createList = list => {\n      return list.map((part, i) => React.createElement(\"option\", {\n        value: part,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 577\n        },\n        __self: this\n      }, \" \", part));\n    };\n  }\n\n  rrender() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, \" \", React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }, \"hiiiii \"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508\n      },\n      __self: this\n    }, \" \", this.props.fileContent, \" \"), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, this.props.tags));\n  }\n\n}\n\nexport default taggedTextArea;","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/taggedTextArea.jsx"],"names":["React","Component","ReactDOM","ContextMenu","MenuItem","ContextMenuTrigger","taggedTextArea","state","preHighlightedText","highlightedText","postHighlightedText","preHtmlFormatedText","isHighlightedTextTagged","isUpTodate","isSpecialChar","character","i","specialCharsList","length","setTags","props","fileContent","text","regexIsSpace","RegExp","lines","split","tempLines","index","test","push","convertedLine","convertedLines","htmlFormLines","separateTaggedFromUntaggedText","makeHtmlForm","setState","htmlForm","map","line","higlight","regexIstag","regexIsCloseTag","formattedparts","parts","currenttag","substring","regexIsSearchedTag","serchingIndex","currentTaggedText","copyingIndex","lineNumber","regexIsTagged","part","fontWeight","backgroundColor","tagsAndColors","reverse","addTag","event","data","tagName","window","getSelection","anchorNode","parentElement","id","fileContentClean","captureHighlightedText","NaN","base","baseOffset","extent","extentOffset","formatedText","borders","calcBordersOfHighlightedText","preTag","inTag","postTag","formattedtext","spanOfHighlightedChunk","cleanText","begining","end","currentChunk","tagLength","indexOfCleanText","leftIndex","leftIndexOfHighlightedChunkAtHisSpan","rightIndex","rightIndexOfHighlightedChunkAtHisSpan","leftBorder","rightBorder","extendHighlightToEntireWord","lineAndparagraph","paragraph","textParagraph","previousChar","nextChar","clacOfsetFromTheStartOfTheText","offset","j","currentPartText","textlength","render","page","borderStyle","height","width","overflowY","overflowX","createMenu","menu","tagsList","createList","list","rrender","tags"],"mappings":"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MAoD,OANA,GAOA,GAPA,GAQA,KAAKtD,KAAL,CAAWG,mBATb;AAUD,OAXD,MAWO;AACLY,QAAAA,IAAI,GACF,KAAKf,KAAL,CAAWC,kBAAX,GACA,KAAKD,KAAL,CAAWE,eADX,GAEA,KAAKF,KAAL,CAAWG,mBAHb;AAID;;AACD,WAAKH,KAAL,CAAW4D,gBAAX,GAA8B7C,IAA9B;AACA,WAAKH,OAAL;AACA,WAAKiB,QAAL,CAAc;AAAE+B,QAAAA,gBAAgB,EAAE7C;AAApB,OAAd;AACD,KA1MoC;;AAAA,SA4MrC8C,sBA5MqC,GA4MZ,CAACT,KAAD,EAAQC,IAAR,KAAiB;AACxC,UAAIE,MAAM,CAACC,YAAP,MAAyBM,GAA7B,EAAkC;AAChC;AACD;;AAED,UAAIC,IAAI,GAAGR,MAAM,CAACC,YAAP,GAAsBQ,UAAjC;AACA,UAAIC,MAAM,GAAGV,MAAM,CAACC,YAAP,GAAsBU,YAAnC;AACA,UAAIC,YAAY,GAAG,KAAKnE,KAAL,CAAWI,mBAA9B;AAEAgE,MAAAA,OAAO,GAAG,KAAKC,4BAAL,CAAkCN,IAAlC,EAAwCE,MAAxC,CAAV;AACAG,MAAAA,OAAO,GAAG,IAAV,CAVwC,CAYxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAIE,MAAJ;AACA,UAAIC,KA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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\n\r\nclass taggedTextArea extends Component {\r\n  state = {\r\n    // Used to keep the text the user marked\r\n    preHighlightedText: \"\",\r\n    highlightedText: \"\",\r\n    postHighlightedText: \"\",\r\n\r\n    preHtmlFormatedText: [],\r\n\r\n    isHighlightedTextTagged: false,\r\n    isUpTodate: true,\r\n  };\r\n\r\n  isSpecialChar = (character) => {\r\n    if (character == \"\\n\") {\r\n      let i = 0;\r\n    }\r\n    for (let i = 0; i < this.state.specialCharsList.length; i++) {\r\n      if (this.state.specialCharsList[i] == character) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // This funtiuos reads the clean text (with the tags), and turns it to the\r\n  // form which the text is representd to the user.\r\n  // separateTaggedFromUntaggedText\r\n  setTags = () => {\r\n    if (this.props.fileContent === \"\") {\r\n      return;\r\n    }\r\n\r\n    let text = this.props.fileContent;\r\n    let regexIsSpace = RegExp(\"(\\n|\\r)\");\r\n\r\n    // Separete the text into lines.\r\n    let lines = text.split(regexIsSpace);\r\n\r\n    // Delete empty lines.\r\n    let tempLines = [];\r\n    for (let index = 0; index < lines.length; index++) {\r\n      if (lines[index] != \"\" && !regexIsSpace.test(lines[index])) {\r\n        tempLines.push(lines[index]);\r\n      }\r\n    }\r\n    lines = tempLines;\r\n\r\n    // Work on each line seperately.\r\n    // Convert every line to a format that later will be converted,\r\n    // to an html format.\r\n    let convertedLine = \"\";\r\n    let convertedLines = [];\r\n    let htmlFormLines = [];\r\n    for (let index = 0; index < lines.length; index++) {\r\n      convertedLine = this.separateTaggedFromUntaggedText(lines[index]);\r\n      convertedLines.push(convertedLine);\r\n      htmlFormLines.push(this.makeHtmlForm(index, convertedLine));\r\n    }\r\n\r\n    this.setState({ preHtmlFormatedText: convertedLines });\r\n\r\n    let htmlForm = (\r\n      <React.Fragment>\r\n        {htmlFormLines.map((line, i) => (\r\n          <span key={i} id={i}>\r\n            {line}\r\n            <br />\r\n          </span>\r\n        ))}\r\n        <br />\r\n      </React.Fragment>\r\n    );\r\n\r\n    return htmlForm;\r\n  };\r\n\r\n  separateTaggedFromUntaggedText = (text) => {\r\n    let higlight = \"<[^<]+>\";\r\n    let regexIstag = RegExp(higlight);\r\n    let regexIsCloseTag = RegExp(\"</[^<]+>\");\r\n    let formattedparts = [];\r\n\r\n    // Seperates plain text from tags.\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n\r\n    // Handle each part.\r\n    for (let index = 0; index < parts.length; index++) {\r\n      // If the tag is a plain text.\r\n      // (or a closing tag without an opening tag matches it).\r\n      if (\r\n        (!regexIstag.test(parts[index]) && parts[index] != \"\") ||\r\n        regexIsCloseTag.test(parts[index])\r\n      ) {\r\n        // Add the text to the proccesd text.\r\n        formattedparts.push(parts[index]);\r\n      }\r\n      // If the tag is an open tag.\r\n      else if (\r\n        regexIstag.test(parts[index]) &&\r\n        !regexIsCloseTag.test(parts[index])\r\n      ) {\r\n        // Create a regex that checks for the closer tag matches the current tag.\r\n        let currenttag = parts[index].substring(1, parts[index].length - 1);\r\n        let regexIsSearchedTag = RegExp(\"</\" + currenttag + \">\");\r\n\r\n        // Search the closer tag matches the currnt tag.\r\n        let serchingIndex = index + 1;\r\n        while (\r\n          !regexIsSearchedTag.test(parts[serchingIndex]) &&\r\n          serchingIndex < parts.length\r\n        ) {\r\n          serchingIndex++;\r\n        }\r\n\r\n        // If a matching closer tag was not found.\r\n        if (serchingIndex >= parts.length) {\r\n          // Consider the tag as a plain text.\r\n          // Add the text to the proccesd text.\r\n          formattedparts.push(parts[index]);\r\n        }\r\n        // If a matching closer tag was found.\r\n        else {\r\n          // Make a string contains all the plain text surrounded by the tag.\r\n          let currentTaggedText = \"\";\r\n          for (\r\n            let copyingIndex = index + 1;\r\n            copyingIndex < serchingIndex;\r\n            copyingIndex++\r\n          ) {\r\n            currentTaggedText += parts[copyingIndex];\r\n          }\r\n\r\n          // Add the text to the proccesd text, with a prefix that tells the tag name.\r\n          formattedparts.push(\"%\" + currenttag + \"%\" + currentTaggedText);\r\n          index = serchingIndex;\r\n        }\r\n      }\r\n    }\r\n\r\n    return formattedparts;\r\n  };\r\n\r\n  makeHtmlForm = (lineNumber, line) => {\r\n    let regexIsTagged = RegExp(\"%.+%.+\");\r\n    let htmlForm = (\r\n      <React.Fragment>\r\n        {\" \"}\r\n        {line.map((part, i) => (\r\n          <span\r\n            key={lineNumber + \",\" + i}\r\n            id={lineNumber + \",\" + i}\r\n            style={\r\n              regexIsTagged.test(part)\r\n                ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\r\n                  //part.toLowerCase() === higlight.toLowerCase()\r\n                  {\r\n                    fontWeight: \"bold\",\r\n                    backgroundColor: this.props.tagsAndColors[\r\n                      part.split(\"%\")[1]\r\n                    ],\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {part.split(\"%\").reverse()[0]}\r\n          </span>\r\n        ))}\r\n      </React.Fragment>\r\n    );\r\n\r\n    return htmlForm;\r\n  };\r\n\r\n  // When a user Highlights text segment and choose to tag that segment,\r\n  // this function is called.\r\n  // Tthe funtion update the whole text so the highlight segment will be\r\n  // serroiunded by a tag.\r\n  addTag = (event, data) => {\r\n    this.state.isUpTodate = false;\r\n    let tagName = window.getSelection().anchorNode.parentElement.id;\r\n    let text;\r\n    if (tagName != \"no_tag\") {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        \"<\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.highlightedText +\r\n        \"</\" +\r\n        tagName +\r\n        \">\" +\r\n        this.state.postHighlightedText;\r\n    } else {\r\n      text =\r\n        this.state.preHighlightedText +\r\n        this.state.highlightedText +\r\n        this.state.postHighlightedText;\r\n    }\r\n    this.state.fileContentClean = text;\r\n    this.setTags();\r\n    this.setState({ fileContentClean: text });\r\n  };\r\n\r\n  captureHighlightedText = (event, data) => {\r\n    if (window.getSelection() == NaN) {\r\n      return;\r\n    }\r\n\r\n    let base = window.getSelection().baseOffset;\r\n    let extent = window.getSelection().extentOffset;\r\n    let formatedText = this.state.preHtmlFormatedText;\r\n\r\n    borders = this.calcBordersOfHighlightedText(base, extent);\r\n    borders = this;\r\n\r\n    // The text is seperated to parts.\r\n    // Get the index of the highlited text in his part.\r\n    //let leftIndexOfHighlightedChunkAtHisSpan;\r\n    //let rightIndexOfHighlightedChunkAtHisSpan;\r\n    //if (\r\n    //  window.getSelection().baseOffset <= window.getSelection().extentOffset\r\n    //) {\r\n    //  leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n    //  rightIndexOfHighlightedChunkAtHisSpan = window.getSelection()\r\n    //    .extentOffset;\r\n    //} else if (\r\n    //  window.getSelection().baseOffset > window.getSelection().extentOffset\r\n    //) {\r\n    //  leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().extentOffset;\r\n    //  rightIndexOfHighlightedChunkAtHisSpan = window.getSelection().baseOffset;\r\n    //}\r\n\r\n    // Get the part number the highlited text is in.\r\n    //let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\r\n    //  .id;\r\n\r\n    //calculate the offset from the beggining of the text\r\n    //let indexOfCleanText = 0;\r\n    //for (let i = 0; i < spanOfHighlightedChunk; i++) {\r\n    //checking chunk if its not start with % we summing the length\r\n    //  if (this.state.formattedtext[i][0] != \"%\") {\r\n    //    indexOfCleanText += this.state.formattedtext[i].length;\r\n    //  } else {\r\n    //    let currentChunk = this.state.formattedtext[i].split(\"%\");\r\n    //    let tagLength = currentChunk[1].length;\r\n    //    let textlength = currentChunk[2].length;\r\n    //    indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\r\n    //  }\r\n    //}\r\n\r\n    // indexOfCleanTextc contains the location of the first caracter chosen in the text as\r\n    // it in raw text.\r\n\r\n    // Sreaching for the begining of the highlighted word.\r\n    //let cleanText = this.state.fileContentClean;\r\n    //let begining;\r\n    // If the first chracter is in a begining of a chunk.\r\n    //if (leftIndexOfHighlightedChunkAtHisSpan == 0) {\r\n    //  begining = indexOfCleanText;\r\n    //} else {\r\n    //  let indexToFindTheHighligtedWordStart = leftIndexOfHighlightedChunkAtHisSpan;\r\n    //  for (\r\n    //    ;\r\n    //    indexToFindTheHighligtedWordStart >= 0;\r\n    //    indexToFindTheHighligtedWordStart--\r\n    //  ) {\r\n    // we reached the befining of the current paragraph.\r\n    //    if (indexToFindTheHighligtedWordStart == 0) {\r\n    //      begining = indexOfCleanText;\r\n    //      // If we reached a space character.\r\n    //    } else {\r\n    //      let previousChar =\r\n    //        cleanText[indexOfCleanText + indexToFindTheHighligtedWordStart - 1];\r\n    //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\r\n    //      if (this.isSpecialChar(previousChar)) {\r\n    //  previousChar == \" \" ||\r\n    //  previousChar == \"\\n\" ||\r\n    //  previousChar == \"\\t\"\r\n    //         begining = indexOfCleanText + indexToFindTheHighligtedWordStart;\r\n    //         break;\r\n    //       }\r\n    //     }\r\n    //   }\r\n    //}\r\n\r\n    //let textInChunk = window.getSelection().baseNode.data;\r\n    //let end;\r\n    //in case of automatic space added by clicking\r\n    //if (\r\n    //  rightIndexOfHighlightedChunkAtHisSpan !=\r\n    //    leftIndexOfHighlightedChunkAtHisSpan &&\r\n    //  this.isSpecialChar(\r\n    //    cleanText[indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1]\r\n    //  )\r\n    //) {\r\n    //  end = indexOfCleanText + rightIndexOfHighlightedChunkAtHisSpan - 1;\r\n    //} else if (rightIndexOfHighlightedChunkAtHisSpan == textInChunk.length) {\r\n    // If the last chracter is in the end of a chunk.\r\n    //  end = indexOfCleanText + textInChunk.length;\r\n    //} else {\r\n    //  let indexToFindTheHighligtedWordEnd = rightIndexOfHighlightedChunkAtHisSpan;\r\n    //  for (\r\n    //    ;\r\n    //   indexToFindTheHighligtedWordEnd <= textInChunk.length;\r\n    //  indexToFindTheHighligtedWordEnd++\r\n    //) {\r\n    //  // If we reached the end of the paragraph.\r\n    //  if (indexToFindTheHighligtedWordEnd == textInChunk.length) {\r\n    //    end = indexOfCleanText + textInChunk.length;\r\n    // If we reached a white space.\r\n    //  } else {\r\n    //    let nextChar =\r\n    //      cleanText[indexOfCleanText + indexToFindTheHighligtedWordEnd];\r\n    //    if (this.isSpecialChar(nextChar)) {\r\n    //      //nextChar == \" \" || nextChar == \"\\n\" || nextChar == \"\\t\")\r\n    //      end = indexOfCleanText + indexToFindTheHighligtedWordEnd;\r\n    //      break;\r\n    //    }\r\n    //  }\r\n    // }\r\n    //}\r\n\r\n    let preTag;\r\n    let inTag;\r\n    let postTag;\r\n\r\n    // If the highlited text is not already tagged.\r\n    if (this.state.formattedtext[spanOfHighlightedChunk][0] != \"%\") {\r\n      preTag = cleanText.substring(0, begining);\r\n      inTag = cleanText.substring(begining, end);\r\n      postTag = cleanText.substring(end, cleanText.length);\r\n      this.state.isHighlightedTextTagged = false;\r\n      //indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\r\n      //preTag = cleanText.substring(0, indexOfCleanText);\r\n      //inTag = cleanText.substring(\r\n      //  indexOfCleanText,\r\n      //  indexOfCleanText + window.getSelection().toString().length\r\n      //);\r\n      //postTag = cleanText.substring(\r\n      //  indexOfCleanText + window.getSelection().toString().length,\r\n      //  cleanText.length\r\n      //);\r\n      //this.state.isHighlightedTextTagged = false;\r\n    } else {\r\n      let currentChunk = this.state.formattedtext[spanOfHighlightedChunk].split(\r\n        \"%\"\r\n      );\r\n      let tagLength = currentChunk[1].length;\r\n      preTag = cleanText.substring(0, indexOfCleanText);\r\n      inTag = cleanText.substring(\r\n        indexOfCleanText + tagLength + 2,\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length\r\n      );\r\n      postTag = cleanText.substring(\r\n        indexOfCleanText +\r\n          this.state.formattedtext[spanOfHighlightedChunk].length +\r\n          tagLength +\r\n          3,\r\n        cleanText.length\r\n      );\r\n      this.state.isHighlightedTextTagged = true;\r\n    }\r\n    this.state.leftIndex = leftIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.rightIndex = rightIndexOfHighlightedChunkAtHisSpan;\r\n    this.state.begining = begining;\r\n    this.state.end = end;\r\n    this.setState({ preHighlightedText: preTag });\r\n    this.setState({ highlightedText: inTag });\r\n    this.setState({ postHighlightedText: postTag });\r\n  };\r\n\r\n  calcBordersOfHighlightedText = (base, extent) => {\r\n    let leftBorder;\r\n    let rightBorder;\r\n\r\n    if (base <= extent) {\r\n      leftBorder = base;\r\n      rightBorder = extent;\r\n    } else if (base > extent) {\r\n      leftBorder = extent;\r\n      rightBorder = base;\r\n    }\r\n\r\n    return [leftBorder, rightBorder];\r\n  };\r\n\r\n  extendHighlightToEntireWord = (leftIndex, rightIndex) => {\r\n    // Get the part number the highlited text is in.\r\n    let lineAndparagraph = window.getSelection().anchorNode.parentElement.id;\r\n    lineAndparagraph = lineAndparagraph.split(\",\");\r\n    let line = lineAndparagraph[0];\r\n    let paragraph = lineAndparagraph[1];\r\n\r\n    let textParagraph = this.state.preHtmlFormatedText[line][paragraph];\r\n\r\n    // Sreaching for the begining of the highlighted word.\r\n    let begining;\r\n    // If the first chracter is in a begining of a chunk.\r\n    if (leftIndex == 0) {\r\n      begining = leftIndex;\r\n    } else {\r\n      for (let index = leftIndex; index >= 0; index--) {\r\n        // we reached the begining of the current paragraph.\r\n        if (index == 0) {\r\n          begining = index;\r\n          // If we reached a space character.\r\n        } else {\r\n          let previousChar = textParagraph[index - 1];\r\n          //(!(previousChar.match(/[a-z]/i) || previousChar.match(/[0-9]/)))\r\n          if (this.isSpecialChar(previousChar)) {\r\n            //  previousChar == \" \" ||\r\n            //  previousChar == \"\\n\" ||\r\n            //  previousChar == \"\\t\"\r\n            begining = index;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let end;\r\n    //in case of automatic space added by clicking\r\n    if (\r\n      rightIndex != leftIndex &&\r\n      this.isSpecialChar(textParagraph[rightIndex - 1])\r\n    ) {\r\n      end = rightIndex - 1;\r\n    } else if (rightIndex == textParagraph.length) {\r\n      // If the last chracter is in the end of a chunk.\r\n      end = rightIndex;\r\n    } else {\r\n      for (let index = rightIndex; index <= textParagraph.length; index++) {\r\n        // If we reached the end of the paragraph.\r\n        if (index == textParagraph.length) {\r\n          end = index;\r\n          // If we reached a white space.\r\n        } else {\r\n          let nextChar = textParagraph[index];\r\n          if (this.isSpecialChar(nextChar)) {\r\n            end = index;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return [begining, end];\r\n  };\r\n\r\n  clacOfsetFromTheStartOfTheText = () => {\r\n    // Get the part number the highlited text is in.\r\n    let lineAndparagraph = window.getSelection().anchorNode.parentElement.id;\r\n    lineAndparagraph = lineAndparagraph.split(\",\");\r\n    let line = lineAndparagraph[0];\r\n    let paragraph = lineAndparagraph[1];\r\n\r\n    let text = this.state.preHtmlFormatedText;\r\n\r\n    //calculate the offset from the beggining of the text\r\n    // Calc the number of letter in the previous lines.\r\n    let offset = 0;\r\n    // Go through the text lines.\r\n    for (let i = 0; i <= line; i++) {\r\n      // Go through the partition of the line.\r\n      // If the line is the line where the highlighted text is in, run until\r\n      // the part where the highlighted text is found.\r\n      let end = text[i].length;\r\n      if ((i = line)) {\r\n        end = paragraph;\r\n      }\r\n      for (let j = 0; j < end; j++) {\r\n        // In case the current part does not contain highlighted text.\r\n        if (text[i][j][0] != \"%\") {\r\n          offset += this.state.formattedtext[i][j].length;\r\n        }\r\n        // In case the current part contains highlighted text.\r\n        else {\r\n          let currentPartText = text[i][j].split(\"%\");\r\n          let tagLength = currentPartText[1].length;\r\n          let textlength = currentPartText[2].length;\r\n          // 2 * tagLength + 5:\r\n          // 2 * tagLength: stands for the 2 appearance of the tag's name, at the text.\r\n          // (One appearance of the tag in the opening tag and the second in the closing tag).\r\n          // 5: stands for the characters : <> </>, <> appear in the opening tag,\r\n          // and </> in the closing tag.\r\n          offset += textlength + 2 * tagLength + 5;\r\n        }\r\n      }\r\n    }\r\n\r\n    return offset;\r\n\r\n    // Add to the calculted offset the highlighted text offset from the beginng of it's part\r\n    // in the line the text is found.\r\n    //.offset += leftBorder;\r\n  };\r\n\r\n  rrender() {\r\n    return (\r\n      <React.Fragment>\r\n        {\" \"}\r\n        <h1>hiiiii </h1>\r\n        <h1> {this.props.fileContent} </h1>\r\n        <h1>{this.props.tags}</h1>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  render = () => {\r\n    let page = (\r\n      <div>\r\n        <table length=\"100%\">\r\n          <tr length=\"100%\">\r\n            <td length=\"25%\"> </td>\r\n            <td length=\"50%\">\r\n              {\" \"}\r\n              <ContextMenuTrigger id=\"some_unique_identifier\">\r\n                <div\r\n                  id=\"text\"\r\n                  onClickCapture={this.captureHighlightedText}\r\n                  style={{\r\n                    backgroundColor: \"white\",\r\n                    borderStyle: \"solid\",\r\n                    height: \"8cm\",\r\n                    width: \"30cm\",\r\n                    overflowY: \"scroll\",\r\n                    overflowX: \"hidden\",\r\n                  }}\r\n                >\r\n                  {this.setTags(this.props.fileContent)}\r\n                </div>{\" \"}\r\n              </ContextMenuTrigger>\r\n              <ContextMenu id=\"some_unique_identifier\">\r\n                {this.createMenu()}\r\n              </ContextMenu>\r\n            </td>\r\n            <td length=\"25%\"> </td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    );\r\n    return page;\r\n  };\r\n\r\n  createMenu = () => {\r\n    let menu;\r\n    if (this.state.isHighlightedTextTagged == false) {\r\n      menu = this.props.tagsList.map((part, i) => (\r\n        <MenuItem key={i} id={part} onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id={part} style={{ backgroundColor: \"white\" }}>\r\n            Set as {part}{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      ));\r\n    } else {\r\n      menu = (\r\n        <MenuItem id=\"no_tag\" onClick={this.addTag}>\r\n          {\" \"}\r\n          <div id=\"no_tag\" style={{ backgroundColor: \"white\" }}>\r\n            Remove tag{\" \"}\r\n          </div>\r\n        </MenuItem>\r\n      );\r\n    }\r\n    return menu;\r\n  };\r\n\r\n  // Gets a list of string and make a drop down option list of them.\r\n  // Creates only the list of the drop down list <option>\r\n  // and not the <select> drop down list itself.\r\n  createList = (list) => {\r\n    return list.map((part, i) => <option value={part}> {part}</option>);\r\n  };\r\n}\r\n\r\nexport default taggedTextArea;\r\n"]},"metadata":{},"sourceType":"module"}