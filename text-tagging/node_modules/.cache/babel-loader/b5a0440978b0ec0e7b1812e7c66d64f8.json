{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\main.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileContent: \"\",\n      fileContentClean: \"\",\n      tagbox: \"Enter text to mark\",\n      tags: {\n        person: \"yellow\",\n        place: \"pink\",\n        bla: \"green\"\n      }\n    };\n\n    this.hadleClickOnUpload = () => {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        var preview = document.getElementById(\"temporaryPlace\");\n        var file = document.querySelector(\"input[type=file]\").files[0];\n        var reader = new FileReader();\n        var textHolder = \"File Content hasnot set\";\n        var textFile = /text.*/;\n\n        if (file.type.match(textFile)) {\n          reader.onload = this.loadFile;\n        } else {\n          preview.innerHTML = \"<span class='error'>It doesn't seem to be a text file!</span>\";\n        }\n\n        reader.readAsText(file);\n      } else {\n        alert(\"Your browser is too old to support HTML5 File API\");\n      }\n    };\n\n    this.setTags = () => {\n      let textTry = [1, 2, 3];\n      textTry = textTry.reverse[0];\n      let text = this.state.fileContentClean;\n      let higlight = \"<[^<]+>\"; //let higlight = \"<([^<]+)>[^<]+</[^<]+>\";\n      //let higlight = \"<[^<]+>[^<]+</[^<]+>\"; //this.state.tagbox;\n\n      let regexHiglight = RegExp(higlight);\n      let closertag = \"</[^<]+>\";\n      let regexclosetag = RegExp(closertag);\n      let par;\n      let spanIndex = 0;\n      console.log(text); //Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\")); //let pars = [parts.length];\n\n      for (let index = 0; index < parts.length; index++) {\n        //checking it thats n opening tag and not a closing tag\n        if (regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index])) {\n          let currenttag = parts[index]; //building the inner tag - cuts inner text\n\n          currenttag = currenttag.substring(1, currenttag.length - 1);\n          let rightclosertag = \"</\" + currenttag + \">\";\n          let regExpRightcloser = RegExp(rightclosertag); //we want to keep running on string until we'll meet the right closer tag\n\n          let newindex = index + 1;\n\n          while (!regExpRightcloser.test(parts[newindex]) && newindex < parts.length) {\n            newindex++;\n          }\n\n          if (newindex < parts.length) {\n            let newstring = '<div style = {backgroundColor: \"' + this.state.tags[currenttag] + '\"}>';\n            parts[index] = newstring;\n            parts[newindex] = \"</div>\";\n          }\n        }\n      }\n\n      console.log(\"damn\");\n      let taggedText = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \" \", parts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        style: regexHiglight.test(part.toLowerCase()) ? //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: \"yellow\"\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, part)));\n      this.setState({\n        fileContent: taggedText\n      });\n    };\n\n    this.loadFile = event => {\n      this.setState({\n        fileContent: event.target.result\n      });\n      this.setState({\n        fileContentClean: event.target.result\n      });\n    };\n\n    this.highlightText = () => {\n      let textHolder = this.fileContentClean;\n      this.setState({\n        fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        tagbox: event.target.value\n      });\n    };\n\n    this.getHighlightedText = (data, mark) => {\n      //console.log(this);\n      let text = data;\n      let higlight = mark; //this.state.tagbox;\n      // Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let taggedText = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \" \", parts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        style: part.toLowerCase() === higlight.toLowerCase() ? {\n          fontWeight: \"bold\",\n          backgroundColor: \"yellow\"\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, part)), \" \");\n      return taggedText;\n    };\n  }\n\n  render() {\n    //<input type=\"file\" onChange={this.hadleClickOnUpload} />\n    //<div> the file chosen </div>\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Text editor\"), React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.hadleClickOnUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, this.state.fileContent), React.createElement(\"input\", {\n      id: \"tags\",\n      type: \"text\",\n      height: \"200\",\n      width: \"200\",\n      value: this.state.tagbox,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.highlightText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \" Highlight\"), \"//\", React.createElement(\"button\", {\n      onClick: this.setTags,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \" Set tags\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }));\n  }\n\n} //<button onClick={this.refresh}> Refresh</button>\n//\n//<input\n//id=\"fileContent\"\n//height=\"1000\"\n//width=\"200\"\n//value={this.state.value}\n//onChange={this.handleChange}\n///>\n//<button onClick={this.hadleClickOnUpload}> Upload file</button>\n//       <button> Save file</button>\n//       <br></br>\n//<input\n//          id=\"tagsPlace\"\n//          height=\"200\"\n//          width=\"200\"\n//          type=\"text\"\n//          value={this.state.fileContent}\n//value={this.state.value}\n//onChange={this.handleChange}\n//        />\n\n\nexport default Main;","map":{"version":3,"sources":["c:/Users/Yifat/finalProject/text-tagging/src/components/main.jsx"],"names":["React","Component","ReactDOM","throwStatement","Main","state","fileContent","fileContentClean","tagbox","tags","person","place","bla","hadleClickOnUpload","window","File","FileReader","FileList","Blob","preview","document","getElementById","file","querySelector","files","reader","textHolder","textFile","type","match","onload","loadFile","innerHTML","readAsText","alert","setTags","textTry","reverse","text","higlight","regexHiglight","RegExp","closertag","regexclosetag","par","spanIndex","console","log","parts","split","index","length","test","currenttag","substring","rightclosertag","regExpRightcloser","newindex","newstring","taggedText","map","part","i","toLowerCase","fontWeight","backgroundColor","setState","event","target","result","highlightText","getHighlightedText","handleChange","value","data","mark","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { throwStatement } from \"@babel/types\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    fileContent: \"\",\r\n    fileContentClean: \"\",\r\n    tagbox: \"Enter text to mark\",\r\n    tags: { person: \"yellow\", place: \"pink\", bla: \"green\" }\r\n  };\r\n\r\n  hadleClickOnUpload = () => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      var preview = document.getElementById(\"temporaryPlace\");\r\n      var file = document.querySelector(\"input[type=file]\").files[0];\r\n      var reader = new FileReader();\r\n      var textHolder = \"File Content hasnot set\";\r\n\r\n      var textFile = /text.*/;\r\n      if (file.type.match(textFile)) {\r\n        reader.onload = this.loadFile;\r\n      } else {\r\n        preview.innerHTML =\r\n          \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n  };\r\n  //if (file.type.match(textFile)) {\r\n  //  reader.onload = function(event) {\r\n  //    preview.innerHTML = event.target.result;\r\n  //    //this.setState({ fileContent: event.target.result });\r\n  //  };\r\n  //}\r\n\r\n  setTags = () => {\r\n    let textTry = [1, 2, 3];\r\n    textTry = textTry.reverse[0];\r\n\r\n    let text = this.state.fileContentClean;\r\n    let higlight = \"<[^<]+>\";\r\n    //let higlight = \"<([^<]+)>[^<]+</[^<]+>\";\r\n    //let higlight = \"<[^<]+>[^<]+</[^<]+>\"; //this.state.tagbox;\r\n    let regexHiglight = RegExp(higlight);\r\n    let closertag = \"</[^<]+>\";\r\n    let regexclosetag = RegExp(closertag);\r\n    let par;\r\n    let spanIndex = 0;\r\n    console.log(text);\r\n    //Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    //let pars = [parts.length];\r\n    for (let index = 0; index < parts.length; index++) {\r\n      //checking it thats n opening tag and not a closing tag\r\n      if (\r\n        regexHiglight.test(parts[index]) &&\r\n        !regexclosetag.test(parts[index])\r\n      ) {\r\n        let currenttag = parts[index];\r\n        //building the inner tag - cuts inner text\r\n        currenttag = currenttag.substring(1, currenttag.length - 1);\r\n        let rightclosertag = \"</\" + currenttag + \">\";\r\n        let regExpRightcloser = RegExp(rightclosertag);\r\n        //we want to keep running on string until we'll meet the right closer tag\r\n        let newindex = index + 1;\r\n        while (\r\n          !regExpRightcloser.test(parts[newindex]) &&\r\n          newindex < parts.length\r\n        ) {\r\n          newindex++;\r\n        }\r\n        if (newindex < parts.length) {\r\n          let newstring =\r\n            '<div style = {backgroundColor: \"' +\r\n            this.state.tags[currenttag] +\r\n            '\"}>';\r\n          parts[index] = newstring;\r\n          parts[newindex] = \"</div>\";\r\n        }\r\n      }\r\n    }\r\n    console.log(\"damn\");\r\n\r\n    let taggedText = (\r\n      <div>\r\n        {\" \"}\r\n        {parts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            style={\r\n              regexHiglight.test(part.toLowerCase())\r\n                ? //part.toLowerCase() === higlight.toLowerCase()\r\n                  { fontWeight: \"bold\", backgroundColor: \"yellow\" }\r\n                : {}\r\n            }\r\n          >\r\n            {part}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n    this.setState({ fileContent: taggedText });\r\n  };\r\n\r\n  loadFile = event => {\r\n    this.setState({ fileContent: event.target.result });\r\n    this.setState({ fileContentClean: event.target.result });\r\n  };\r\n\r\n  highlightText = () => {\r\n    let textHolder = this.fileContentClean;\r\n    this.setState({\r\n      fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\r\n    });\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ tagbox: event.target.value });\r\n  };\r\n\r\n  getHighlightedText = (data, mark) => {\r\n    //console.log(this);\r\n    let text = data;\r\n    let higlight = mark; //this.state.tagbox;\r\n    // Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let taggedText = (\r\n      <div>\r\n        {\" \"}\r\n        {parts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            style={\r\n              part.toLowerCase() === higlight.toLowerCase()\r\n                ? { fontWeight: \"bold\", backgroundColor: \"yellow\" }\r\n                : {}\r\n            }\r\n          >\r\n            {part}\r\n          </span>\r\n        ))}{\" \"}\r\n      </div>\r\n    );\r\n    return taggedText;\r\n  };\r\n\r\n  render() {\r\n    //<input type=\"file\" onChange={this.hadleClickOnUpload} />\r\n    //<div> the file chosen </div>\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Text editor</h1>\r\n        <input type=\"file\" onChange={this.hadleClickOnUpload}></input>\r\n        <br></br>\r\n        <div id=\"text\">{this.state.fileContent}</div>\r\n        <input\r\n          id=\"tags\"\r\n          type=\"text\"\r\n          height=\"200\"\r\n          width=\"200\"\r\n          value={this.state.tagbox}\r\n          onChange={this.handleChange}\r\n        />\r\n        <br></br>\r\n        <button onClick={this.highlightText}> Highlight</button>\r\n        //<button onClick={this.setTags}> Set tags</button>\r\n        <br></br>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n//<button onClick={this.refresh}> Refresh</button>\r\n//\r\n//<input\r\n//id=\"fileContent\"\r\n//height=\"1000\"\r\n//width=\"200\"\r\n//value={this.state.value}\r\n//onChange={this.handleChange}\r\n///>\r\n\r\n//<button onClick={this.hadleClickOnUpload}> Upload file</button>\r\n//       <button> Save file</button>\r\n//       <br></br>\r\n//<input\r\n//          id=\"tagsPlace\"\r\n//          height=\"200\"\r\n//          width=\"200\"\r\n//          type=\"text\"\r\n//          value={this.state.fileContent}\r\n//value={this.state.value}\r\n//onChange={this.handleChange}\r\n//        />\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}