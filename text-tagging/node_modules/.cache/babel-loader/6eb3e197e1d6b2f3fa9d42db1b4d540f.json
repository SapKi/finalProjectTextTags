{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\main.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileContent: \"blablalba\"\n    };\n\n    this.hadleClickOnUpload = () => {\n      showFile = () => {\n        if (window.File && window.FileReader && window.FileList && window.Blob) {\n          var preview = document.getElementById(\"show-text\");\n          var file = document.querySelector(\"input[type=file]\").files[0];\n          var reader = new FileReader();\n          var textFile = /text.*/;\n\n          if (file.type.match(textFile)) {\n            reader.onload = function (event) {\n              preview.innerHTML = event.target.result;\n            };\n          } else {\n            preview.innerHTML = \"<span class='error'>It doesn't seem to be a text file!</span>\";\n          }\n\n          reader.readAsText(file);\n        } else {\n          alert(\"Your browser is too old to support HTML5 File API\");\n        }\n      };\n    };\n  }\n\n  render() {\n    var divStyle = {\n      color: \"white\" //backgroundImage: 'url(' + imgUrl + ')',\n      //WebkitTransition: 'all', // note the capital 'W' here\n      //msTransition: 'all' // 'ms' is the only lowercase vendor prefix\n\n    };\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Text editor\"), React.createElement(\"input\", {\n      id: \"textPlace\",\n      height: \"1000\",\n      width: \"200\",\n      type: \"text\",\n      value: this.state.fileContent //value={this.state.value}\n      //onChange={this.handleChange}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"tagsPlace\",\n      height: \"200\",\n      width: \"200\",\n      type: \"text\",\n      value: this.state.fileContent //value={this.state.value}\n      //onChange={this.handleChange}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" Upload file\"), React.createElement(\"button\", {\n      onClick: this.hadleClickOnUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \" Save file\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"file\",\n      onChange: this.showFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"show-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Choose text File\"));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/main.jsx"],"names":["React","Component","ReactDOM","Main","state","fileContent","hadleClickOnUpload","showFile","window","File","FileReader","FileList","Blob","preview","document","getElementById","file","querySelector","files","reader","textFile","type","match","onload","event","innerHTML","target","result","readAsText","alert","render","divStyle","color"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC3BG,KAD2B,GACnB;AACNC,MAAAA,WAAW,EAAE;AADP,KADmB;;AAAA,SAK3BC,kBAL2B,GAKN,MAAM;AACzBC,MAAAA,QAAQ,GAAG,MAAM;AACf,YAAIC,MAAM,CAACC,IAAP,IAAeD,MAAM,CAACE,UAAtB,IAAoCF,MAAM,CAACG,QAA3C,IAAuDH,MAAM,CAACI,IAAlE,EAAwE;AACtE,cAAIC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAd;AACA,cAAIC,IAAI,GAAGF,QAAQ,CAACG,aAAT,CAAuB,kBAAvB,EAA2CC,KAA3C,CAAiD,CAAjD,CAAX;AACA,cAAIC,MAAM,GAAG,IAAIT,UAAJ,EAAb;AAEA,cAAIU,QAAQ,GAAG,QAAf;;AAEA,cAAIJ,IAAI,CAACK,IAAL,CAAUC,KAAV,CAAgBF,QAAhB,CAAJ,EAA+B;AAC7BD,YAAAA,MAAM,CAACI,MAAP,GAAgB,UAASC,KAAT,EAAgB;AAC9BX,cAAAA,OAAO,CAACY,SAAR,GAAoBD,KAAK,CAACE,MAAN,CAAaC,MAAjC;AACD,aAFD;AAGD,WAJD,MAIO;AACLd,YAAAA,OAAO,CAACY,SAAR,GACE,+DADF;AAED;;AACDN,UAAAA,MAAM,CAACS,UAAP,CAAkBZ,IAAlB;AACD,SAhBD,MAgBO;AACLa,UAAAA,KAAK,CAAC,mDAAD,CAAL;AACD;AACF,OApBD;AAqBD,KA3B0B;AAAA;;AA6B3BC,EAAAA,MAAM,GAAG;AACP,QAAIC,QAAQ,GAAG;AACbC,MAAAA,KAAK,EAAE,OADM,CAEb;AACA;AACA;;AAJa,KAAf;AAOA,WACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AACE,MAAA,EAAE,EAAC,WADL;AAEE,MAAA,MAAM,EAAC,MAFT;AAGE,MAAA,KAAK,EAAC,KAHR;AAIE,MAAA,IAAI,EAAC,MAJP;AAKE,MAAA,KAAK,EAAE,KAAK5B,KAAL,CAAWC,WALpB,CAME;AACA;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAWE;AACE,MAAA,EAAE,EAAC,WADL;AAEE,MAAA,MAAM,EAAC,KAFT;AAGE,MAAA,KAAK,EAAC,KAHR;AAIE,MAAA,IAAI,EAAC,MAJP;AAKE,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,WALpB,CAME;AACA;AAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,EAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MApBF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBArBF,EAsBE;AAAQ,MAAA,OAAO,EAAE,KAAKC,kBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAtBF,EAuBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBF,EAyBE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,QAAQ,EAAE,KAAKC,QAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAzBF,EA0BE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BA1BF,CADF;AA8BD;;AAnE0B;;AAsE7B,eAAeJ,IAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    fileContent: \"blablalba\"\r\n  };\r\n\r\n  hadleClickOnUpload = () => {\r\n    showFile = () => {\r\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n        var preview = document.getElementById(\"show-text\");\r\n        var file = document.querySelector(\"input[type=file]\").files[0];\r\n        var reader = new FileReader();\r\n\r\n        var textFile = /text.*/;\r\n\r\n        if (file.type.match(textFile)) {\r\n          reader.onload = function(event) {\r\n            preview.innerHTML = event.target.result;\r\n          };\r\n        } else {\r\n          preview.innerHTML =\r\n            \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n        }\r\n        reader.readAsText(file);\r\n      } else {\r\n        alert(\"Your browser is too old to support HTML5 File API\");\r\n      }\r\n    };\r\n  };\r\n\r\n  render() {\r\n    var divStyle = {\r\n      color: \"white\"\r\n      //backgroundImage: 'url(' + imgUrl + ')',\r\n      //WebkitTransition: 'all', // note the capital 'W' here\r\n      //msTransition: 'all' // 'ms' is the only lowercase vendor prefix\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <h1>Text editor</h1>\r\n        <input\r\n          id=\"textPlace\"\r\n          height=\"1000\"\r\n          width=\"200\"\r\n          type=\"text\"\r\n          value={this.state.fileContent}\r\n          //value={this.state.value}\r\n          //onChange={this.handleChange}\r\n        />\r\n        <input\r\n          id=\"tagsPlace\"\r\n          height=\"200\"\r\n          width=\"200\"\r\n          type=\"text\"\r\n          value={this.state.fileContent}\r\n          //value={this.state.value}\r\n          //onChange={this.handleChange}\r\n        />\r\n        <br></br>\r\n        <button> Upload file</button>\r\n        <button onClick={this.hadleClickOnUpload}> Save file</button>\r\n        <br></br>\r\n\r\n        <input type=\"file\" onChange={this.showFile} />\r\n        <div id=\"show-text\">Choose text File</div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}