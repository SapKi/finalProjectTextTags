{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yifat\\\\finalProject\\\\text-tagging\\\\src\\\\components\\\\main.jsx\";\nimport React, { Component } from \"react\";\nimport Background from \"../images/pinkmoasic.jpg\";\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\nimport ReactDOM from \"react-dom\";\nimport { throwStatement } from \"@babel/types\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fileContent: \"\",\n      fileContentClean: \"\",\n      tagbox: \"Enter text to mark\",\n      tags: {\n        person: \"yellow\",\n        place: \"red\",\n        bla: \"lightp;poll, k\",\n        date: \"blue\",\n        event: \"purple\"\n      },\n      formattedparts: \"\"\n    };\n\n    this.hadleClickOnUpload = () => {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        var preview = document.getElementById(\"temporaryPlace\");\n        var file = document.querySelector(\"input[id=text_file]\").files[0];\n        var reader = new FileReader();\n        var textHolder = \"File Content hasnot set\";\n        var textFile = /text.*/;\n\n        if (file.type.match(textFile)) {\n          reader.onload = this.loadFile;\n        } else {\n          preview.innerHTML = \"<span class='error'>It doesn't seem to be a text file!</span>\";\n        }\n\n        reader.readAsText(file);\n      } else {\n        alert(\"Your browser is too old to support HTML5 File API\");\n      }\n    };\n\n    this.loadConfiguration = () => {\n      if (window.File && window.FileReader && window.FileList && window.Blob) {\n        var preview = document.getElementById(\"temporaryPlace\");\n        var file = document.querySelector(\"input[id=config_file]\").files[0];\n        var reader = new FileReader();\n        var textHolder = \"File Content hasnot set\";\n        var textFile = /text.*/;\n\n        if (file.type.match(textFile)) {\n          reader.onload = this.tagsConvert;\n        } else {\n          preview.innerHTML = \"<span class='error'>It doesn't seem to be a text file!</span>\";\n        }\n\n        reader.readAsText(file);\n      } else {\n        alert(\"Your browser is too old to support HTML5 File API\");\n      }\n    };\n\n    this.tagsConvert = eventTags => {\n      let conFileContent = eventTags.target.result;\n      let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\n\n      let lines = conFileContent.split(\"\\n\");\n\n      for (let i = 0; i < lines.length; i++) {\n        let currentPair = lines[i].split(\":\");\n        let pairKey = currentPair[0];\n        let pairValue = currentPair[1];\n        newTags[pairKey] = pairValue;\n      }\n\n      this.state.tags = newTags;\n      this.setTags(); // Initiate setState so the view will update.\n\n      this.setState({\n        tags: newTags\n      });\n    };\n\n    this.addTag = (event, data) => {\n      console.log(data.foo);\n      console.log(window.getSelection().toString());\n      let leftIndexOfHighlightedChunkAtHisSpan = window.getSelection().anchorOffset; //each char is in the state\n\n      let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement.id; //calculate the offset from the beggining of the text\n\n      let indexOfCleanText = 0;\n\n      for (let i = 0; i < spanOfHighlightedChunk; i++) {\n        //checking chunk if its not start with % we summing the length\n        if (this.state.formattedtext[i][0] != \"%\") {\n          indexOfCleanText += this.state.formattedtext[i].length;\n        } else {\n          let currentChunk = this.state.formattedtext[i].split(\"%\");\n          let tagLength = currentChunk[1].length;\n          let textlength = currentChunk[2].length;\n          indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\n        }\n      }\n\n      indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\n      let cleanText = this.state.fileContentClean;\n      let preTag = cleanText.substring(0, indexOfCleanText);\n      let inTag = cleanText.substring(indexOfCleanText, indexOfCleanText + window.getSelection().toString().length);\n      let postTag = cleanText.substring(indexOfCleanText + window.getSelection().toString().length, cleanText.length);\n      let text = preTag + \"<\" + this.state.tagbox + \">\" + inTag + \"</\" + this.state.tagbox + \">\" + postTag;\n      this.state.fileContentClean = text;\n      this.setState({\n        fileContentClean: text\n      });\n      this.setTags();\n    };\n\n    this.setTags = () => {\n      let text = this.state.fileContentClean;\n      let higlight = \"<[^<]+>\";\n      let regexHiglight = RegExp(higlight);\n      let closertag = \"</[^<]+>\";\n      let regexclosetag = RegExp(closertag);\n      let par;\n      let spanIndex = 0; //Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let formattedparts = [];\n\n      for (let index = 0; index < parts.length; index++) {\n        //cheking that the current part is not a tag\n        if (!(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))) {\n          if (parts[index] != \"\") formattedparts.push(parts[index]);\n        } // handeling an open tag\n        else {\n            let currenttag = parts[index]; //building the inner tag - cuts inner text\n\n            currenttag = currenttag.substring(1, currenttag.length - 1);\n            let rightclosertag = \"</\" + currenttag + \">\";\n            let regExpRightcloser = RegExp(rightclosertag); //we want to keep running on string until we'll meet the right closer tag\n\n            let newindex = index + 1;\n\n            while (!regExpRightcloser.test(parts[newindex]) && newindex < parts.length) {\n              newindex++;\n            } //if the closing tag matches the opening tag found\n\n\n            if (newindex < parts.length) {\n              //builds the new string for injection\n              let newstring = \"%\" + currenttag + \"%\";\n\n              for (let innerindex = index + 1; innerindex < newindex; innerindex++) {\n                newstring = newstring + parts[innerindex];\n              }\n\n              formattedparts.push(newstring);\n              index = newindex;\n            } else {\n              //if theres no closing tag to a tag so we copy the opening tag as it is\n              formattedparts.push(parts[index]);\n            }\n          }\n      }\n\n      this.setState({\n        formattedtext: formattedparts\n      });\n      console.log(\"correct\");\n      let tagRegex = RegExp(\"%.+%.+\"); //let divopentag = RegExp(\"^<div\");\n      //let divclosingtag = RegExp(\"^</div>\");\n\n      let taggedText = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \" \", formattedparts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        id: i,\n        style: tagRegex.test(part) ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\n        //part.toLowerCase() === higlight.toLowerCase()\n        {\n          fontWeight: \"bold\",\n          backgroundColor: this.state.tags[part.split(\"%\")[1]]\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, part.split(\"%\").reverse()[0])));\n      this.setState({\n        fileContent: taggedText\n      });\n    };\n\n    this.loadFile = event => {\n      this.setState({\n        fileContent: event.target.result\n      });\n      this.setState({\n        fileContentClean: event.target.result\n      });\n      this.setTags();\n    };\n\n    this.highlightText = () => {\n      let textHolder = this.fileContentClean;\n      this.setState({\n        fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\n      });\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        tagbox: event.target.value\n      });\n    };\n\n    this.getHighlightedText = (data, mark) => {\n      //console.log(this);\n      let text = data;\n      let higlight = mark; //this.state.tagbox;\n      // Split on higlight term and include term into parts, ignore case\n\n      let parts = text.split(new RegExp(\"(\".concat(higlight, \")\"), \"gi\"));\n      let taggedText = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, \" \", parts.map((part, i) => React.createElement(\"span\", {\n        key: i,\n        style: part.toLowerCase() === higlight.toLowerCase() ? {\n          fontWeight: \"bold\",\n          backgroundColor: this.state.tagbox[part]\n        } : {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, part)), \" \");\n      return taggedText;\n    };\n  }\n\n  render() {\n    //<button onClick={this.highlightText}> Highlight</button>\n    //<input\n    //id=\"tags\"\n    //type=\"text\"\n    //height=\"200\"\n    //width=\"200\"\n    //value={this.state.tagbox}\n    //onChange={this.handleChange}\n    //>\n    //<button onClick={this.addTag}> Add tags</button>\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      align: \"center\",\n      style: {\n        backgroundImage: \"url(\".concat(Background, \")\"),\n        height: \"100vh\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }, \" Manage Tags in Article\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290\n      },\n      __self: this\n    }, \" Choose a file along with configuration file\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, \"Choose an article\", React.createElement(\"input\", {\n      type: \"file\",\n      id: \"text_file\",\n      onChange: this.hadleClickOnUpload,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, \"Choose Configuration file\", React.createElement(\"input\", {\n      type: \"file\",\n      id: \"config_file\",\n      onChange: this.loadConfiguration,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    })), React.createElement(\"table\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      length: \"75%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }, \" \", React.createElement(ContextMenuTrigger, {\n      id: \"some_unique_identifier\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, this.state.fileContent), \" \"), React.createElement(ContextMenu, {\n      id: \"some_unique_identifier\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      id: \"person\",\n      data: {\n        foo: \"bar\"\n      },\n      onClick: this.addTag,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, \" \", \"Set as person\", \" \")), React.createElement(MenuItem, {\n      data: {\n        foo: \"bar\"\n      },\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \" \", \"ContextMenu Item 2\", \" \")), React.createElement(MenuItem, {\n      divider: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }), React.createElement(MenuItem, {\n      data: {\n        foo: \"bar\"\n      },\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: {\n        backgroundColor: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333\n      },\n      __self: this\n    }, \" \", \"ContextMenu Item 3\", \" \")))), React.createElement(\"td\", {\n      length: \"25%\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \" dl.kghjreighroigh\"))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \" try context menu\")));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["C:/Users/Yifat/finalProject/text-tagging/src/components/main.jsx"],"names":["React","Component","Background","ContextMenu","MenuItem","ContextMenuTrigger","ReactDOM","throwStatement","Main","state","fileContent","fileContentClean","tagbox","tags","person","place","bla","date","event","formattedparts","hadleClickOnUpload","window","File","FileReader","FileList","Blob","preview","document","getElementById","file","querySelector","files","reader","textHolder","textFile","type","match","onload","loadFile","innerHTML","readAsText","alert","loadConfiguration","tagsConvert","eventTags","conFileContent","target","result","newTags","lines","split","i","length","currentPair","pairKey","pairValue","setTags","setState","addTag","data","console","log","foo","getSelection","toString","leftIndexOfHighlightedChunkAtHisSpan","anchorOffset","spanOfHighlightedChunk","anchorNode","parentElement","id","indexOfCleanText","formattedtext","currentChunk","tagLength","textlength","cleanText","preTag","substring","inTag","postTag","text","higlight","regexHiglight","RegExp","closertag","regexclosetag","par","spanIndex","parts","index","test","push","currenttag","rightclosertag","regExpRightcloser","newindex","newstring","innerindex","tagRegex","taggedText","map","part","fontWeight","backgroundColor","reverse","highlightText","getHighlightedText","handleChange","value","mark","toLowerCase","render","backgroundImage","height","handleClick"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Background from \"../images/pinkmoasic.jpg\";\r\nimport { ContextMenu, MenuItem, ContextMenuTrigger } from \"react-contextmenu\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { throwStatement } from \"@babel/types\";\r\n\r\nclass Main extends Component {\r\n  state = {\r\n    fileContent: \"\",\r\n    fileContentClean: \"\",\r\n    tagbox: \"Enter text to mark\",\r\n    tags: {\r\n      person: \"yellow\",\r\n      place: \"red\",\r\n      bla: \"lightp;poll, k\",\r\n      date: \"blue\",\r\n      event: \"purple\"\r\n    },\r\n    formattedparts: \"\"\r\n  };\r\n\r\n  hadleClickOnUpload = () => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      var preview = document.getElementById(\"temporaryPlace\");\r\n      var file = document.querySelector(\"input[id=text_file]\").files[0];\r\n      var reader = new FileReader();\r\n      var textHolder = \"File Content hasnot set\";\r\n\r\n      var textFile = /text.*/;\r\n      if (file.type.match(textFile)) {\r\n        reader.onload = this.loadFile;\r\n      } else {\r\n        preview.innerHTML =\r\n          \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n  };\r\n\r\n  loadConfiguration = () => {\r\n    if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n      var preview = document.getElementById(\"temporaryPlace\");\r\n      var file = document.querySelector(\"input[id=config_file]\").files[0];\r\n      var reader = new FileReader();\r\n      var textHolder = \"File Content hasnot set\";\r\n\r\n      var textFile = /text.*/;\r\n      if (file.type.match(textFile)) {\r\n        reader.onload = this.tagsConvert;\r\n      } else {\r\n        preview.innerHTML =\r\n          \"<span class='error'>It doesn't seem to be a text file!</span>\";\r\n      }\r\n      reader.readAsText(file);\r\n    } else {\r\n      alert(\"Your browser is too old to support HTML5 File API\");\r\n    }\r\n  };\r\n  //if (file.type.match(textFile)) {\r\n  //  reader.onload = function(event) {\r\n  //    preview.innerHTML = event.target.result;\r\n  //    //this.setState({ fileContent: event.target.result });\r\n  //  };\r\n  //}\r\n  tagsConvert = eventTags => {\r\n    let conFileContent = eventTags.target.result;\r\n    let newTags = {}; //person: \"yellow\", place: \"red\", bla: \"lightpink\", period: \"green\"};\r\n\r\n    let lines = conFileContent.split(\"\\n\");\r\n    for (let i = 0; i < lines.length; i++) {\r\n      let currentPair = lines[i].split(\":\");\r\n      let pairKey = currentPair[0];\r\n      let pairValue = currentPair[1];\r\n      newTags[pairKey] = pairValue;\r\n    }\r\n\r\n    this.state.tags = newTags;\r\n    this.setTags();\r\n\r\n    // Initiate setState so the view will update.\r\n    this.setState({ tags: newTags });\r\n  };\r\n\r\n  addTag = (event, data) => {\r\n    console.log(data.foo);\r\n    console.log(window.getSelection().toString());\r\n    let leftIndexOfHighlightedChunkAtHisSpan = window.getSelection()\r\n      .anchorOffset;\r\n    //each char is in the state\r\n    let spanOfHighlightedChunk = window.getSelection().anchorNode.parentElement\r\n      .id;\r\n    //calculate the offset from the beggining of the text\r\n\r\n    let indexOfCleanText = 0;\r\n    for (let i = 0; i < spanOfHighlightedChunk; i++) {\r\n      //checking chunk if its not start with % we summing the length\r\n      if (this.state.formattedtext[i][0] != \"%\") {\r\n        indexOfCleanText += this.state.formattedtext[i].length;\r\n      } else {\r\n        let currentChunk = this.state.formattedtext[i].split(\"%\");\r\n        let tagLength = currentChunk[1].length;\r\n        let textlength = currentChunk[2].length;\r\n        indexOfCleanText = indexOfCleanText + textlength + 2 * tagLength + 5;\r\n      }\r\n    }\r\n    indexOfCleanText += leftIndexOfHighlightedChunkAtHisSpan;\r\n    let cleanText = this.state.fileContentClean;\r\n    let preTag = cleanText.substring(0, indexOfCleanText);\r\n    let inTag = cleanText.substring(\r\n      indexOfCleanText,\r\n      indexOfCleanText + window.getSelection().toString().length\r\n    );\r\n    let postTag = cleanText.substring(\r\n      indexOfCleanText + window.getSelection().toString().length,\r\n      cleanText.length\r\n    );\r\n\r\n    let text =\r\n      preTag +\r\n      \"<\" +\r\n      this.state.tagbox +\r\n      \">\" +\r\n      inTag +\r\n      \"</\" +\r\n      this.state.tagbox +\r\n      \">\" +\r\n      postTag;\r\n    this.state.fileContentClean = text;\r\n    this.setState({ fileContentClean: text });\r\n    this.setTags();\r\n  };\r\n\r\n  setTags = () => {\r\n    let text = this.state.fileContentClean;\r\n    let higlight = \"<[^<]+>\";\r\n    let regexHiglight = RegExp(higlight);\r\n    let closertag = \"</[^<]+>\";\r\n    let regexclosetag = RegExp(closertag);\r\n    let par;\r\n    let spanIndex = 0;\r\n\r\n    //Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let formattedparts = [];\r\n\r\n    for (let index = 0; index < parts.length; index++) {\r\n      //cheking that the current part is not a tag\r\n      if (\r\n        !(regexHiglight.test(parts[index]) && !regexclosetag.test(parts[index]))\r\n      ) {\r\n        if (parts[index] != \"\") formattedparts.push(parts[index]);\r\n      }\r\n      // handeling an open tag\r\n      else {\r\n        let currenttag = parts[index];\r\n        //building the inner tag - cuts inner text\r\n        currenttag = currenttag.substring(1, currenttag.length - 1);\r\n        let rightclosertag = \"</\" + currenttag + \">\";\r\n        let regExpRightcloser = RegExp(rightclosertag);\r\n        //we want to keep running on string until we'll meet the right closer tag\r\n        let newindex = index + 1;\r\n        while (\r\n          !regExpRightcloser.test(parts[newindex]) &&\r\n          newindex < parts.length\r\n        ) {\r\n          newindex++;\r\n        }\r\n        //if the closing tag matches the opening tag found\r\n        if (newindex < parts.length) {\r\n          //builds the new string for injection\r\n          let newstring = \"%\" + currenttag + \"%\";\r\n\r\n          for (\r\n            let innerindex = index + 1;\r\n            innerindex < newindex;\r\n            innerindex++\r\n          ) {\r\n            newstring = newstring + parts[innerindex];\r\n          }\r\n\r\n          formattedparts.push(newstring);\r\n          index = newindex;\r\n        } else {\r\n          //if theres no closing tag to a tag so we copy the opening tag as it is\r\n          formattedparts.push(parts[index]);\r\n        }\r\n      }\r\n    }\r\n    this.setState({ formattedtext: formattedparts });\r\n    console.log(\"correct\");\r\n\r\n    let tagRegex = RegExp(\"%.+%.+\");\r\n    //let divopentag = RegExp(\"^<div\");\r\n    //let divclosingtag = RegExp(\"^</div>\");\r\n\r\n    let taggedText = (\r\n      <div>\r\n        {\" \"}\r\n        {formattedparts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            id={i}\r\n            style={\r\n              tagRegex.test(part)\r\n                ? //divopentag.test(part.toLowerCase()) || divclosingtag.test(part.toLowerCase())\r\n                  //part.toLowerCase() === higlight.toLowerCase()\r\n                  {\r\n                    fontWeight: \"bold\",\r\n                    backgroundColor: this.state.tags[part.split(\"%\")[1]]\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {part.split(\"%\").reverse()[0]}\r\n          </span>\r\n        ))}\r\n      </div>\r\n    );\r\n    this.setState({ fileContent: taggedText });\r\n  };\r\n\r\n  loadFile = event => {\r\n    this.setState({ fileContent: event.target.result });\r\n    this.setState({ fileContentClean: event.target.result });\r\n    this.setTags();\r\n  };\r\n\r\n  highlightText = () => {\r\n    let textHolder = this.fileContentClean;\r\n    this.setState({\r\n      fileContent: this.getHighlightedText(textHolder, this.state.tagbox)\r\n    });\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ tagbox: event.target.value });\r\n  };\r\n\r\n  getHighlightedText = (data, mark) => {\r\n    //console.log(this);\r\n    let text = data;\r\n    let higlight = mark; //this.state.tagbox;\r\n    // Split on higlight term and include term into parts, ignore case\r\n    let parts = text.split(new RegExp(`(${higlight})`, \"gi\"));\r\n    let taggedText = (\r\n      <div>\r\n        {\" \"}\r\n        {parts.map((part, i) => (\r\n          <span\r\n            key={i}\r\n            style={\r\n              part.toLowerCase() === higlight.toLowerCase()\r\n                ? {\r\n                    fontWeight: \"bold\",\r\n                    backgroundColor: this.state.tagbox[part]\r\n                  }\r\n                : {}\r\n            }\r\n          >\r\n            {part}\r\n          </span>\r\n        ))}{\" \"}\r\n      </div>\r\n    );\r\n    return taggedText;\r\n  };\r\n\r\n  render() {\r\n    //<button onClick={this.highlightText}> Highlight</button>\r\n    //<input\r\n    //id=\"tags\"\r\n    //type=\"text\"\r\n    //height=\"200\"\r\n    //width=\"200\"\r\n    //value={this.state.tagbox}\r\n    //onChange={this.handleChange}\r\n    //>\r\n    //<button onClick={this.addTag}> Add tags</button>\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          align=\"center\"\r\n          style={{ backgroundImage: `url(${Background})`, height: \"100vh\" }}\r\n        >\r\n          <br></br>\r\n          <br></br>\r\n          <h1> Manage Tags in Article</h1>\r\n          <h2> Choose a file along with configuration file</h2>\r\n          <p>\r\n            Choose an article\r\n            <input\r\n              type=\"file\"\r\n              id=\"text_file\"\r\n              onChange={this.hadleClickOnUpload}\r\n            ></input>\r\n          </p>\r\n          <p>\r\n            Choose Configuration file\r\n            <input\r\n              type=\"file\"\r\n              id=\"config_file\"\r\n              onChange={this.loadConfiguration}\r\n            ></input>\r\n          </p>\r\n          <table>\r\n            <tr>\r\n              <td length=\"75%\">\r\n                {\" \"}\r\n                <ContextMenuTrigger id=\"some_unique_identifier\">\r\n                  <div id=\"text\">{this.state.fileContent}</div>{\" \"}\r\n                </ContextMenuTrigger>\r\n                <ContextMenu id=\"some_unique_identifier\">\r\n                  <MenuItem\r\n                    id=\"person\"\r\n                    data={{ foo: \"bar\" }}\r\n                    onClick={this.addTag}\r\n                  >\r\n                    <div style={{ backgroundColor: \"white\" }}>\r\n                      {\" \"}\r\n                      Set as person{\" \"}\r\n                    </div>\r\n                  </MenuItem>\r\n                  <MenuItem data={{ foo: \"bar\" }} onClick={this.handleClick}>\r\n                    <div style={{ backgroundColor: \"white\" }}>\r\n                      {\" \"}\r\n                      ContextMenu Item 2{\" \"}\r\n                    </div>\r\n                  </MenuItem>\r\n                  <MenuItem divider />\r\n                  <MenuItem data={{ foo: \"bar\" }} onClick={this.handleClick}>\r\n                    <div style={{ backgroundColor: \"white\" }}>\r\n                      {\" \"}\r\n                      ContextMenu Item 3{\" \"}\r\n                    </div>\r\n                  </MenuItem>\r\n                </ContextMenu>\r\n              </td>\r\n              <td length=\"25%\"> dl.kghjreighroigh</td>\r\n            </tr>\r\n          </table>\r\n          <div> try context menu</div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Main;\r\n"]},"metadata":{},"sourceType":"module"}